# -*- coding: utf-8 -*-

from ObjectApiProxy import ObjectApiProxy

class ParameterApi(ObjectApiProxy):
    """

    API to access parameter files
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ParameterApi, self).__init__(xmlRpc, objId)



    def CreateGlobalConstantsDefinition(self):
        """
        Creates a new global constants definition.

        :return: New empty global constants definition
        :rtype: :class:`.GlobalConstantsDefinition`
        
        """
        callResult = self._Call("CreateGlobalConstantsDefinition", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalConstantsDefinition
        return classInstance(self._xmlRpc, objId)


    def CreatePackageParametersDefinition(self):
        """
        Creates a new package parameters definition.

        :return: New empty package parameters definition
        :rtype: :class:`.PackageParametersDefinition`
        
        """
        callResult = self._Call("CreatePackageParametersDefinition", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageParametersDefinition
        return classInstance(self._xmlRpc, objId)


    def OpenGlobalConstantsDefinition(self, filename):
        """
        Opens an existing global constants definition file (\*.gcd).

        :param filename: File name of the global constants definition file;
                         Either absolute or relative to the 'Parameter' directory
        :type filename: unicode
        :return: Loaded global constants definition
        :rtype: :class:`.GlobalConstantsDefinition`
        :raise ApiError: If the global constants definition file (\*.gcd) does not exist.
        
        """
        callResult = self._Call("OpenGlobalConstantsDefinition", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalConstantsDefinition
        return classInstance(self._xmlRpc, objId)


    def OpenPackageParametersDefinition(self, filename):
        """
        Opens an existing package parameters definition file (\*.ppd).

        :param filename: File name of the package parameters definition file;
                         Either absolute or relative to the 'Parameter' directory
        :type filename: unicode
        :return: Loaded package parameters definition
        :rtype: :class:`.PackageParametersDefinition`
        :raise ApiError: If the package parameters definition file (\*.ppd) does not exist.
        
        """
        callResult = self._Call("OpenPackageParametersDefinition", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageParametersDefinition
        return classInstance(self._xmlRpc, objId)



class PackageParametersDefinition(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PackageParametersDefinition, self).__init__(xmlRpc, objId)



    def AppendParameter(self, name, value=None, description=None):
        """
        Appends a new package parameter. If a parameter with the same name already exists, it
        will be overwritten.

        :param name: Name of the parameter
        :type name: unicode
        :param value: Value of the parameter as you would type it in the dialog
                      (i.e. for strings you need to include the quotes!)
        :type value: string
        :param description: Description of the parameter
        :type description: unicode
        :raise ApiError: If parameter with the given name (and value/description) could
                         not be appended, e.g. if the value or description are invalid.
        
        """
        callResult = self._Call("AppendParameter", name, value, description)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PackageParametersDefinition`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageParametersDefinition
        return classInstance(self._xmlRpc, objId)


    def GetAllParameterNames(self):
        """
        Returns a list of all package parameter names.

        :return: List of all parameter names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAllParameterNames", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self, name):
        """
        Returns the description of the parameter specified by the given name.

        :param name: Name of the parameter to get the description of
        :type name: unicode
        :return: The desription of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", name)

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the package parameters definition file, if this is a file.
        Returns None if this is part of a parameter set or an unsaved file.

        :return: The file name of the saved file or None, if not a file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self, name):
        """
        Returns the value of the given parameter.
        If the value of an existing parameter is empty it will
        return None, if the value is defined as None it will return 'None'.

        :param name: Name of the parameter to get the value of
        :type name: unicode
        :return: Value of the given parameter
        :rtype: unicode
        :raise ApiError: If the parameter with the given name does not exist
        
        """
        callResult = self._Call("GetValue", name)

        if callResult is None:
            return None

        return callResult

    def RemoveParameter(self, name):
        """
        Removes the parameter specified by the given name.

        :param name: Name of the parameter to remove
        :type name: unicode
        :return: If removing of the given parameter was successful
        :rtype: boolean
        
        """
        callResult = self._Call("RemoveParameter", name)

        if callResult is None:
            return None

        return callResult

    def Save(self, filename=None):
        """
        Saves the package parameters definition to a file. Appends file ending if needed.

        :param filename: File name of the package parameters definition file (\*.ppd);
                         Either absolute or relative to the 'Parameter' directory.
                         Leave out to save the definitions to its existing file
                         (previously set with :meth:`Save()<.PackageParametersDefinition.Save>`
                         or from :meth:`.ParameterApi.OpenPackageParametersDefinition`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)


    def SetDescription(self, name, description):
        """
        Sets the description of the parameter specified by the given name.

        :param name: Name of the parameter to set the description of
        :type name: unicode
        :param description: Description of the parameter to be set
        :type description: unicode
        :raise ApiError: If the parameter with the given name does not exist
        :raise ApiError: If description is no unicode
        
        """
        callResult = self._Call("SetDescription", name, description)


    def SetValue(self, name, value=None):
        """
        Sets the value of the parameter specified by the given name.

        :param name: Name of the parameter to set the value of
        :type name: unicode
        :param value: Value of the parameter as you would type it in the editor
                      (i.e. for strings you need to include the quotes!)
                      Can be set to 'None' to reset the parameter value.
        :type value: unicode
        :raise ApiError: If the parameter with the given name does not exist
        :raise ApiError: If the value is no valid expression
        
        """
        callResult = self._Call("SetValue", name, value)



class GlobalConstantsDefinition(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(GlobalConstantsDefinition, self).__init__(xmlRpc, objId)



    def AppendConstant(self, name, value=None, description=None):
        """
        Appends a new global constant. If a constant with the same name already exists, it
        will be overwritten.

        :param name: Name of the constant
        :type name: unicode
        :param value: Value expression for the constant.
                      (for strings you need to include quotes!)
                      Can be left empty to create new constant without value.
        :type value: string
        :param description: Description of the constant
        :type description: unicode
        :raise ApiError: If constant with the given name and value could not be appended,
                         e.g. if the name is no valid identifier, or the value can not be parsed.
        
        """
        callResult = self._Call("AppendConstant", name, value, description)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.GlobalConstantsDefinition`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalConstantsDefinition
        return classInstance(self._xmlRpc, objId)


    def GetAllConstantNames(self):
        """
        Returns a list of all global constant names.

        :return: List of all global constant names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAllConstantNames", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self, name):
        """
        Returns the description of the constant specified by the given name.

        :param name: Name of the constant
        :type name: unicode
        :return: Description text
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", name)

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the global constants definition file, if this is a file.
        Returns None if this is part of the test configuration, a parameter set or an unsaved file.

        :return: The file name of the saved file or None, if not a file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self, name):
        """
        Returns the string representation of the value expression of the constant,
        specified by the given name.

        :param name: Name of the constant
        :type name: unicode
        :return: Expression for the constant value
        :rtype: unicode
        :raise ApiError: If the constant with the given name does not exist
        
        """
        callResult = self._Call("GetValue", name)

        if callResult is None:
            return None

        return callResult

    def RemoveConstant(self, name):
        """
        Removes the global constant specified by the given name.

        :param name: Name of the constant
        :type name: unicode
        :return: True if successful. False if no constant with such name exists.
        :rtype: boolean
        
        """
        callResult = self._Call("RemoveConstant", name)

        if callResult is None:
            return None

        return callResult

    def Save(self, filename=''):
        """
        Saves the global constants definition to a file. Appends
        file ending if needed.

        :param filename: File name for the global constants definition file (\*.gcd);
                         Either absolute or relative to the 'Parameter' directory.
                         If left out, use the existing file name and path
                         (previously set with :meth:`~.GlobalConstantsDefinition.Save`
                         or from :meth:`.ParameterApi.OpenGlobalConstantsDefinition`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)


    def SetDescription(self, name, description):
        """
        Sets the description of the constant specified by the given name.

        :param name: Name of the constant
        :type name: unicode
        :param description: Description text
        :type description: unicode
        :raise ApiError: If the constant with the given name does not exist
        :raise ApiError: If description is no unicode
        
        """
        callResult = self._Call("SetDescription", name, description)


    def SetValue(self, name, value):
        """
        Sets the value expression of the constant specified by the given name.

        :param name: Name of the constant
        :type name: unicode
        :param value: Value expression for the constant value
                      (for strings you need to include quotes!)
                      Can be set to 'None' to reset the constant's value.
        :type value: unicode
        :raise ApiError: If the constant with the given name does not exist
        :raise ApiError: If the value is no valid expression
        
        """
        callResult = self._Call("SetValue", name, value)



class TraceStepTemplateApi(ObjectApiProxy):
    """

    API to access trace step template files
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceStepTemplateApi, self).__init__(xmlRpc, objId)



    def OpenTraceStepTemplate(self, filename):
        """
        Opens a trace step template file.

        :param filename: Name of the trace step template file
        :type filename: unicode
        :return: Trace step template
        :rtype: :class:`.TraceStepTemplate`
        
        """
        callResult = self._Call("OpenTraceStepTemplate", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)



class TraceStepTemplate(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceStepTemplate, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TraceStepTemplate`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace step template.

        :return: The Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace step template.
        
        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterDescriptions(self):
        """
        Returns the descriptions of all parameters of a trace step template.
        
        :return: The descriptions of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterDescriptions", )

        if callResult is None:
            return None

        return callResult

    def GetParameterDirections(self):
        """
        Returns the direction of all parameters of a trace step template.
    
        :return: The direction of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterDirections", )

        if callResult is None:
            return None

        return callResult

    def GetParameterNames(self):
        """
        Returns the names of all parameters of a trace step template.
        
        :return: The names of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterNames", )

        if callResult is None:
            return None

        return callResult

    def GetParameterTypes(self):
        """
        Returns the types of all parameters of a trace step template.
        
        :return: The types of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterTypes", )

        if callResult is None:
            return None

        return callResult

    def GetSignalDescriptions(self):
        """
        Returns the descriptions of all signals of a trace step template.
        
        :return: The Descriptions of all signals
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalDescriptions", )

        if callResult is None:
            return None

        return callResult

    def GetSignalDirections(self):
        """
        Returns the direction of all signals of a trace step template.
        
        :return: The direction of all signals
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalDirections", )

        if callResult is None:
            return None

        return callResult

    def GetSignalNames(self):
        """
        Returns the names of all signals of the trace step template.

        :return: The Names of all signals
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalNames", )

        if callResult is None:
            return None

        return callResult

    def GetSignalOptionalFlags(self):
        """
        Returns the "is optional" flags of all signals of a trace step template.

        :return: The "is optional" flags of all signals
        :rtype: list<boolean>
        
        """
        callResult = self._Call("GetSignalOptionalFlags", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the specific type of the trace step template, i.e.

        * "TraceStepTemplatePythonEvent"
        * "TraceStepTemplatePythonEventDeprecated"
        * "TraceStepTemplatePythonStream"
        * "TraceStepTemplateTimingDiagram"
        * "TraceStepTemplateLogic"
        * "TraceStepTemplateInternal"
        * "TraceStepTemplateMissing"
        * "TraceStepTemplateBroken"
        
        If the particular type cannot be resolved, the method will return

        * "TraceStepTemplate"
        
        :return: The type of the template 
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def IsMissing(self):
        """
        Returns whether the trace step template represents a missing trace step template.

        :note: This status is set initially and will not be changed if the trace step template
               becomes available later on. You need to close and re-open the package,
               obtain the trace step from the re-opened package using
               :meth:`Package.GetTraceAnalyses <.ApiClient.Package.Package.GetTraceAnalyses>`,
               :meth:`.TraceStepContainer.GetTraceSteps`, etc.,
               and call :meth:`.TemplateBasedTraceStep.GetTemplate` on the new instance.

        :return: True if the file of the trace step template is not found
        :rtype: boolean
        
        """
        callResult = self._Call("IsMissing", )

        if callResult is None:
            return None

        return callResult


class PythonEventFunction(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PythonEventFunction, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PythonEventFunction`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PythonEventFunction
        return classInstance(self._xmlRpc, objId)


    def GetCode(self):
        """
        Returns the code used in the function.
        
        :return: The code
        :rtype: unicode
        
        """
        callResult = self._Call("GetCode", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the function.
        
        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetSignalNames(self):
        """
        Returns the names of the registered signals.
        
        :return: The registered signal names
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalNames", )

        if callResult is None:
            return None

        return callResult


class ReportApi(ObjectApiProxy):
    """

    API to access test reports
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportApi, self).__init__(xmlRpc, objId)



    def OpenReport(self, filename):
        """
        Opens the referenced report file.

        :param filename: Filename of the report file as absolute path
        :type filename: unicode
        :rtype: :class:`.Report`
        :return: The report
        
        """
        callResult = self._Call("OpenReport", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Report
        return classInstance(self._xmlRpc, objId)



class Report(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Report, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Report`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Report
        return classInstance(self._xmlRpc, objId)


    def Close(self):
        """
        Closes the report. After closing the report it can not be modified/accessed anymore.

        
        """
        callResult = self._Call("Close", )


    def GetAuthor(self):
        """
        Returns the test author.

        :return: Test author
        :rtype: unicode
        
        """
        callResult = self._Call("GetAuthor", )

        if callResult is None:
            return None

        return callResult

    def GetDuration(self):
        """
        Returns the duration of the test execution.

        :return: Execution duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetExecutionTime(self):
        """
        Returns the test execution date and time as string representation.

        :return: Test execution date and time
        :rtype: unicode
        
        """
        callResult = self._Call("GetExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetKeywordCatalog(self):
        """
        Returns the name of the keyword catalog used during test execution.

        :return: The catalog name or an empty string if no catalog was present at test execution.
        :rtype: unicode
        
        """
        callResult = self._Call("GetKeywordCatalog", )

        if callResult is None:
            return None

        return callResult

    def GetMainProject(self):
        """
        Returns the main project.
        Raises an ApiError if the report is not the result of a project execution.

        :return: List of direct project sub components
        :rtype: :class:`.ReportProject`
        
        """
        callResult = self._Call("GetMainProject", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportProject
        return classInstance(self._xmlRpc, objId)


    def GetProjectExecutionPath(self):
        """
        Returns the execution path in relation to the calling project if executed as separate
        sub-project or the name of the project, if not not executed separately.

        :return: Path in the project execution stack
        :rtype: unicode
        
        """
        callResult = self._Call("GetProjectExecutionPath", )

        if callResult is None:
            return None

        return callResult

    def GetProjectName(self):
        """
        Returns the name of the root project if it is a project report, otherwise empty string.

        :return: Name of the project
        :rtype: unicode
        
        """
        callResult = self._Call("GetProjectName", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the total test result.

        :return: Total test result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the corresponding testmanagement Id of the root level project.

        :return: Testmanagement Id or an empty string if no Id defined. If no project was executed
                 None will be returned.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTeststand(self):
        """
        Returns the computer name where the test was executed.

        :return: Name of the computer
        :rtype: unicode
        
        """
        callResult = self._Call("GetTeststand", )

        if callResult is None:
            return None

        return callResult

    def GetTimeZoneUTCOffset(self):
        """
        Returns the offset from UTC in seconds based on the time zone in which the test report was
        generated. If no time zone is set in the report, None will be returned.

        :return: Offset from UTC in seconds, or None
        :rtype: int
        
        """
        callResult = self._Call("GetTimeZoneUTCOffset", )

        if callResult is None:
            return None

        return callResult

    def GetTopLevelPackages(self):
        """
        Convenience method for the testmanagement synchronization.

        On a package report one package report will be returned.
        On a project report all package reports will be returned in a flat list
        regardless of directories. Packages of sub projects will be ignored.


        :return: List of package objects
        :rtype: list <:class:`.ReportPackage`>
        
        """
        callResult = self._Call("GetTopLevelPackages", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetVersion(self):
        """
        Returns the ECU-TEST Version which created this report.

        :return: Version of ECU-TEST
        :rtype: unicode
        
        """
        callResult = self._Call("GetVersion", )

        if callResult is None:
            return None

        return callResult

    def IsProjectReport(self):
        """
        Checks if the report is from a project execution or not.

        :return: True if the report is the result of a project execution, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsProjectReport", )

        if callResult is None:
            return None

        return callResult


class ReportProjectElement(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportProjectElement, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportProjectElement`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetElementName(self):
        """
        Returns the name of the project element.

        :return: Element name
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements. 
        
        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetResult(self):
        """
        Returns the result of the project Element.

        :return: Project element result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult


class ReportTestCase(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportTestCase, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportTestCase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportTestCase
        return classInstance(self._xmlRpc, objId)


    def GetResult(self):
        """
        Returns the result of the test case.
        
        :return: result of the test case
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self):
        """
        Returns all direct child test steps of the test case.

        :return: List of test step results
        :rtype: list <:class:`.ReportTestStep`>
        
        """
        callResult = self._Call("GetTestSteps", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ReportTestStep
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList



class ReportItem(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportItem, self).__init__(xmlRpc, objId)



    def AddRevalComment(self, author, comment, revaluation=None):
        """
        Add a revaluation comment to the test step.
        
        :param author: author of the comment
        :type author: unicode
        :param comment: text of the comment. Must be at least 10 characters
        :type comment: unicode
        :param revaluation: "NONE", "SUCCESS", "INCONCLUSIVE", "FAILED" or "ERROR"; 
                            None to just add a comment without changing the result
        :type revaluation: unicode
        
        """
        callResult = self._Call("AddRevalComment", author, comment, revaluation)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the report item.

        :return: Abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the report item.

        :return: Abort comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetActivity(self):
        """
        Returns the activity part of the content of the 'Activity/Name' column.

        :return: Activity part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetActivity", )

        if callResult is None:
            return None

        return callResult

    def GetId(self):
        """
        Returns the Id of the report item.

        :return: Id of the report item
        :rtype: int
        
        """
        callResult = self._Call("GetId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name part of the content of the 'Activity/Name' column.

        :return: Name part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetNestingLevel(self):
        """
        Returns the nesting depth.

        :return: Nesting depth
        :rtype: int
        
        """
        callResult = self._Call("GetNestingLevel", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the content of the 'Original evaluation' column.

        :return: Content of the 'Original evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetParentId(self):
        """
        Returns the Id of the parent report item.

        :return: Id of the parent report item
        :rtype: int
        
        """
        callResult = self._Call("GetParentId", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the content of the 'Evaluation' column.

        :return: Content of the 'Evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetRevalComments(self):
        """
        Returns all revalution comments of the test step.

        :return: List of revaluation comments
        :rtype: list <:class:`.RevaluationComment`>
        
        """
        callResult = self._Call("GetRevalComments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RevaluationComment
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTags(self):
        """
        Returns all tags associated with this report entry.
        
        :return: Tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def HasTag(self, tagName):
        """
        Checks whether this report item has the specified tag
        
        :param tagName: tag to check for
        :type tagName: unicode
        :return: whether this report item has the specified tag
        :rtype: bool
        
        """
        callResult = self._Call("HasTag", tagName)

        if callResult is None:
            return None

        return callResult


class RevaluationComment(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(RevaluationComment, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.RevaluationComment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = RevaluationComment
        return classInstance(self._xmlRpc, objId)


    def GetAuthor(self):
        """
        Returns the author of the revaluation comment.

        :return: Author of the comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAuthor", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the revaluated result.

        :return: The revaluated result or None
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetText(self):
        """
        Returns the text of the of revaluation comment.

        :return: Text of the comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetText", )

        if callResult is None:
            return None

        return callResult

    def GetTime(self):
        """
        Returns the creation date and time of the revaluation comment.

        :return: Creation date and time of the revaluation comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetTime", )

        if callResult is None:
            return None

        return callResult


class ReportAnalysisJob(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportAnalysisJob, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportAnalysisJob`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportAnalysisJob
        return classInstance(self._xmlRpc, objId)


    def GetAllEpisodes(self):
        """
        Returns all episodes of the analysis job regardless of the position in
        the report.

        :return: List of trace step results
        :rtype: list <:class:`.ReportAnalysisEpisode`>
        
        """
        callResult = self._Call("GetAllEpisodes", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ReportAnalysisEpisode
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetDuration(self):
        """
        Returns the execution duration.
        
        :return: Excecution duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the result verdict of the analysis job.
        
        :return: the result verdict
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingInfos(self):
        """
        Returns an object encapsulating the recording infos of the analysis job.
        
        :return: The recording infos table
        :rtype: list <:class:`.ReportRecordingInfo`>
        
        """
        callResult = self._Call("GetRecordingInfos", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ReportRecordingInfo
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetResult(self):
        """
        Returns the result verdict of the analysis job.
        
        :return: the result verdict
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self):
        """
        Returns all direct child trace steps of the episode.

        :return: List of trace step results
        :rtype: list <:class:`.ReportAnalysisStep`>
        
        """
        callResult = self._Call("GetTraceSteps", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList



class ReportRecording(ObjectApiProxy):
    """

    """


    @property
    def PATH_ABS(self):
        """
        The constant used to specify that the recording path is stored as absolute path.

        :return: The constant
        :rtype: int
        
        """
        return self.__PATH_ABS

    @property
    def PATH_REL_REPORT(self):
        """
        The constant used to specify that the recording path is stored relative to
        the report database.

        :return: The constant
        :rtype: int
        
        """
        return self.__PATH_REL_REPORT

    @property
    def PATH_REL_WORKSPACE(self):
        """
        The constant used to specify that the recording path is stored relative to
        the workspace used for the test.

        :return: The constant
        :rtype: int
        
        """
        return self.__PATH_REL_WORKSPACE

    @property
    def SOURCE_MANUAL(self):
        """
        The constant used to specify that the recording was manually added.

        :return: The constant
        :rtype: int
        
        """
        return self.__SOURCE_MANUAL

    @property
    def SOURCE_RECORDING(self):
        """
        The constant used to specify that the recording was recorded during the test.

        :return: The constant
        :rtype: int
        
        """
        return self.__SOURCE_RECORDING

    def __init__(self, xmlRpc=None, objId=0):
        super(ReportRecording, self).__init__(xmlRpc, objId)

        self.__PATH_ABS = self._xmlRpc.ObjectApi.GetAttr(self._objId, "PATH_ABS")
        self.__PATH_REL_REPORT = self._xmlRpc.ObjectApi.GetAttr(self._objId, "PATH_REL_REPORT")
        self.__PATH_REL_WORKSPACE = self._xmlRpc.ObjectApi.GetAttr(self._objId, "PATH_REL_WORKSPACE")
        self.__SOURCE_MANUAL = self._xmlRpc.ObjectApi.GetAttr(self._objId, "SOURCE_MANUAL")
        self.__SOURCE_RECORDING = self._xmlRpc.ObjectApi.GetAttr(self._objId, "SOURCE_RECORDING")


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportRecording`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportRecording
        return classInstance(self._xmlRpc, objId)


    def GetAbsolutePath(self):
        """
        Convenience method to get the absolute path to the recording file.
        Depending on the path type a base directory will be determined to make an absolute path:
         
         * :py:attr:`ReportRecording.PATH_REL_REPORT`: The path to the current report will be
           used to make the path absolute.
         * :py:attr:`ReportRecording.PATH_ABS`: The path will be returned as it is.
         * :py:attr:`ReportRecording.PATH_REL_WORKSPACE`: The current workspace path will be 
           used to make the path absolute.
        
        :return: The absolute path
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbsolutePath", )

        if callResult is None:
            return None

        return callResult

    def GetNameAndFormatDetails(self):
        """
        Returns the recording name and the format details (if set).
        
        :return: The recording name and the format details as text of the form 
                 "<name> (<formatdetails>)" if format details are set else of the form
                 "<name>".
        :rtype: unicode
        
        """
        callResult = self._Call("GetNameAndFormatDetails", )

        if callResult is None:
            return None

        return callResult

    def GetNumber(self):
        """
        Returns the recording number.
        
        :return: The recording number
        :rtype: int
        
        """
        callResult = self._Call("GetNumber", )

        if callResult is None:
            return None

        return callResult

    def GetPath(self):
        """
        Returns the path to the recording file. The path can be absolute or relative.
        The path type can be read by calling :meth:`~.ReportRecording.GetPathType`.
        
        :return: The path
        :rtype: unicode
        
        """
        callResult = self._Call("GetPath", )

        if callResult is None:
            return None

        return callResult

    def GetPathType(self):
        """
        Returns how the path is to the recording is stored in the report.
        
        :return: Can return the following constants:
        
                  * :py:attr:`ReportRecording.PATH_REL_REPORT`
                  * :py:attr:`ReportRecording.PATH_ABS`
                  * :py:attr:`ReportRecording.PATH_REL_WORKSPACE`
        :rtype: int
        
        """
        callResult = self._Call("GetPathType", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingGroupName(self):
        """
        Returns the name of the recording group.
        
        :return: The recording group name
        :rtype: unicode
        
        """
        callResult = self._Call("GetRecordingGroupName", )

        if callResult is None:
            return None

        return callResult

    def GetSignalGroupName(self):
        """
        Returns the name of the signal group.
        
        :return: The signal group name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSignalGroupName", )

        if callResult is None:
            return None

        return callResult

    def GetSource(self):
        """
        Returns the source of the recording.
        
        :return: Can return the following constants:
        
                  * :py:attr:`ReportRecording.SOURCE_RECORDING`
                  * :py:attr:`ReportRecording.SOURCE_MANUAL`
        :rtype: int
        
        """
        callResult = self._Call("GetSource", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type of the recording, e.g. "CSV".
        
        :return: The type identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult


class ReportRecordingInfo(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportRecordingInfo, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportRecordingInfo`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportRecordingInfo
        return classInstance(self._xmlRpc, objId)


    def GetRecording(self):
        """
        Returns the recording that is referenced by the recording info.
        
        :return: The recording object
        :rtype: :class:`.ReportRecording`
        
        """
        callResult = self._Call("GetRecording", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportRecording
        return classInstance(self._xmlRpc, objId)


    def GetStartTime(self):
        """
        Returns the first time stamp read in from the recording.

        :return: First time stamp read in from the recording. 
                 Returns None if no start time was set.
        :rtype: float
        
        """
        callResult = self._Call("GetStartTime", )

        if callResult is None:
            return None

        return callResult

    def GetStopTime(self):
        """
        Returns the last time stamp read in from the recording.

        :return: Last time stamp read in from the recording.
                 Returns None if no stop time was set.
        :rtype: float
        
        """
        callResult = self._Call("GetStopTime", )

        if callResult is None:
            return None

        return callResult

    def GetSyncDeltaT(self):
        """
        Returns the time offset set by the synchronization of traces.

        :return: The deltaT
        :rtype: float
        
        """
        callResult = self._Call("GetSyncDeltaT", )

        if callResult is None:
            return None

        return callResult


class SignalDescriptionApi(ObjectApiProxy):
    """

    API to access signal description files
    
    """


    @property
    def SignalApi(self):
        """
        Returns the SignalApi namespace.

        :return: SignalApi namespace
        :rtype: :class:`.SignalApi`
        
        """
        return self.__SignalApi

    def __init__(self, xmlRpc=None, objId=0):
        super(SignalDescriptionApi, self).__init__(xmlRpc, objId)

        self.__SignalApi = SignalApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "SignalApi"))


    def CreateSignalDescriptionFile(self):
        """
        Creates a new sti or stz file.

        :return: Signal description
        :rtype: :class:`.SignalDescriptionFile`
        
        """
        callResult = self._Call("CreateSignalDescriptionFile", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalDescriptionFile
        return classInstance(self._xmlRpc, objId)


    def OpenSignalDescriptionFile(self, filename, upgradeLegacyFile=True):
        """
        Opens an existing sti or stz file.

        :param filename: Name of the signal description file to open
        :type filename: unicode
        :param upgradeLegacyFile: Selects whether a sti in version 1.0 should be upgraded or if
                                  loading should be aborted. A backup copy of the original file is
                                  saved at the same location with the suffix ".bak".
        :type upgradeLegacyFile: bool
        :return: Signal description
        :rtype: :class:`.SignalDescriptionFile`
        
        """
        callResult = self._Call("OpenSignalDescriptionFile", filename, upgradeLegacyFile)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalDescriptionFile
        return classInstance(self._xmlRpc, objId)



class SignalDescriptionFile(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalDescriptionFile, self).__init__(xmlRpc, objId)



    def AppendSignal(self, signal):
        """
        Append a signal description as last element.

        :param signal: Signal description
        :type signal: :class:`.Signal`
        
        """
        callResult = self._Call("AppendSignal", signal)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SignalDescriptionFile`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalDescriptionFile
        return classInstance(self._xmlRpc, objId)


    def Close(self):
        """
        Closes the signal description. After closing the file it can not be modified/accessed
        anymore.
        
        """
        callResult = self._Call("Close", )


    def ConvertToMat(self, destinationPath, sampleRate=100, signalList=None):
        """
        Converts the signals in the description file to a new MAT file

        :param destinationPath: Absolute path to store MAT file
        :type destinationPath: unicode
        :param sampleRate: Number of samples per second
        :type sampleRate: integer
        :param signalList: Signal names to be exported or None to export all signals
        :type signalList: list <unicode>
        
        """
        callResult = self._Call("ConvertToMat", destinationPath, sampleRate, signalList)


    def GetAllSignalNames(self):
        """
        Returns a list of names of all signals defined in the description file

        :return: Signal names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAllSignalNames", )

        if callResult is None:
            return None

        return callResult

    def SaveSti(self, destinationPath):
        """
        Stores the current signal description to a sti file.

        :param destinationPath: Absolute path to store STI file
        :type destinationPath: unicode
        
        """
        callResult = self._Call("SaveSti", destinationPath)


    def SaveStz(self, destinationPath):
        """
        Stores the current signal description to a stz file.
        The stz will also contain all referenced signal descriptions
        
        :param destinationPath: Absolute path to store STZ file
        :type destinationPath: unicode
        
        """
        callResult = self._Call("SaveStz", destinationPath)



class SignalSegment(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalSegment, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SignalSegment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)



class Signal(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Signal, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Signal`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the name of the signal

        :return: Signal name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult


class SignalApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalApi, self).__init__(xmlRpc, objId)



    def CreateConstantSegment(self, duration=1.0, value=0.0):
        """
        Creates a constant signal segment

        :type duration: float
        :param duration: Duration of segment
        :type value: float
        :param value: Amplitude of signal value
        :return: New ConstantSegment
        :rtype: :class:`.ConstantSegment`
        
        """
        callResult = self._Call("CreateConstantSegment", duration, value)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ConstantSegment
        return classInstance(self._xmlRpc, objId)


    def CreateRampSegment(self, duration=1.0, startValue=0.0, stopValue=1.0):
        """
        Creates a ramp signal segment

        :type duration: float
        :param duration: Duration of segment
        :type startValue: float
        :param startValue: Amplitude of signal at the start
        :type stopValue: float
        :param stopValue: Amplitude of signal at the end
        :return: New RampSegment
        :rtype: :class:`.RampSegment`
        
        """
        callResult = self._Call("CreateRampSegment", duration, startValue, stopValue)

        if callResult is None:
            return None


        objId = callResult
        classInstance = RampSegment
        return classInstance(self._xmlRpc, objId)


    def CreateSignal(self, name):
        """
        Creates an empty signal definition

        :type name: unicode
        :param name: Name for the signal
        :return: New Signal
        :rtype: :class:`.SegmentSignal`
        
        """
        callResult = self._Call("CreateSignal", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SegmentSignal
        return classInstance(self._xmlRpc, objId)


    def CreateSignalReferenceSegment(self, filePath, dataSignalName, timeSignalName='time', interpolationType='backward'):
        """
        Creates a signal segment which references a trace file to use a contained signal

        :type filePath: string
        :param filePath: Absolute path of the trace file
        :type dataSignalName: string
        :param dataSignalName: Name of the signal in the trace file to be used for signal values
        :type timeSignalName: string
        :param timeSignalName: Name of the signal in the trace file to be used as time vector
        :type interpolationType: string
        :param interpolationType: Interpolation method (backward, forward, linear)
        :return: New SignalReferenceSegment
        :rtype: :class:`.SignalReferenceSegment`
        
        """
        callResult = self._Call("CreateSignalReferenceSegment", filePath, dataSignalName, timeSignalName, interpolationType)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalReferenceSegment
        return classInstance(self._xmlRpc, objId)



class ConfigurationApi(ObjectApiProxy):
    """

    API to access configuration files
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ConfigurationApi, self).__init__(xmlRpc, objId)



    def CreateTestBenchConfiguration(self):
        """
        Creates new test bench configuration.

        :return: New empty test bench configuration
        :rtype: :class:`.TestBenchConfiguration`
        
        """
        callResult = self._Call("CreateTestBenchConfiguration", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TestBenchConfiguration
        return classInstance(self._xmlRpc, objId)


    def CreateTestConfiguration(self):
        """
        Creates a new test configuration.

        :return: New empty test configuration
        :rtype: :class:`.TestConfiguration`
        
        """
        callResult = self._Call("CreateTestConfiguration", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TestConfiguration
        return classInstance(self._xmlRpc, objId)


    def OpenTestBenchConfiguration(self, filename):
        """
        Opens an existing test bench configuration (\*.tbc).

        :param filename: File name of the test bench configuration file (\.*tbc);
                         Either absolute or relative to the 'Configuration' directory
        :type filename: unicode
        :return: Loaded test bench configuration
        :rtype: :class:`.TestBenchConfiguration`
        :raise ApiError: If the test bench configuration file (\*.tbc) does not exist.
        
        """
        callResult = self._Call("OpenTestBenchConfiguration", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TestBenchConfiguration
        return classInstance(self._xmlRpc, objId)


    def OpenTestConfiguration(self, filename):
        """
        Opens an existing test configuration.

        :param filename: File name of the test configuration file (\*.tcf);
                         Either absolute or relative to the 'Configuration' directory
        :type filename: unicode
        :return: Loaded test configuration
        :rtype: :class:`.TestConfiguration`
        :raise ApiError: If the test configuration file (\*.tcf) does not exist.
        
        """
        callResult = self._Call("OpenTestConfiguration", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TestConfiguration
        return classInstance(self._xmlRpc, objId)



class TestBenchConfiguration(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TestBenchConfiguration, self).__init__(xmlRpc, objId)



    def CreateToolHost(self, toolHostUrl):
        """
        Creates a new tool host with the given URL. E.g.:

            * 'local'
            * 'tsp:127.0.0.1:5017'
            * 'tsp:hostname:5017'

        :param toolHostUrl: The URL of the created tool host
        :type toolHostUrl: unicode
        :return: The newly created tool host object
        :rtype: :class:`.ToolHost`
        
        """
        callResult = self._Call("CreateToolHost", toolHostUrl)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ToolHost
        return classInstance(self._xmlRpc, objId)


    def GetFilename(self):
        """
        Returns the filename with extension

        :return: filename with extension
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetPort(self, portId):
        """
        Returns the port with the given portId.

        :param portId: Name of the port
        :type portId: unicode
        :return: The port object.
        :rtype: :class:`.Port`
        :raise ApiError: If there is no port with this Id.
        
        """
        callResult = self._Call("GetPort", portId)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Port
        return classInstance(self._xmlRpc, objId)


    def GetTool(self, toolId):
        """
        Returns the tool with the given toolId.

        :param toolId: ID of the tool
        :type toolId: unicode
        :return: The tool object.
        :rtype: :class:`.Tool`
        :raise ApiError: If there is no tool with this Id.
        
        """
        callResult = self._Call("GetTool", toolId)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Tool
        return classInstance(self._xmlRpc, objId)


    def GetToolHost(self, url):
        """
        Returns the tool host with the given URL.

        :param url: URL of the tool host
        :type url: unicode
        :return: The tool host object.
        :rtype: :class:`.ToolHost`
        :raise ApiError: If there is no host using this URL.
        
        """
        callResult = self._Call("GetToolHost", url)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ToolHost
        return classInstance(self._xmlRpc, objId)


    def GetToolHosts(self):
        """
        Returns a list of all tool hosts belonging to this testbench configuration.

        :return: The list of all tool host objects
        :rtype: list <:class:`.ToolHost`>
        
        """
        callResult = self._Call("GetToolHosts", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ToolHost
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def RemoveToolHost(self, toolHost):
        """
        Removes the tool host and all configured tools and ports connected to it.

        :param toolHost: The tool host object to be removed
        :type toolHost: :class:`.ToolHost`
        
        """
        callResult = self._Call("RemoveToolHost", toolHost)


    def Save(self, filename=None):
        """
        Saves the test bench configuration. Appends file ending if needed.

        :param filename: The file name used for storing the test bench configuration file;
                         Either absolute or relative to the 'Configuration' directory.
                         Leave out to save the configuration to its existing file
                         (from a previous call of :meth:`~.TestBenchConfiguration.Save` or from
                         :meth:`.ConfigurationApi.OpenTestBenchConfiguration`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)



class Tool(ObjectApiProxy):
    """

    """


    @property
    def PropertySet(self):
        """
        The properties of this tool.

        :return: the properties of this tool
        :rtype: :class:`.PropertySet`
        
        """
        return self.__PropertySet

    @property
    def START_OPTION_ALWAYS(self):
        """
        Returns the constant used to specify the start option 'always':
        the tool will always be started.

        :return: The constant
        :rtype: int
        
        """
        return self.__START_OPTION_ALWAYS

    @property
    def START_OPTION_CONDITIONAL(self):
        """
        Returns the constant used to specify the start option 'conditional':
        the tool will be started when needed.

        :return: The constant
        :rtype: int
        
        """
        return self.__START_OPTION_CONDITIONAL

    @property
    def START_OPTION_NEVER(self):
        """
        Returns the constant used to specify the start option 'never':
        the tool will never be started automatically.

        :return: The constant
        :rtype: int
        
        """
        return self.__START_OPTION_NEVER

    def __init__(self, xmlRpc=None, objId=0):
        super(Tool, self).__init__(xmlRpc, objId)

        self.__PropertySet = PropertySet(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "PropertySet"))
        self.__START_OPTION_ALWAYS = self._xmlRpc.ObjectApi.GetAttr(self._objId, "START_OPTION_ALWAYS")
        self.__START_OPTION_CONDITIONAL = self._xmlRpc.ObjectApi.GetAttr(self._objId, "START_OPTION_CONDITIONAL")
        self.__START_OPTION_NEVER = self._xmlRpc.ObjectApi.GetAttr(self._objId, "START_OPTION_NEVER")


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Tool`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Tool
        return classInstance(self._xmlRpc, objId)


    def CreatePort(self, portType, implType=None):
        """
        Creates a new port on this tool.

        :param portType: The port type to be used.
                         Use :meth:`.GetAvailablePortTypes`
                         to get a list of all valid values.
        :type portType: unicode
        :param implType: The implementation type to be used. If the specified portType does not
                         require a specific implementation type, this argument should be None or
                         left out entirely.
                         Use :meth:`.GetAvailableImplTypes`
                         to get a list of all valid values.
        :type implType: unicode
        :return: The newly created Port object.
        :rtype: :class:`.Port`
        
        """
        callResult = self._Call("CreatePort", portType, implType)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Port
        return classInstance(self._xmlRpc, objId)


    def GetAvailableImplTypes(self, portType):
        """
        Returns a list of all available implementation types for a specified port type.

        :param portType: The port type to be used.
                         Use :meth:`.GetAvailablePortTypes`
                         to get a list of all valid values.
        :type portType: unicode
        :return: A list of all available implementation types
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAvailableImplTypes", portType)

        if callResult is None:
            return None

        return callResult

    def GetAvailablePortTypes(self):
        """
        Returns a list of all available port types for this tool.

        :return: All available port types
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAvailablePortTypes", )

        if callResult is None:
            return None

        return callResult

    def GetId(self):
        """
        Returns the id of the tool.

        :return: The id of the tool
        :rtype: unicode
        
        """
        callResult = self._Call("GetId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the tool.

        :return: The name of the tool
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPorts(self, portType=None):
        """
        Returns the ports assigned to this tool. If the parameter portType is given, only those
        ports belonging to this portType will be returned.

        :param portType: The portType used for filtering the returned ports.
                         Use :meth:`.GetAvailablePortTypes`
                         to get a list of all valid values.
                         Might be left out.
        :type portType: unicode
        :return: A list of port objects assigned to this tool.
        :rtype: list <:class:`.Port`>
        
        """
        callResult = self._Call("GetPorts", portType)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Port
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetStartOption(self):
        """
        Returns the startoption for this tool.

        :return: Startoption of the Tool

            * :py:attr:`Tool.START_OPTION_CONDITIONAL`
            * :py:attr:`Tool.START_OPTION_ALWAYS`
            * :py:attr:`Tool.START_OPTION_NEVER`

        :rtype: int
        
        """
        callResult = self._Call("GetStartOption", )

        if callResult is None:
            return None

        return callResult

    def GetStartPriority(self):
        """
        Queries the start priority of the tool.

        :return: Start priority. The start priority specifies the start order of the tools.
                 A lower numeric value implies a higher priority.
        :rtype: int
        
        """
        callResult = self._Call("GetStartPriority", )

        if callResult is None:
            return None

        return callResult

    def RemovePort(self, port):
        """
        Removes the port from the tool.

        :param port: The port to be removed.
        :type port: :class:`.Port`
        
        """
        callResult = self._Call("RemovePort", port)


    def Rename(self, newToolId):
        """
        Changes the id of the tool to the given one.

        :param newToolId: The new id to be used.
        :type newToolId: unicode
        :raise ApiError: If newtoolId could not be set
        
        """
        callResult = self._Call("Rename", newToolId)


    def SetStartOption(self, option):
        """
        Sets the start option of the tool.

        :param option: New start option for the tool. Possible values:

            * :py:attr:`Tool.START_OPTION_CONDITIONAL`
            * :py:attr:`Tool.START_OPTION_ALWAYS`
            * :py:attr:`Tool.START_OPTION_NEVER`

        :type option: int
        
        """
        callResult = self._Call("SetStartOption", option)


    def SetStartPriority(self, value):
        """
        Sets the start priority of the tool.

        :param value: Start priority. The start priority specifies the start order of the tools.
                      A lower numeric value implies a higher priority.
        :type value: int
        
        """
        callResult = self._Call("SetStartPriority", value)



class Port(ObjectApiProxy):
    """

    """


    @property
    def AUTOSTART_ALWAYS(self):
        """
        Returns the constant used to specify the autostart option 'always':
        The port will always be started.

        :return: The constant
        :rtype: int
        
        """
        return self.__AUTOSTART_ALWAYS

    @property
    def AUTOSTART_CONDITIONAL(self):
        """
        Returns the constant used to specify the autostart option 'conditional':
        The port will be started when needed.

        :return: The constant
        :rtype: int
        
        """
        return self.__AUTOSTART_CONDITIONAL

    @property
    def AUTOSTART_NEVER(self):
        """
        Returns the constant used to specify the autostart option 'never':
        The port will never be started automatically.

        :return: The constant
        :rtype: int
        
        """
        return self.__AUTOSTART_NEVER

    @property
    def PropertySet(self):
        """
        The properties of this port.

        :return: properties of this port
        :rtype: :class:`.PropertySet`
        
        """
        return self.__PropertySet

    def __init__(self, xmlRpc=None, objId=0):
        super(Port, self).__init__(xmlRpc, objId)

        self.__AUTOSTART_ALWAYS = self._xmlRpc.ObjectApi.GetAttr(self._objId, "AUTOSTART_ALWAYS")
        self.__AUTOSTART_CONDITIONAL = self._xmlRpc.ObjectApi.GetAttr(self._objId, "AUTOSTART_CONDITIONAL")
        self.__AUTOSTART_NEVER = self._xmlRpc.ObjectApi.GetAttr(self._objId, "AUTOSTART_NEVER")
        self.__PropertySet = PropertySet(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "PropertySet"))


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Port`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Port
        return classInstance(self._xmlRpc, objId)


    def GetAutostart(self):
        """
        Returns the autostart mode for this port.

        :return: Autostart option of the port.

            * :py:attr:`Port.AUTOSTART_CONDITIONAL`
            * :py:attr:`Port.AUTOSTART_ALWAYS`
            * :py:attr:`Port.AUTOSTART_NEVER`

        :rtype: int
        
        """
        callResult = self._Call("GetAutostart", )

        if callResult is None:
            return None

        return callResult

    def GetId(self):
        """
        Returns the id of the port.

        :return: The id of the port.
        :rtype: unicode
        
        """
        callResult = self._Call("GetId", )

        if callResult is None:
            return None

        return callResult

    def GetPortType(self):
        """
        Returns the type of the port.

        :return: The type of the port.
        :rtype: unicode
        
        """
        callResult = self._Call("GetPortType", )

        if callResult is None:
            return None

        return callResult

    def Rename(self, newPortId):
        """
        Changes the id of the port to the given one.

        :param newPortId: The new id to be used.
        :type newPortId: unicode
        :raise ApiError: If newPortId could not be set
        
        """
        callResult = self._Call("Rename", newPortId)


    def SetAutostart(self, option):
        """
        Sets the autostart option of the port.

        :param option: New autostart option for the port. Possible values are:

            * :py:attr:`Port.AUTOSTART_CONDITIONAL`
            * :py:attr:`Port.AUTOSTART_ALWAYS`
            * :py:attr:`Port.AUTOSTART_NEVER`

        :type option: int
        
        """
        callResult = self._Call("SetAutostart", option)



class PropertySet(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PropertySet, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PropertySet`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PropertySet
        return classInstance(self._xmlRpc, objId)


    def GetNames(self):
        """
        Returns a list of the names of all available properties.

        :return: Names of all available properties
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetNames", )

        if callResult is None:
            return None

        return callResult

    def GetProperties(self):
        """
        Returns a list of all available properties.

        :return: all available properties
        :rtype: list <:class:`.Property`>
        
        """
        callResult = self._Call("GetProperties", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Property
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetProperty(self, name):
        """
        Returns the property with the given name.

        :param name: The name of the desired property
        :type name: unicode
        :return: The property with the given name
        :rtype: :class:`.Property`
        
        """
        callResult = self._Call("GetProperty", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Property
        return classInstance(self._xmlRpc, objId)



class Property(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Property, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Property`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Property
        return classInstance(self._xmlRpc, objId)


    def GetDefaultValue(self):
        """
        Returns the property's default value.

        :return: The default value
        :rtype: unicode
        :see: :meth:`.Property.GetValueType`
        
        """
        callResult = self._Call("GetDefaultValue", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayName(self):
        """
        Returns the display name of the property.

        :return: The display name of the property
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayName", )

        if callResult is None:
            return None

        return callResult

    def GetDomain(self):
        """
        Returns the domain of allowed values of this property.

        :return: List of valid values
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetDomain", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the internal name of the property.

        :return: The name of the property
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self):
        """
        Returns the used property value, which is either the configured value or the default
        value, in case the property is not set.

        :return: The configured value of the property, or the default value if not set
        :rtype: unicode
        :see: :meth:`.Property.GetValueType`
        
        """
        callResult = self._Call("GetValue", )

        if callResult is None:
            return None

        return callResult

    def GetValueType(self):
        """
        Returns the value type of this property.

        :return: Value type of this property
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueType", )

        if callResult is None:
            return None

        return callResult

    def IsReadOnly(self):
        """
        Returns whether the property is read-only.

        :return: Property is read-only?
        :rtype: boolean
        
        """
        callResult = self._Call("IsReadOnly", )

        if callResult is None:
            return None

        return callResult

    def SetValue(self, value):
        """
        Overwrites the value of this property.

        :param value: New value
        :type value: unicode
        :see: :meth:`.GetDomain`
        
        """
        callResult = self._Call("SetValue", value)


    def Unset(self):
        """
        Specifies that the property is set to its default value.
        
        """
        callResult = self._Call("Unset", )



class ToolHost(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ToolHost, self).__init__(xmlRpc, objId)



    def AddTool(self, toolName):
        """
        Configures a tool to be used by the corresponding test bench configuration.

        :param toolName: The name of the tool to use. Use :meth:`.GetAvailableToolNames` to get a
                         list of all available tool names.
        :type toolName: unicode
        :return: The created tool object
        :rtype: :class:`.Tool`
        
        """
        callResult = self._Call("AddTool", toolName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Tool
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ToolHost`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ToolHost
        return classInstance(self._xmlRpc, objId)


    def GetAvailableToolNames(self):
        """
        Returns a list of all tools that are available on this tool host.

        :return: The list of available tools
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAvailableToolNames", )

        if callResult is None:
            return None

        return callResult

    def GetBasePath(self):
        """
        Returns the tool host base path that is used for several tool property settings.

        :return: The tool host base path
        :rtype: unicode
        
        """
        callResult = self._Call("GetBasePath", )

        if callResult is None:
            return None

        return callResult

    def GetToolAccessTimeout(self):
        """
        Returns the timeout for tool calls.
        After that time, a tool call will be terminated with an error.

        :return: timeout in seconds
        :rtype: int
        
        """
        callResult = self._Call("GetToolAccessTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTools(self):
        """
        Returns all tools used by this tool host.

        :return: A list of the used tools.
        :rtype: list <:class:`.Tool`>
        
        """
        callResult = self._Call("GetTools", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Tool
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetUrl(self):
        """
        Returns the tool host URL.

        :return: The URL
        :rtype: unicode
        
        """
        callResult = self._Call("GetUrl", )

        if callResult is None:
            return None

        return callResult

    def RemoveTool(self, tool):
        """
        Removes the tool and all configured ports from the tool host.

        :param tool: The tool to be removed
        :type tool: :class:`.Tool`
        
        """
        callResult = self._Call("RemoveTool", tool)


    def Rename(self, newUrl):
        """
        Sets the URL of a given tool host. E.g.:

            * 'local'
            * 'tsp:127.0.0.1:5017'
            * 'tsp:hostname:5017'

        :param newUrl: New URL
        :type newUrl: unicode
        
        """
        callResult = self._Call("Rename", newUrl)


    def SetBasePath(self, basePath):
        """
        Sets the tool host base path. A value of '<workspace>' represents the current
        workspace path and can be combined with sub-paths (e.g., '<workspace>/Models').

        :param basePath: Base path on the tool host
        :type basePath: unicode
        
        """
        callResult = self._Call("SetBasePath", basePath)


    def SetToolAccessTimeout(self, timeout):
        """
        Sets the timeout for tool calls.
        After that time, a tool call will be terminated with an error.

        :param timeout: timeout in seconds
        :type timeout: int
        
        """
        callResult = self._Call("SetToolAccessTimeout", timeout)



class TestConfiguration(ObjectApiProxy):
    """

    """


    @property
    def BusAccess(self):
        """
        Bus access configuration

        :return: Bus access configuration
        :rtype: :class:`.BusAccess`
        
        """
        return self.__BusAccess

    @property
    def Common(self):
        """
        Common configuration

        :return: Common configuration
        :rtype: :class:`.Common`
        
        """
        return self.__Common

    @property
    def ControlUnits(self):
        """
        Control units configuration

        :return: Control units configuration
        :rtype: :class:`.ControlUnits`
        
        """
        return self.__ControlUnits

    @property
    def Execution(self):
        """
        Execution configuration

        :return: Execution configuration
        :rtype: :class:`.Execution`
        
        """
        return self.__Execution

    @property
    def GlobalConstants(self):
        """
        Global constants configuration

        :return: Global constants configuration
        :rtype: :class:`.GlobalConstants`
        
        """
        return self.__GlobalConstants

    @property
    def Platform(self):
        """
        Platform configuration

        :return: Platform configuration
        :rtype: :class:`.Platform`
        
        """
        return self.__Platform

    @property
    def Report(self):
        """
        Report configuration

        :return: Report configuration
        :rtype: :class:`.ReportData`
        
        """
        return self.__Report

    def __init__(self, xmlRpc=None, objId=0):
        super(TestConfiguration, self).__init__(xmlRpc, objId)

        self.__BusAccess = BusAccess(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "BusAccess"))
        self.__Common = Common(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Common"))
        self.__ControlUnits = ControlUnits(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ControlUnits"))
        self.__Execution = Execution(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Execution"))
        self.__GlobalConstants = GlobalConstants(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "GlobalConstants"))
        self.__Platform = Platform(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Platform"))
        self.__Report = ReportData(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Report"))


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TestConfiguration`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TestConfiguration
        return classInstance(self._xmlRpc, objId)


    def GetFilename(self):
        """
        Returns the full file name (with extension)

        :return: File name of the test configuration file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def Save(self, filename=None):
        """
        Saves the test configuration to a file. Appends file ending if needed.

        :param filename: The file name used for storing the test configuration file;
                         Either absolute or relative to the 'Configuration' directory.
                         Leave out to save the configuration to its existing file
                         (previously set with :meth:`~.TestConfiguration.Save`
                         or from :meth:`.ConfigurationApi.OpenTestConfiguration`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)



class GlobalConstants(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(GlobalConstants, self).__init__(xmlRpc, objId)



    def AppendReferencedFile(self, filename):
        """
        Appends a global constants definition file at the end of the
        list of referenced global constants definition files.

        :param filename: Path to the global constants definition file. Absolute or relative
                         to the current workspace directory.
        :type filename: unicode
        
        """
        callResult = self._Call("AppendReferencedFile", filename)


    def ClearReferencedFiles(self):
        """
        Removes all referenced global constants definition files from the list.
        
        """
        callResult = self._Call("ClearReferencedFiles", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.GlobalConstants`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalConstants
        return classInstance(self._xmlRpc, objId)


    def GetGlobalConstantsDefinition(self):
        """
        Returns the container for defining global constants statically.

        :return: Container for global constants
        :rtype: :class:`.GlobalConstantsDefinition`
        
        """
        callResult = self._Call("GetGlobalConstantsDefinition", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalConstantsDefinition
        return classInstance(self._xmlRpc, objId)


    def GetReferencedFiles(self):
        """
        Returns a list of all referenced global constants definition files. The list is ordered by
        priority, i.e. global constants from files in the beginning of the list overwrite
        constants from later files.

        :return: List of all referenced global constants definition files (\*.gcd)
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetReferencedFiles", )

        if callResult is None:
            return None

        return callResult

    def GetStaticConstantsPriority(self):
        """
        Returns the priority of statically defined constants with regard to the constants
        from referenced files.

        :return: Priority value
        :rtype: int
        
        """
        callResult = self._Call("GetStaticConstantsPriority", )

        if callResult is None:
            return None

        return callResult

    def SetStaticConstantsPriority(self, priority):
        """
        Specifies the priority of the statically defined constants with regard to
        the constants from referenced files.

        :note: If the given value is out of the valid range, it will be coerced to the closest
               reasonable value.

        :param priority: Priority of the statically defined constants. Should be between

                         - 0: highest priority and
                         - length of referenced files list: lowest priority

        :type priority: int
        
        """
        callResult = self._Call("SetStaticConstantsPriority", priority)



class Platform(ObjectApiProxy):
    """

    """


    @property
    def FailureSimulation(self):
        """
        Failure Simulation access

        :return: Failure Simulation access
        :rtype: :class:`.FailureSimulationAccess`
        
        """
        return self.__FailureSimulation

    @property
    def FunctionAccess(self):
        """
        Function access

        :return: Function access
        :rtype: :class:`.FunctionAccess`
        
        """
        return self.__FunctionAccess

    @property
    def ModelAccess(self):
        """
        Model access

        :return: Model access
        :rtype: :class:`.ModelAccess`
        
        """
        return self.__ModelAccess

    def __init__(self, xmlRpc=None, objId=0):
        super(Platform, self).__init__(xmlRpc, objId)

        self.__FailureSimulation = FailureSimulationAccess(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "FailureSimulation"))
        self.__FunctionAccess = FunctionAccess(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "FunctionAccess"))
        self.__ModelAccess = ModelAccess(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ModelAccess"))


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Platform`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Platform
        return classInstance(self._xmlRpc, objId)



class FunctionAccess(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(FunctionAccess, self).__init__(xmlRpc, objId)



    def Add(self, functionKey, functionFile='', functionPort=''):
        """
        Adds a function to the function access.

        :param functionKey: Name of the function to add
        :type functionKey: unicode
        :param functionFile: Name of the function file
        :type functionFile: unicode
        :param functionPort: Name of the function port
        :type functionPort: unicode
        :return: The function which was added
        :rtype: :class:`.Function`
        
        """
        callResult = self._Call("Add", functionKey, functionFile, functionPort)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Function
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.FunctionAccess`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = FunctionAccess
        return classInstance(self._xmlRpc, objId)


    def Delete(self, functionKey):
        """
        Deletes a function.

        :param functionKey: Name of function to delete
        :type functionKey: unicode
        
        """
        callResult = self._Call("Delete", functionKey)


    def Get(self, functionKey):
        """
        Returns a function object.

        :param functionKey: Name of the function
        :type functionKey: unicode
        :return: The function object
        :rtype: :class:`.Function`
        
        """
        callResult = self._Call("Get", functionKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Function
        return classInstance(self._xmlRpc, objId)


    def GetAll(self):
        """
        Returns a list of the names of all the functions.

        :return: List of names of all functions
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAll", )

        if callResult is None:
            return None

        return callResult


class Function(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Function, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Function`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Function
        return classInstance(self._xmlRpc, objId)


    def GetFile(self):
        """
        Returns the function access file.

        :return: Function access file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFile", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the function access.

        :return: Name of the function
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPort(self):
        """
        Returns the function access port.

        :return: Function access port
        :rtype: unicode
        
        """
        callResult = self._Call("GetPort", )

        if callResult is None:
            return None

        return callResult

    def Rename(self, newFunctionKey):
        """
        Renames the function access.

        :param newFunctionKey: New name of the function
        :type newFunctionKey: unicode
        
        """
        callResult = self._Call("Rename", newFunctionKey)


    def SetFile(self, functionFile):
        """
        Sets the function access file.

        :param functionFile: Function access file to be set
        :type functionFile: unicode
        
        """
        callResult = self._Call("SetFile", functionFile)


    def SetPort(self, functionPort):
        """
        Sets the function access port.

        :param functionPort: Function access port to be set
        :type functionPort: unicode
        
        """
        callResult = self._Call("SetPort", functionPort)



class FailureSimulationAccess(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(FailureSimulationAccess, self).__init__(xmlRpc, objId)



    def Add(self, failureSimulationKey, failureSimulationFile='', failureSimulationPort=''):
        """
        Adds a failure simulation

        :param failureSimulationKey: Name of the failure simulation to add
        :type failureSimulationKey: unicode
        :param failureSimulationFile: Name of the failure simulation file
        :type failureSimulationFile: unicode
        :param failureSimulationPort: Name of the failure simulation port
        :type failureSimulationPort: unicode
        :return: The failure simulation which was added
        :rtype: :class:`.FailureSimulation`
        
        """
        callResult = self._Call("Add", failureSimulationKey, failureSimulationFile, failureSimulationPort)

        if callResult is None:
            return None


        objId = callResult
        classInstance = FailureSimulation
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.FailureSimulationAccess`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = FailureSimulationAccess
        return classInstance(self._xmlRpc, objId)


    def Delete(self, failureSimulationKey):
        """
        Deletes a failure simulation.

        :param failureSimulationKey: Name of failure simulation to delete
        :type failureSimulationKey: unicode
        
        """
        callResult = self._Call("Delete", failureSimulationKey)


    def Get(self, failureSimulationKey):
        """
        Returns the failure simulation object specified by the given key.

        :param failureSimulationKey: Name of the failure simulation
        :type failureSimulationKey: unicode
        :return: The failure simulation object
        :rtype: :class:`.FailureSimulation`
        
        """
        callResult = self._Call("Get", failureSimulationKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = FailureSimulation
        return classInstance(self._xmlRpc, objId)


    def GetAll(self):
        """
        Returns a list of the names of all the failure simulations.

        :return: List of names of all failure simulations
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAll", )

        if callResult is None:
            return None

        return callResult


class FailureSimulation(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(FailureSimulation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.FailureSimulation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = FailureSimulation
        return classInstance(self._xmlRpc, objId)


    def GetFile(self):
        """
        Returns the failure simulation file.

        :return: Failure simulation file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFile", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the failure simulation.

        :return: Name of the failure simulation
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPort(self):
        """
        Returns the failure simulation port.

        :return: Failure simulation port
        :rtype: unicode
        
        """
        callResult = self._Call("GetPort", )

        if callResult is None:
            return None

        return callResult

    def Rename(self, newFailureSimulationKey):
        """
        Renames this failure simulation

        :param newFailureSimulationKey: New name
        :type newFailureSimulationKey: unicode
        
        """
        callResult = self._Call("Rename", newFailureSimulationKey)


    def SetFile(self, failureSimulationFile):
        """
        Sets the failure simulation file.

        :param failureSimulationFile: Failure simulation file to be set
        :type failureSimulationFile: unicode
        
        """
        callResult = self._Call("SetFile", failureSimulationFile)


    def SetPort(self, failureSimulationPort):
        """
        Sets the failure simulation port.

        :param failureSimulationPort: Failure simulation port to be set
        :type failureSimulationPort: unicode
        
        """
        callResult = self._Call("SetPort", failureSimulationPort)



class ModelAccess(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ModelAccess, self).__init__(xmlRpc, objId)



    def Add(self, modelKey):
        """
        Adds a model

        :param modelKey: Name of the model to add
        :type modelKey: unicode
        :return: The model which was added
        :rtype: :class:`.Model`
        
        """
        callResult = self._Call("Add", modelKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Model
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ModelAccess`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ModelAccess
        return classInstance(self._xmlRpc, objId)


    def Delete(self, modelKey):
        """
        Deletes a model from model access.

        :param modelKey: Name of model to delete
        :type modelKey: unicode
        
        """
        callResult = self._Call("Delete", modelKey)


    def Get(self, modelKey):
        """
        Retrieves a model object.

        :param modelKey: Name of the model
        :type modelKey: unicode
        :return: The model object
        :rtype: :class:`.Model`
        
        """
        callResult = self._Call("Get", modelKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Model
        return classInstance(self._xmlRpc, objId)


    def GetAll(self):
        """
        Returns a list of the names of all the accessed models.

        :return: list of names of all accesses models
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAll", )

        if callResult is None:
            return None

        return callResult


class Model(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Model, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Model`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Model
        return classInstance(self._xmlRpc, objId)


    def GetAdditionalFiles(self):
        """
        Gets additional files configured for this model.

        :return: The list of additional files
        :rtype: list <string>
        
        """
        callResult = self._Call("GetAdditionalFiles", )

        if callResult is None:
            return None

        return callResult

    def GetFile(self):
        """
        Returns the model file.

        :return: Model file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFile", )

        if callResult is None:
            return None

        return callResult

    def GetImportSource(self):
        """
        Returns the model import source.

        :return: Model import source: 0 Automatically, 1 From Cache, 2 Disabled
        :rtype: int
        
        """
        callResult = self._Call("GetImportSource", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the model.

        :return: Name of the model
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPort(self):
        """
        Returns the model port.

        :return: Model port
        :rtype: unicode
        
        """
        callResult = self._Call("GetPort", )

        if callResult is None:
            return None

        return callResult

    def InsertAdditionalFile(self, filename, index=None):
        """
        Adds an entry on the given index into the additional files list.
        
        Some model tools allow e.g. \*.par or \*.smf files to be specified here.

        :param filename: The name of the file to be added
        :type filename: unicode
        :param index: The index the new entry should be placed at. If left out, the filename will
                      be appended at the end of the list.
        :type index: int
        
        """
        callResult = self._Call("InsertAdditionalFile", filename, index)


    def IsTimeBase(self):
        """
        Returns if the model time is used as time base.

        :return: True if the model time is used as reference time, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsTimeBase", )

        if callResult is None:
            return None

        return callResult

    def RemoveAdditionalFile(self, index):
        """
        Removes the entry on the given index from additional files list.

        :param index: The index to be removed.
        :type index: int
        
        """
        callResult = self._Call("RemoveAdditionalFile", index)


    def Rename(self, newModelKey):
        """
        Renames the model.

        :param newModelKey: New name of the model
        :type newModelKey: unicode
        
        """
        callResult = self._Call("Rename", newModelKey)


    def SetFile(self, modelFile):
        """
        Sets the model file.

        :param modelFile: Model file to be set
        :type modelFile: unicode
        
        """
        callResult = self._Call("SetFile", modelFile)


    def SetImportSource(self, importSource):
        """
        Sets the model import source.

        :param importSource: Model import source: 0 Automatically, 1 From Cache, 2 Disabled
        :type importSource: int
        
        """
        callResult = self._Call("SetImportSource", importSource)


    def SetPort(self, modelPort):
        """
        Sets the model port.

        :param modelPort: Model port to be set
        :type modelPort: unicode
        
        """
        callResult = self._Call("SetPort", modelPort)


    def SetTimeBase(self, value):
        """
        Decides whether the model time is used as time base.

        :param value: True if this model shall be used as reference time, else False
        :type value: boolean
        
        """
        callResult = self._Call("SetTimeBase", value)



class ControlUnits(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ControlUnits, self).__init__(xmlRpc, objId)



    def Add(self, controlUnitKey):
        """
        Adds a control unit.

        :param controlUnitKey: Name of the control unit
        :type controlUnitKey: unicode
        :return: The control unit which was added
        :rtype: :class:`.ControlUnit`
        
        """
        callResult = self._Call("Add", controlUnitKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ControlUnit
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ControlUnits`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ControlUnits
        return classInstance(self._xmlRpc, objId)


    def Delete(self, controlUnitKey):
        """
        Deletes a control unit.

        :param controlUnitKey: Name of control unit to delete
        :type controlUnitKey: unicode
        
        """
        callResult = self._Call("Delete", controlUnitKey)


    def Get(self, controlUnitKey):
        """
        Returns a control unit object.

        :param controlUnitKey: Name of the control unit
        :type controlUnitKey: unicode
        :return: The control unit object
        :rtype: :class:`.ControlUnit`
        
        """
        callResult = self._Call("Get", controlUnitKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ControlUnit
        return classInstance(self._xmlRpc, objId)


    def GetAll(self):
        """
        Returns a list of the names of all the accessed control units.

        :return: List of names of all accessed control units
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAll", )

        if callResult is None:
            return None

        return callResult


class ControlUnit(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ControlUnit, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ControlUnit`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ControlUnit
        return classInstance(self._xmlRpc, objId)


    def GetApplicationA2lFile(self):
        """
        Returns the application port \*.a2l file.

        :return: A2L file
        :rtype: unicode
        
        """
        callResult = self._Call("GetApplicationA2lFile", )

        if callResult is None:
            return None

        return callResult

    def GetApplicationHexFile(self):
        """
        Returns the application port hex file.

        :return: hex file
        :rtype: unicode
        
        """
        callResult = self._Call("GetApplicationHexFile", )

        if callResult is None:
            return None

        return callResult

    def GetApplicationPort(self):
        """
        Returns the application port.

        :return: Application port
        :rtype: unicode
        
        """
        callResult = self._Call("GetApplicationPort", )

        if callResult is None:
            return None

        return callResult

    def GetDebuggingElfFile(self):
        """
        Returns the debugger \*.elf file. Raises an error if a file list with more than
        one element is set. Use GetDebuggingElfFiles in this case.

        :return: Debugger \*.elf file
        :rtype: unicode
        :raise ApiError: If a file list with more than one element is set
        
        """
        callResult = self._Call("GetDebuggingElfFile", )

        if callResult is None:
            return None

        return callResult

    def GetDebuggingElfFiles(self):
        """
        Returns the debugger \*.elf files.

        :return: Identifier and path of configured debugger \*.elf files
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetDebuggingElfFiles", )

        if callResult is None:
            return None

        return callResult

    def GetDebuggingHexFile(self):
        """
        Returns the debugger hex file.

        :return: Debugger hex file
        :rtype: unicode
        
        """
        callResult = self._Call("GetDebuggingHexFile", )

        if callResult is None:
            return None

        return callResult

    def GetDebuggingPort(self):
        """
        Returns the debugger port.

        :return: Debugger port
        :rtype: unicode
        
        """
        callResult = self._Call("GetDebuggingPort", )

        if callResult is None:
            return None

        return callResult

    def GetDiagnosticsLogicalLink(self):
        """
        Returns the logical link file.

        :return: Logical link file
        :rtype: unicode
        
        """
        callResult = self._Call("GetDiagnosticsLogicalLink", )

        if callResult is None:
            return None

        return callResult

    def GetDiagnosticsPort(self):
        """
        Returns the EDIABAS diagnostics port.

        :return: Diagnostics port
        :rtype: unicode
        
        """
        callResult = self._Call("GetDiagnosticsPort", )

        if callResult is None:
            return None

        return callResult

    def GetDiagnosticsPortOdx(self):
        """
        Returns the diagnostics ODX port.

        :return: Diagnostics ODX port
        :rtype: unicode
        
        """
        callResult = self._Call("GetDiagnosticsPortOdx", )

        if callResult is None:
            return None

        return callResult

    def GetDiagnosticsSgbdFile(self):
        """
        Returns the SGBD file.

        :return: SGBD file
        :rtype: unicode
        
        """
        callResult = self._Call("GetDiagnosticsSgbdFile", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the control unit.

        :return: Name of the control unit
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def IsDebuggingUseHexFileFromApplication(self):
        """
        Returns the option if the hex file is used from the application.

        :return: Option to use hex file from application
        :rtype: boolean
        
        """
        callResult = self._Call("IsDebuggingUseHexFileFromApplication", )

        if callResult is None:
            return None

        return callResult

    def Rename(self, newControlUnitKey):
        """
        Renames the control unit.

        :param newControlUnitKey: New name of the control unit
        :type newControlUnitKey: unicode
        
        """
        callResult = self._Call("Rename", newControlUnitKey)


    def SetApplicationA2lFile(self, a2lFile):
        """
        Sets the application port \*.a2l file.

        :param a2lFile: A2L file to be set
        :type a2lFile: unicode
        
        """
        callResult = self._Call("SetApplicationA2lFile", a2lFile)


    def SetApplicationHexFile(self, hexFile):
        """
        Sets the application port hex file.

        :param hexFile: Hex file to be set
        :type hexFile: unicode
        
        """
        callResult = self._Call("SetApplicationHexFile", hexFile)


    def SetApplicationPort(self, applicationPort):
        """
        Sets the application port.

        :param applicationPort: Application port to be set
        :type applicationPort: unicode
        
        """
        callResult = self._Call("SetApplicationPort", applicationPort)


    def SetDebuggingElfFile(self, debuggerElfFile):
        """
        Sets the debugger \*.elf file. Overwrites an existing file or file list.
        The \*.elf file will be assigned to identifier "ELF-1"

        :param debuggerElfFile: Debugger \*.elf file to be set
        :type debuggerElfFile: unicode
        
        """
        callResult = self._Call("SetDebuggingElfFile", debuggerElfFile)


    def SetDebuggingElfFiles(self, debuggerElfFiles):
        """
        Sets the debugger \*.elf files. Overwrites an existing file or file list.

        :param debuggerElfFiles: Identifiers and pathes to debugger \*.elf files
        :type debuggerElfFiles: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetDebuggingElfFiles", debuggerElfFiles)


    def SetDebuggingHexFile(self, debuggerHexFile):
        """
        Sets the debugger hex file.

        :param debuggerHexFile: Debugger hex file to be set
        :type debuggerHexFile: unicode
        
        """
        callResult = self._Call("SetDebuggingHexFile", debuggerHexFile)


    def SetDebuggingPort(self, debuggerPort):
        """
        Sets the debugger port.

        :param debuggerPort: Debugger port to be set
        :type debuggerPort: unicode
        
        """
        callResult = self._Call("SetDebuggingPort", debuggerPort)


    def SetDebuggingUseHexFileFromApplication(self, value):
        """
        Sets the option to use the hex file from the application.

        :param value: Option to use hex file from application
        :type value: boolean
        
        """
        callResult = self._Call("SetDebuggingUseHexFileFromApplication", value)


    def SetDiagnosticsLogicalLink(self, logicalLinkFile):
        """
        Sets the logical link file.

        :param logicalLinkFile: Logical link file to be set
        :type logicalLinkFile: unicode
        
        """
        callResult = self._Call("SetDiagnosticsLogicalLink", logicalLinkFile)


    def SetDiagnosticsPort(self, diagnosticsPort):
        """
        Sets the EDIABAS diagnostics port.

        :param diagnosticsPort: Diagnostics port to be set
        :type diagnosticsPort: unicode
        
        """
        callResult = self._Call("SetDiagnosticsPort", diagnosticsPort)


    def SetDiagnosticsPortOdx(self, diagnosticsPortOdx):
        """
        Sets the diagnostics ODX port.

        :param diagnosticsPortOdx: Diagnostics ODX port to be set
        :type diagnosticsPortOdx: unicode
        
        """
        callResult = self._Call("SetDiagnosticsPortOdx", diagnosticsPortOdx)


    def SetDiagnosticsSgbdFile(self, sgbdFile):
        """
        Sets the SGBD file.

        :param sgbdFile: SGBD file to be set
        :type sgbdFile: unicode
        
        """
        callResult = self._Call("SetDiagnosticsSgbdFile", sgbdFile)



class MappingFiles(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(MappingFiles, self).__init__(xmlRpc, objId)



    def AddMappingFile(self, filename):
        """
        Adds a mapping file to the list

        :param filename: Name of the mapping file
        :type filename: unicode
        
        """
        callResult = self._Call("AddMappingFile", filename)


    def ClearMappingFiles(self):
        """
        Clears all entries from the mapping file list.
        
        """
        callResult = self._Call("ClearMappingFiles", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.MappingFiles`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMappingFiles(self):
        """
        Returns the mapping files.

        :return: A list of all mapping files
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetMappingFiles", )

        if callResult is None:
            return None

        return callResult

    def RemoveMappingFile(self, index):
        """
        Removes a mapping file from the list

        :param index: The index of the mapping file to remove
        :type index: int
        
        """
        callResult = self._Call("RemoveMappingFile", index)



class ReportData(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportData, self).__init__(xmlRpc, objId)



    def AddOutputFormat(self, formatName, displayedName, autoGenerate):
        """
        Adds an output format by name.

        :param formatName: Format handler (e.g. "HTML", "EXCEL", ...)
        :type formatName: unicode
        :param displayedName: Format name (e.g. "New HTML report")
        :type displayedName: unicode
        :param autoGenerate: If True, report will be generated automatically after package execution
        :type autoGenerate: bool
        
        """
        callResult = self._Call("AddOutputFormat", formatName, displayedName, autoGenerate)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportData`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportData
        return classInstance(self._xmlRpc, objId)


    def GetAvailableOutputFormats(self):
        """
        Returns a list of available output formats.

        :return: List of report format names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAvailableOutputFormats", )

        if callResult is None:
            return None

        return callResult

    def GetConfiguredOutputFormats(self, showActiveOnly=False):
        """
        Returns a list of configured output formats.

        :param showActiveOnly: If True only formats that will be automatically generated are shown.
        :type showActiveOnly: bool
        :return: List of report format names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetConfiguredOutputFormats", showActiveOnly)

        if callResult is None:
            return None

        return callResult

    def GetCopyLogFilesToReportFolder(self):
        """
        Gets the state of the option to copy log files to report folder.

        :return: State of the option.
        :rtype: bool
        
        """
        callResult = self._Call("GetCopyLogFilesToReportFolder", )

        if callResult is None:
            return None

        return callResult

    def GetDirectory(self):
        """
        Returns the report directory.

        :return: Report directory
        :rtype: unicode
        
        """
        callResult = self._Call("GetDirectory", )

        if callResult is None:
            return None

        return callResult

    def GetOutputFormatAutoGenerateState(self, formatName):
        """
        Gets the autogeneration state of an output format.

        :param formatName: Name of the output format (e.g. "New HTML format")
        :type formatName: unicode
        :return: True if autogeneration is enabled. False if not.
        :rtype: bool
        
        """
        callResult = self._Call("GetOutputFormatAutoGenerateState", formatName)

        if callResult is None:
            return None

        return callResult

    def GetUserDefinedData(self):
        """
        Returns user defined report informationen.

        :return: Dictionary of user defined key value pairs
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetUserDefinedData", )

        if callResult is None:
            return None

        return callResult

    def GetUserDefinedInfoScript(self):
        """
        Returns the script file for generating user defined report information.

        :return: Path to the \*.py file. Absolute or relative to workspace.
        :rtype: unicode
        
        """
        callResult = self._Call("GetUserDefinedInfoScript", )

        if callResult is None:
            return None

        return callResult

    def SetCopyLogFilesToReportFolder(self, state):
        """
        Enable or disable the option to copy log files to report folder.

        :param state: Enable or disable copy
        :type state: bool
        
        """
        callResult = self._Call("SetCopyLogFilesToReportFolder", state)


    def SetDirectory(self, reportDir):
        """
        Sets the report directory.

        :param reportDir: Report directory to be set
        :type reportDir: unicode
        
        """
        callResult = self._Call("SetDirectory", reportDir)


    def SetOutputFormatAutoGenerateState(self, formatName, autoGenerate=True):
        """
        Enable or disable generation of the report format after execution of the package.

        :param formatName: Displayed name of the report format (e.g. "New HTML report")
        :type formatName: unicode
        :param autoGenerate: Enable or disable generation after package-execution.
        :type autoGenerate: bool
        :return: True if auto-generation has been successfully set, false if not. This is NOT the
                 value autoGenerate was set to.
        :rtype: bool
        
        """
        callResult = self._Call("SetOutputFormatAutoGenerateState", formatName, autoGenerate)

        if callResult is None:
            return None

        return callResult

    def SetUserDefinedData(self, userDefinedData):
        """
        Sets user defined report informationen.

        :param userDefinedData: Dictionary of user defined key value pairs
        :type userDefinedData: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetUserDefinedData", userDefinedData)


    def SetUserDefinedInfoScript(self, filepath):
        """
        Sets the script file for generating user defined report information.

        :param filepath: Path to the \*.py file. Absolute or relative to the workspace.
        :type filepath: unicode
        
        """
        callResult = self._Call("SetUserDefinedInfoScript", filepath)



class BusAccess(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(BusAccess, self).__init__(xmlRpc, objId)



    def Add(self, busKey):
        """
        Adds a bus to the bus access.

        :param busKey: Name of the bus
        :type busKey: unicode
        :return: The bus which was added
        :rtype: :class:`.Bus`
        
        """
        callResult = self._Call("Add", busKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Bus
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.BusAccess`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusAccess
        return classInstance(self._xmlRpc, objId)


    def Delete(self, busKey):
        """
        Deletes a bus from bus access.

        :param busKey: Name of bus to delete
        :type busKey: unicode
        
        """
        callResult = self._Call("Delete", busKey)


    def Get(self, busKey):
        """
        Returns a bus object.

        :param busKey: Name of the bus
        :type busKey: unicode
        :return: The bus object
        :rtype: :class:`.Bus`
        
        """
        callResult = self._Call("Get", busKey)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Bus
        return classInstance(self._xmlRpc, objId)


    def GetAll(self):
        """
        Returns a list of the names of all the accessed buses.

        :return: List of names of all accessed buses
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAll", )

        if callResult is None:
            return None

        return callResult


class Bus(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Bus, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Bus`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Bus
        return classInstance(self._xmlRpc, objId)


    def GetAccessPort(self, accessType):
        """
        Returns the bus port dependent on accessType.

        :param accessType: 'AccessActiveNode',
                           'AccessManipulation',
                           'AccessMonitoring',
                           'ServiceApplicationLayer'
        :type accessType: unicode
        :return: Bus port
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessPort", accessType)

        if callResult is None:
            return None

        return callResult

    def GetChannel(self):
        """
        Returns the channel of the bus.

        :return: Channel of the bus
        :rtype: unicode
        
        """
        callResult = self._Call("GetChannel", )

        if callResult is None:
            return None

        return callResult

    def GetDatabaseFile(self):
        """
        Returns the bus database file.

        :return: The bus database file
        :rtype: unicode
        
        """
        callResult = self._Call("GetDatabaseFile", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the bus.

        :return: Name of the bus
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetProtocol(self):
        """
        Returns the protocol of the bus.

        :return: Protocol
        :rtype: unicode
        
        """
        callResult = self._Call("GetProtocol", )

        if callResult is None:
            return None

        return callResult

    def Rename(self, newBusKey):
        """
        Renames the bus.

        :param newBusKey: New name of the bus object
        :type newBusKey: unicode
        
        """
        callResult = self._Call("Rename", newBusKey)


    def SetAccessPort(self, accessType, accessPort):
        """
        Sets the bus port dependent on accessType.

        :param accessType: 'AccessActiveNode',
                           'AccessManipulation',
                           'AccessMonitoring',
                           'ServiceApplicationLayer'
        :type accessType: unicode
        :param accessPort: Port to be set
        :type accessPort: unicode
        
        """
        callResult = self._Call("SetAccessPort", accessType, accessPort)


    def SetChannel(self, channel):
        """
        Sets the channel of the bus.

        :param channel: Channel of the bus
        :type channel: unicode
        
        """
        callResult = self._Call("SetChannel", channel)


    def SetDatabaseFile(self, database):
        """
        Sets the bus database file.

        :param database: The bus database file
        :type database: unicode
        
        """
        callResult = self._Call("SetDatabaseFile", database)


    def SetProtocol(self, protocol):
        """
        Sets the protocol of the bus.

        :param protocol: Protocol to be set
        :type protocol: unicode
        
        """
        callResult = self._Call("SetProtocol", protocol)



class Execution(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Execution, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Execution`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Execution
        return classInstance(self._xmlRpc, objId)


    def DisableGlobalPostconditionPkg(self):
        """
        Disables the global postcondition package.
        
        """
        callResult = self._Call("DisableGlobalPostconditionPkg", )


    def DisableGlobalPreconditionPkg(self):
        """
        Disables the global precondition package.
        
        """
        callResult = self._Call("DisableGlobalPreconditionPkg", )


    def DisablePkgExecutionOnAbort(self):
        """
        Disables the execution of a package on abort (including user abort).
        
        """
        callResult = self._Call("DisablePkgExecutionOnAbort", )


    def EnableGlobalPostconditionPkg(self, packagePath):
        """
        Sets the package that shall be executed as postcondition for every executed package.

        :param packagePath: Path to postcondition-package.
        :type packagePath: unicode
        
        """
        callResult = self._Call("EnableGlobalPostconditionPkg", packagePath)


    def EnableGlobalPreconditionPkg(self, packagePath):
        """
        Sets the package that shall be executed as precondition for every executed package.

        :param packagePath: Path to precondition-package.
        :type packagePath: unicode
        
        """
        callResult = self._Call("EnableGlobalPreconditionPkg", packagePath)


    def EnablePkgExecutionOnAbort(self, pkg):
        """
        Sets the package that shall be executed on abort (including user abort).

        :param pkg: Path to package
        :type pkg: unicode
        
        """
        callResult = self._Call("EnablePkgExecutionOnAbort", pkg)


    def GetExecutionBehaviorOnError(self):
        """
        Gets the behavior if an error occurs during package execution.

        :return: "Continue" or "Abort"
        :rtype: unicode
        
        """
        callResult = self._Call("GetExecutionBehaviorOnError", )

        if callResult is None:
            return None

        return callResult

    def GetGlobalPostconditionPkg(self):
        """
        Gets the package that will be executed as postcondition for every executed package.

        :return: Path to postcondition-package.
        :rtype: unicode
        
        """
        callResult = self._Call("GetGlobalPostconditionPkg", )

        if callResult is None:
            return None

        return callResult

    def GetGlobalPreconditionPkg(self):
        """
        Gets the package that will be executed as precondition for every executed package.

        :return: Path to precondition-package.
        :rtype: unicode
        
        """
        callResult = self._Call("GetGlobalPreconditionPkg", )

        if callResult is None:
            return None

        return callResult

    def GetGlobalRetry(self):
        """
        Returns the state of the global retry.

        :return: Whether or not the global retry is activated
        :rtype: boolean
        
        """
        callResult = self._Call("GetGlobalRetry", )

        if callResult is None:
            return None

        return callResult

    def GetGlobalRetryCondition(self):
        """
        Returns the condition of the global retries. Returns one of the following:

        -'ERROR'
        -'FAILED'
        -'ERROR/FAILED'

        :return: The condition of the global retry
        :rtype: unicode
        
        """
        callResult = self._Call("GetGlobalRetryCondition", )

        if callResult is None:
            return None

        return callResult

    def GetGlobalRetryCount(self):
        """
        Returns the number of the global retries.

        :return: Number of the global retries
        :rtype: integer
        
        """
        callResult = self._Call("GetGlobalRetryCount", )

        if callResult is None:
            return None

        return callResult

    def GetPkgExecutedOnAbort(self):
        """
        Gets the package that will be executed on abort.

        :return: Path to package.
        :rtype: unicode
        
        """
        callResult = self._Call("GetPkgExecutedOnAbort", )

        if callResult is None:
            return None

        return callResult

    def GetRestoreAfterUserConfirmation(self):
        """
        Gets the state of restoring test quantities after user confirmation.

        :return: State of restoring test quantities after user confirmation.
        :rtype: bool
        
        """
        callResult = self._Call("GetRestoreAfterUserConfirmation", )

        if callResult is None:
            return None

        return callResult

    def GetRestoreTestQuantities(self):
        """
        Gets the status of restoring test quantities after test execution.

        :return: State of restoring test quantities.
        :rtype: bool
        
        """
        callResult = self._Call("GetRestoreTestQuantities", )

        if callResult is None:
            return None

        return callResult

    def GetWaitTimeAfterIOTeststep(self):
        """
        Gets the wait time after every every I/O test step in ms.

        :return: Wait time in ms
        :rtype: float
        
        """
        callResult = self._Call("GetWaitTimeAfterIOTeststep", )

        if callResult is None:
            return None

        return callResult

    def SetExecutionBehaviorOnError(self, errorHandling):
        """
        Sets the behavior if an error occurs during package execution.

        :param errorHandling: "Continue" or "Abort"
        :type errorHandling: unicode
        
        """
        callResult = self._Call("SetExecutionBehaviorOnError", errorHandling)


    def SetGlobalRetry(self, globalRetry):
        """
        Sets the state of the global retry.

        :param globalRetry: Whether or not the global retry is activated
        :type globalRetry: boolean
        
        """
        callResult = self._Call("SetGlobalRetry", globalRetry)


    def SetGlobalRetryCondition(self, condition):
        """
        Sets the condition of the global retry. Must be one of the following:

        -'ERROR'
        -'FAILED'
        -'ERROR/FAILED'

        :param condition: The condition of the global retry
        :type condition: unicode
        
        """
        callResult = self._Call("SetGlobalRetryCondition", condition)


    def SetGlobalRetryCount(self, count):
        """
        Sets the number of the global retries.

        :param count: Number of the global retries
        :type count: integer
        
        """
        callResult = self._Call("SetGlobalRetryCount", count)


    def SetRestoreAfterUserConfirmation(self, confirmationState):
        """
        Enable or disable the option to restore test quantities only after user confirmation. The
        state of "RestoreTestQuantities" will be set to "True" automatically if this option is
        enabled.

        :param confirmationState: State of restoring test quantities after user confirmation.
        :type confirmationState: bool
        
        """
        callResult = self._Call("SetRestoreAfterUserConfirmation", confirmationState)


    def SetRestoreTestQuantities(self, restoreState):
        """
        Enable or disable restoring of test quantities after test execution.

        :param restoreState: True to enable and False to disable restoring.
        :type restoreState: bool
        
        """
        callResult = self._Call("SetRestoreTestQuantities", restoreState)


    def SetWaitTimeAfterIOTeststep(self, waitTime):
        """
        Sets the wait time after every I/O test step.

        :param waitTime: Wait time in ms
        :type waitTime: float
        
        """
        callResult = self._Call("SetWaitTimeAfterIOTeststep", waitTime)



class GlobalMappingApi(ObjectApiProxy):
    """

    API to access global mapping files
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(GlobalMappingApi, self).__init__(xmlRpc, objId)



    def CreateMapping(self):
        """
        Creates an empty Mapping.

        :return: An empty mapping
        :rtype: :class:`.GlobalMapping`
        
        """
        callResult = self._Call("CreateMapping", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalMapping
        return classInstance(self._xmlRpc, objId)


    def OpenMapping(self, filename):
        """
        Opens an existing global mapping.
        Raises an ApiError if the referenced file does not exist.

        :param filename: Mapping file path. Can be absolute or relative to the parameters-directory.
        :type filename: unicode
        :return: Opened mapping.
        :rtype: :class:`.GlobalMapping`

        
        """
        callResult = self._Call("OpenMapping", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalMapping
        return classInstance(self._xmlRpc, objId)



class Mapping(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Mapping, self).__init__(xmlRpc, objId)



    def AddItem(self, mappingItem):
        """
        Adds a mapping item to the mapping.

        :param mappingItem: The mapping item to be added
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("AddItem", mappingItem)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Mapping`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetItemByName(self, name):
        """
        Searches the mapping for the mapping item by its name and returns it if existing.

        :param name: The name of the mapping item to be searched for
        :type name: unicode
        :return: mapping item with the given name or None if no such mapping item exists
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("GetItemByName", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetItems(self):
        """
        Returns a list of all the mapping items of the mapping.

        :return: List of all the mapping items of the mapping.
        :rtype: list <:class:`.MappingItem`>
        
        """
        callResult = self._Call("GetItems", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def HasItem(self, mappingItem):
        """
        Checks whether the given mapping item belongs to the mapping.

        :param mappingItem: The mapping item to be checked
        :type mappingItem: :class:`.MappingItem`
        :return: True if the given mapping item belongs to the mapping.
        :rtype: boolean
        
        """
        callResult = self._Call("HasItem", mappingItem)

        if callResult is None:
            return None

        return callResult

    def RemoveItemByName(self, name):
        """
        Removes a mapping item from the mapping.

        :param name: The name of the mapping item to be removed
        :type name: unicode
        
        """
        callResult = self._Call("RemoveItemByName", name)


    def ReplaceItem(self, mappingItem):
        """
        Replaces a mapping item from the mapping

        :param mappingItem: The new mapping item to replace an existing one of the same name
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("ReplaceItem", mappingItem)



class MappingApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(MappingApi, self).__init__(xmlRpc, objId)



    def CreateBusMonitoringMappingItem(self, systemIdentifier, nodeName, frameName, referenceName=None, checkTarget=True):
        """
        Creates a bus monitoring mapping item of the desired variable type.

        :param systemIdentifier: Name of Bus system according to the test configuration
        :type systemIdentifier: unicode
        :param nodeName: Name of sending ECU
        :type nodeName: unicode
        :param frameName: Name of the frame containing the signal
        :type frameName: unicode
        :param referenceName: Name of the mapping item (optional)
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked (optional)
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.BusMonitoringMappingItem`
        
        """
        callResult = self._Call("CreateBusMonitoringMappingItem", systemIdentifier, nodeName, frameName, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusMonitoringMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateBusSignalGroupMappingItem(self, systemIdentifier, nodeName='', frameName='', pduName='', referenceName=None, checkTarget=True):
        """
        Creates a bus signal group mapping item of the desired variable type.

        :param systemIdentifier: Name of Bus system according to the test configuration
        :type systemIdentifier: unicode
        :param nodeName: Name of sending ECU (optional)
        :type nodeName: unicode
        :param frameName: Name of the frame containing the signal (optional)
        :type frameName: unicode
        :param pduName: Name of the PDU containing the signal (optional)
        :type pduName: unicode
        :param referenceName: Name of the mapping item (optional)
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked (optional)
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.BusSignalGroupMappingItem`
        
        """
        callResult = self._Call("CreateBusSignalGroupMappingItem", systemIdentifier, nodeName, frameName, pduName, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusSignalGroupMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateBusSignalMappingItem(self, systemIdentifier, nodeName, messageName, signalName, referenceName=None, checkTarget=True):
        """
        Creates a bus signal mapping item of the desired variable type.

        :param systemIdentifier: Name of Bus system according to the test configuration
        :type systemIdentifier: unicode
        :param nodeName: Name of sending ECU
        :type nodeName: unicode
        :param messageName: Name of the message containing the signal
        :type messageName: unicode
        :param signalName: Name of the signal
        :type signalName: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.BusSignalMappingItem`
        
.. deprecated:: 7.0.0
      Use :meth:`.CreateBusSignalWithPduMappingItem` instead.
        """
        callResult = self._Call("CreateBusSignalMappingItem", systemIdentifier, nodeName, messageName, signalName, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusSignalMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateBusSignalWithPduMappingItem(self, systemIdentifier, signalName, nodeName='', frameName='', pduName='', referenceName=None, checkTarget=True):
        """
        Creates a bus signal mapping item of the desired variable type.

        :param systemIdentifier: Name of Bus system according to the test configuration
        :type systemIdentifier: unicode
        :param signalName: Name of the signal
        :type signalName: unicode
        :param nodeName: Name of sending ECU (optional)
        :type nodeName: unicode
        :param frameName: Name of the frame containing the signal (optional)
        :type frameName: unicode
        :param pduName: Name of the PDU containing the signal (optional)
        :type pduName: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.BusSignalMappingItem`
        
        """
        callResult = self._Call("CreateBusSignalWithPduMappingItem", systemIdentifier, signalName, nodeName, frameName, pduName, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusSignalMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateCalibrationMappingItem(self, systemIdentifier, targetPath, variableType=None, referenceName=None, xElement=None, yElement=None, checkTarget=True):
        """
        Creates a calibration mapping item of the desired variable type.

        :param systemIdentifier: Name of ECU according to the test configuration
        :type systemIdentifier: unicode
        :param targetPath: Name of calibration variable to be accessed
        :type targetPath: unicode
        :param variableType: Type of variable to be mapped (VALUE, VECTOR, MATRIX, CURVE, MAP,
                                                                    VECTOR-ELEMENT, MATRIX-ELEMENT)
        :type variableType: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :param xElement: Index on x axis if single element of VECTOR or MATRIX should be accessed
        :type xElement: integer
        :param yElement: Index on y axis if single item of MATRIX should be accessed
        :type yElement: integer
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.CalibrationMappingItem`
        
        """
        callResult = self._Call("CreateCalibrationMappingItem", systemIdentifier, targetPath, variableType, referenceName, xElement, yElement, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = CalibrationMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateContextMappingItem(self, contextType, systemIdentifier, targetPath, variableType=None, isSignal=False, referenceName=None, checkTarget=True):
        """
        **for internal use only**

        Creates a mapping item of the desired variable type that points to a target in the 
        specified context.

        Valid context type values:
         * SCENARIO

        :param contextType: The context type (for valid values, see description above)
        :type contextType: unicode
        :param systemIdentifier: Name of system according to the test configuration
        :type systemIdentifier: unicode
        :param targetPath: Path to the target to be accessed
        :type targetPath: unicode
        :param variableType: Type of variable to be mapped (VALUE, VECTOR, MATRIX)
        :type variableType: unicode
        :param isSignal: Creates a mapping item for a signal instead of a parameter
        :type isSignal: boolean
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The created mapping item
        :rtype: :class:`.ModelMappingItem`
        
        """
        callResult = self._Call("CreateContextMappingItem", contextType, systemIdentifier, targetPath, variableType, isSignal, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ModelMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateEdiabasVariableMappingItem(self, ecuKey, job, referenceName=None, checkTarget=True):
        """
        Creates a ediabas variable mapping item.

        :param ecuKey: Name of the ECU
        :type ecuKey: unicode
        :param job: Name of the job
        :type job: unicode
        :param referenceName: Name of the mapping item (optional)
        :type referenceName: unicode
        :param checkTarget: Selects if the target path and the job should be checked (optional)
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.EdiabasVariableMappingItem`
        
        """
        callResult = self._Call("CreateEdiabasVariableMappingItem", ecuKey, job, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = EdiabasVariableMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateEesPinVariableMappingItem(self, sutkey, name, referenceName=None, checkTarget=True):
        """
        Creates a ees pin variable mapping item.

        :param sutkey: SUT key
        :type sutkey: unicode
        :param name: Name of the signal
        :type name: unicode
        :param referenceName: Name of the mapping item (optional)
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked (optional)
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.EesPinVariableMappingItem`
        
        """
        callResult = self._Call("CreateEesPinVariableMappingItem", sutkey, name, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = EesPinVariableMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateGenericMappingItem(self, variableType=None, referenceName=None):
        """
        Creates a generic mapping item of the desired variable type.

        :param variableType: Type of variable to be mapped (VALUE, VECTOR, CURVE, MATRIX, MAP)
        :type variableType: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :return: The just created mapping item
        :rtype: :class:`.GenericMappingItem`

        
        """
        callResult = self._Call("CreateGenericMappingItem", variableType, referenceName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateGenericVariableMappingItem(self, variableType=None, referenceName=None):
        """
        Creates a generic mapping item of the desired variable type.

        :param variableType: Type of variable to be mapped (VALUE, VECTOR, CURVE, MATRIX, MAP)
        :type variableType: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :return: The just created mapping item
        :rtype: :class:`.GenericMappingItem`

        
.. deprecated:: 6.4.1
      Instead, use :meth:`.CreateGenericMappingItem`
        """
        callResult = self._Call("CreateGenericVariableMappingItem", variableType, referenceName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateJobMappingItem(self, toolId, jobName, portId=None, checkTarget=True):
        """
        Creates a tool job or port job mapping item.

        :param toolId: Name of the used tool
        :type toolId: unicode
        :param jobName: Name of the job
        :type jobName: unicode
        :param portId: Name of the port
        :type portId: unicode
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("CreateJobMappingItem", toolId, jobName, portId, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def CreateMappingItem(self, systemIdentifier, targetPath, referenceName=None):
        """
        Creates a mapping item with automatically determined type.

        :param systemIdentifier: Name of system according to the test configuration
        :type systemIdentifier: unicode
        :param targetPath: Name of bus, model, calibration or measure variable to be accessed
            (Needs indices if datatype is VECTOR-ELEMENT label[idx_X]
            or if datatype is MATRIX-ELEMENT label[idx_X][idx_Y])

            Bus Signals need a target path of the following form:
            "<nodeName>/<frameName>/<pduName>/<signalName>"
            Note: <nodeName>, <frameName> and <pduName> are optional, that means ///<signalName>
            is also valid.
        :type targetPath: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :return: The just created mapping item
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("CreateMappingItem", systemIdentifier, targetPath, referenceName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def CreateMeasurementMappingItem(self, systemIdentifier, targetPath, variableType=None, referenceName=None, xElement=None, yElement=None, zElement=None, checkTarget=True):
        """
        Creates a measurement mapping item of the desired variable type.

        :param systemIdentifier: Name of ECU according to the test configuration
        :type systemIdentifier: unicode
        :param targetPath: Name of measurement variable to be accessed
        :type targetPath: unicode
        :param variableType: Type of variable to be mapped (VALUE, VECTOR, MATRIX,
                                                                    VECTOR-ELEMENT, MATRIX-ELEMENT)
        :type variableType: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :param xElement: Index on x axis if single element of VECTOR or MATRIX should be accessed
        :type xElement: integer
        :param yElement: Index on y axis if single element of MATRIX should be accessed
        :type yElement: integer
        :param zElement: Index on z axis if single element of MATRIX should be accessed
        :type zElement: integer
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.MeasureMappingItem`
        
        """
        callResult = self._Call("CreateMeasurementMappingItem", systemIdentifier, targetPath, variableType, referenceName, xElement, yElement, zElement, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = MeasureMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateModelMappingItem(self, systemIdentifier, targetPath, variableType=None, isSignal=False, referenceName=None, checkTarget=True):
        """
        Creates a mapping item of the desired variable type pointing at a certain model variable.

        :param systemIdentifier: Name of system according to the test configuration
        :type systemIdentifier: unicode
        :param targetPath: Path to the model variable to be accessed
        :type targetPath: unicode
        :param variableType: Type of variable to be mapped (VALUE, VECTOR, MATRIX)
        :type variableType: unicode
        :param isSignal: Selects if the mapping item should point to a model signal instead of variable
        :type isSignal: boolean
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.ModelMappingItem`
        
        """
        callResult = self._Call("CreateModelMappingItem", systemIdentifier, targetPath, variableType, isSignal, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ModelMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateModelVariableMappingItem(self, systemIdentifier, targetPath, variableType=None, referenceName=None):
        """
        Creates a mapping item of the desired variable type pointing at a certain model variable.

        :param systemIdentifier: Name of system according to the test configuration
        :type systemIdentifier: unicode
        :param targetPath: Path to the model variable to be accessed
        :type targetPath: unicode
        :param variableType: Type of variable to be mapped (VALUE, VECTOR, MATRIX)
        :type variableType: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :return: The just created mapping item
        :rtype: :class:`.ModelMappingItem`
        
.. deprecated:: 6.4.1
      Instead, use :meth:`.CreateModelMappingItem` with parameter `isSignal` set to ``False``
        """
        callResult = self._Call("CreateModelVariableMappingItem", systemIdentifier, targetPath, variableType, referenceName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ModelMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateServiceEventLeafMappingItem(self, sutkey, ecuName, serviceName, eventName, variablePath, eventgroupName='', fieldName='', referenceName=None, checkTarget=True):
        """
        Creates a service event leaf mapping item.

        :param sutkey: SUT key
        :type sutkey: unicode
        :param ecuName: Name of the ECU that provides the service
        :type ecuName: unicode
        :param serviceName: Name of the service that provides the event
        :type serviceName: unicode
        :param eventName: Name of the event
        :type eventName: unicode
        :param variablePath: Path to the return leaf node
        :type variablePath: unicode
        :param eventgroupName: Name of the event group that contains the event (optional)
        :type eventgroupName: unicode
        :param fieldName: Name of the field to which the event belongs (optional)
        :type fieldName: unicode
        :param referenceName: Name of the mapping item (optional)
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked (optional)
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.ServiceEventLeafMappingItem`
        
        """
        callResult = self._Call("CreateServiceEventLeafMappingItem", sutkey, ecuName, serviceName, eventName, variablePath, eventgroupName, fieldName, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ServiceEventLeafMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateServiceMethodReturnMappingItem(self, sutkey, ecuName, serviceName, methodName, variablePath, eventgroupName='', fieldName='', referenceName=None, checkTarget=True):
        """
        Creates a service method return mapping item.

        :param sutkey: SUT key
        :type sutkey: unicode
        :param ecuName: Name of the ECU that provides the service
        :type ecuName: unicode
        :param serviceName: Name of the service that provides the method
        :type serviceName: unicode
        :param methodName: Name of the method
        :type methodName: unicode
        :param variablePath: Path to the return leaf node
        :type variablePath: unicode
        :param eventgroupName: Name of the event group that contains the method (optional)
        :type eventgroupName: unicode
        :param fieldName: Name of the field to which the method belongs (optional)
        :type fieldName: unicode
        :param referenceName: Name of the mapping item (optional)
        :type referenceName: unicode
        :param checkTarget: Selects if target path should be checked (optional)
        :type checkTarget: boolean
        :return: The just created mapping item
        :rtype: :class:`.ServiceMethodReturnMappingItem`
        
        """
        callResult = self._Call("CreateServiceMethodReturnMappingItem", sutkey, ecuName, serviceName, methodName, variablePath, eventgroupName, fieldName, referenceName, checkTarget)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ServiceMethodReturnMappingItem
        return classInstance(self._xmlRpc, objId)


    def CreateTraceFileMappingItem(self, targetPath, referenceName=None):
        """
        Creates a trace file mapping item pointing at a certain trace file signal.

        :param targetPath: Path to the trace file signal to be accessed
        :type targetPath: unicode
        :param referenceName: Name of the mapping item
        :type referenceName: unicode
        :return: The just created mapping item
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("CreateTraceFileMappingItem", targetPath, referenceName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)



class MappingItem(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(MappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class ProjectApi(ObjectApiProxy):
    """

    API to access projects
    
    """


    @property
    def ComponentApi(self):
        """
        Returns the ComponentApi namespace.

        :return: ComponentApi namespace
        :rtype: :class:`.ComponentApi`
        
        """
        return self.__ComponentApi

    def __init__(self, xmlRpc=None, objId=0):
        super(ProjectApi, self).__init__(xmlRpc, objId)

        self.__ComponentApi = ComponentApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ComponentApi"))


    def CreateProject(self):
        """
        Creates a new project.

        :return: New empty project
        :rtype: :class:`.Project`
        
        """
        callResult = self._Call("CreateProject", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Project
        return classInstance(self._xmlRpc, objId)


    def OpenProject(self, filename, execInCurrentPkgDir=False, filterExpression=''):
        """
        Opens an existing project. The project may not be opened in ECU-TEST.

        :param filename: Absolute path to the project file or relative path in regard to the
                         package directory
        :type filename: unicode
        :param execInCurrentPkgDir: Whether to treat relative references in the project like the
                                    project file "belongs" in the root of the current workspace's
                                    package folder instead of its actual location.
        :type execInCurrentPkgDir: boolean
        :param filterExpression: A valid project filter expression
        :type filterExpression: unicode
        :return: Existing project
        :rtype: :class:`.Project`
        
        """
        callResult = self._Call("OpenProject", filename, execInCurrentPkgDir, filterExpression)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Project
        return classInstance(self._xmlRpc, objId)



class ComponentApi(ObjectApiProxy):
    """

    API to access projects
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ComponentApi, self).__init__(xmlRpc, objId)



    def CreateConfigChange(self, name, tcfFile, tbcFile):
        """
        Returns the created config change.

        :param name: Name of the confiog change
        :type name: unicode
        :param tcfFile: Path of the tcf file
        :type tcfFile: unicode
        :param tbcFile: Path to the tbc file
        :type tbcFile: unicode
        :return: Config change
        :rtype: :class:`.ConfigChange`
        
        """
        callResult = self._Call("CreateConfigChange", name, tcfFile, tbcFile)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ConfigChange
        return classInstance(self._xmlRpc, objId)


    def CreateFolder(self, name):
        """
        Returns the created folder.

        :param name: Name of the folder
        :type name: unicode
        :return: Project Folder
        :rtype: :class:`.ProjectFolder`
        
        """
        callResult = self._Call("CreateFolder", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def CreatePackageCall(self, name, packagePath):
        """
        Returns the created package call.

        :param name: Name of the package call
        :type name: unicode
        :param packagePath: Path to the package to be called
        :type packagePath: unicode
        :return: Package call
        :rtype: :class:`.PackageCall`
        
        """
        callResult = self._Call("CreatePackageCall", name, packagePath)

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageCall
        return classInstance(self._xmlRpc, objId)


    def CreatePackageGenerator(self, name, generatorId):
        """
        Returns the created package generator.

        :param name: Name of the generator
        :type name: unicode
        :param generatorId: Unique identifier of the generator to be created
        :type generatorId: unicode
        :return: Package generator
        :rtype: :class:`.PackageGenerator`
        
        """
        callResult = self._Call("CreatePackageGenerator", name, generatorId)

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageGenerator
        return classInstance(self._xmlRpc, objId)


    def CreateProjectCall(self, name, projectPath):
        """
        Returns the created project call.

        :param name: Name of the project call
        :type name: unicode
        :param projectPath: Path to the project to be called
        :type projectPath: unicode
        :return: Project call
        :rtype: :class:`.ProjectCall`
        
        """
        callResult = self._Call("CreateProjectCall", name, projectPath)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ProjectCall
        return classInstance(self._xmlRpc, objId)


    def CreateProjectGenerator(self, name, generatorId):
        """
        Returns the created project generator.

        :param name: Name of the generator
        :type name: unicode
        :param generatorId: Unique identifier of the generator to be created
        :type generatorId: unicode
        :return: Project generator
        :rtype: :class:`.ProjectGenerator`
        
        """
        callResult = self._Call("CreateProjectGenerator", name, generatorId)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ProjectGenerator
        return classInstance(self._xmlRpc, objId)



class ProjectComponent(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ProjectComponent, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class PackageParameters(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PackageParameters, self).__init__(xmlRpc, objId)



    def AppendReferencedFile(self, filename):
        """
        Appends a package parameters definition file at the end of the
        list of referenced package parameters definition files.

        :param filename: Path to the package parameters definition file. Absolute or relative
                         to the current workspace directory.
        :type filename: unicode
        
        """
        callResult = self._Call("AppendReferencedFile", filename)


    def ClearReferencedFiles(self):
        """
        Removes all referenced package parameters definition files from the list.
        
        """
        callResult = self._Call("ClearReferencedFiles", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PackageParameters`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageParameters
        return classInstance(self._xmlRpc, objId)


    def GetPackageParametersDefinition(self):
        """
        Returns the container for defining package parameters statically.

        :return: Container for package parameters
        :rtype: :class:`.PackageParametersDefinition`
        
        """
        callResult = self._Call("GetPackageParametersDefinition", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageParametersDefinition
        return classInstance(self._xmlRpc, objId)


    def GetReferencedFiles(self):
        """
        Returns a list of all referenced package parameters definition files. The list is ordered by
        priority, i.e. package parameters from files in the beginning of the list overwrite
        parameters from later files.

        :return: List of all referenced package parameters definition files (\*.ppd)
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetReferencedFiles", )

        if callResult is None:
            return None

        return callResult

    def GetStaticParametersPriority(self):
        """
        Returns the priority of statically defined parameters with regard to the parameters
        from referenced files.

        :return: Priority value
        :rtype: int
        
        """
        callResult = self._Call("GetStaticParametersPriority", )

        if callResult is None:
            return None

        return callResult

    def SetStaticParametersPriority(self, priority):
        """
        Specifies the priority of the statically defined parameters with regard to
        the parameters from referenced files.

        :note: If the given value is out of the valid range, it will be coerced to the closest
               reasonable value.

        :param priority: Priority of the statically defined parameters. Should be between

                         - 0: highest priority and
                         - length of referenced files list: lowest priority

        :type priority: int
        
        """
        callResult = self._Call("SetStaticParametersPriority", priority)



class ParameterSetMapping(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ParameterSetMapping, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ParameterSetMapping`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ParameterSetMapping
        return classInstance(self._xmlRpc, objId)


    def CreateAlternativeMapping(self):
        """
        Creates an empty mapping within the parameter set. If the parameter set already 
        has an alternative mapping, it will be replaced.
        
        :return: The mapping
        :rtype: :class:`.Mapping`
        
        """
        callResult = self._Call("CreateAlternativeMapping", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAlternativeMapping(self):
        """
        Returns the alternative mapping of the parameter set or None if no 
        the parameter set does not have an alternative mapping.
        
        :return: The mapping
        :rtype: :class:`.Mapping`
        
        """
        callResult = self._Call("GetAlternativeMapping", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMappingFromPackage(self):
        """
        Returns the mapping of the package.
        
        :return: Mapping to be set
        :rtype: :class:`.Mapping`
        
        """
        callResult = self._Call("GetMappingFromPackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def HasAlternativeMapping(self):
        """
        Checks whether the parameter set has an alternative mapping.
        
        :return: True if the parameter set has an alternative mapping.
        :rtype: boolean
        
        """
        callResult = self._Call("HasAlternativeMapping", )

        if callResult is None:
            return None

        return callResult

    def RemoveAlternativeMapping(self):
        """
        Removes the alternative mapping from the parameter set.
        
        
        """
        callResult = self._Call("RemoveAlternativeMapping", )


    def SetAlternativeMapping(self, mapping):
        """
        Sets the alternative mapping of the parameter set.
        
        :param mapping: Mapping to be set
        :type mapping: :class:`.Mapping`
        
        """
        callResult = self._Call("SetAlternativeMapping", mapping)



class ParameterSetRecordings(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ParameterSetRecordings, self).__init__(xmlRpc, objId)



    def AddRecordingInfos(self, recordingGroupName, recordingInfos):
        """
        Adds a recording info item to a specified recording group in the parameter set.

        :param recordingGroupName: Name of the recording group to add the recording item
        :type recordingGroupName: unicode
        :param recordingInfos: The recording items to be added
        :type recordingInfos: list <:class:`.RecordingInfo`>
        
        """
        callResult = self._Call("AddRecordingInfos", recordingGroupName, recordingInfos)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ParameterSetRecordings`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ParameterSetRecordings
        return classInstance(self._xmlRpc, objId)


    def GetRecordingInfos(self, recordingGroupName=None):
        """
        Returns recording information of the parameter set.
        If a recording group name is given returns only those items of the group

        :param recordingGroupName: Name of the recording group to return the info items of
        :type recordingGroupName: unicode
        :return: recording info items
        :rtype: list <:class:`.RecordingInfo`>
        
        """
        callResult = self._Call("GetRecordingInfos", recordingGroupName)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RecordingInfo
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList



class RecordingInfo(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(RecordingInfo, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.RecordingInfo`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = RecordingInfo
        return classInstance(self._xmlRpc, objId)


    def DeleteFormatDetails(self):
        """
        Deletes the format details of the existing recording.
        
        """
        callResult = self._Call("DeleteFormatDetails", )


    def GetFormatDetailsString(self):
        """
        Returns the recording type specific format details as unicode string.

        :return: The format details as unicode string, None if there aren't any format details
        :rtype: unicode
        
        """
        callResult = self._Call("GetFormatDetailsString", )

        if callResult is None:
            return None

        return callResult

    def GetPath(self):
        """
        Returns the path (or the first path if there is a list of paths) for the recording.

        :return: The path
        :rtype: unicode
        
        """
        callResult = self._Call("GetPath", )

        if callResult is None:
            return None

        return callResult

    def GetPathList(self):
        """
        Returns the list of paths of the recording as a sequence of
        multiple files.

        :return: The list of paths
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetPathList", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingName(self):
        """
        Returns the name of the recording.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetRecordingName", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingNumber(self):
        """
        Returns the recording number.

        :return: The recording number
        :rtype: int
        
        """
        callResult = self._Call("GetRecordingNumber", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingType(self):
        """
        Returns the recording type as string.

        :return: The recording type, e.g. 'CSV', 'MDF_VECTOR'
        :rtype: unicode
        
        """
        callResult = self._Call("GetRecordingType", )

        if callResult is None:
            return None

        return callResult

    def GetStartTime(self):
        """
        Returns the first time stamp to be read in from the recording.

        :raise ApiError: Underlying data value can not be returned as float. 
        :return: First time stamp to be read in from the recording
        :rtype: float
        
        """
        callResult = self._Call("GetStartTime", )

        if callResult is None:
            return None

        return callResult

    def GetStopTime(self):
        """
        Returns the last time stamp to be read in from the recording.

        :raise ApiError: Underlying data value can not be returned as float. 
        :return: Last time stamp to be read in from the recording
        :rtype: float
        
        """
        callResult = self._Call("GetStopTime", )

        if callResult is None:
            return None

        return callResult

    def SetFormatDetailsString(self, formatDetails):
        """
        Sets the format details of the existing recording.
        If the file of this recording info exists, it will be checked whether the format details string
        is supported.

        :param formatDetails: Format details of the recording.
        :type formatDetails: unicode
        
        """
        callResult = self._Call("SetFormatDetailsString", formatDetails)



class Package(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Package, self).__init__(xmlRpc, objId)



    def AddVariable(self, variable):
        """
        Adds a variable to the package.

        :param variable: Variable to be added
        :type variable: :class:`.Variable`
        
        """
        callResult = self._Call("AddVariable", variable)


    def AppendSignalGroup(self, signalGroup, defaultRecordingGroup=None, allowNewName=False):
        """
        Adds a signal group to the package. If no default recording group is given, a new
        recording group will be created.

        :param signalGroup: The signal group to be added
        :type signalGroup: :class:`.SignalGroup`

        :param defaultRecordingGroup: The default recording group of the signal group
        :type defaultRecordingGroup: :class:`.RecordingGroup`

        :param allowNewName: If True, a new name will be generated for the signal group if there
                             already exists a signal group with the same name in the package.
                             Default value is False, so an error will be raised if the name already
                             exists.
        :type allowNewName: boolean
        
        """
        callResult = self._Call("AppendSignalGroup", signalGroup, defaultRecordingGroup, allowNewName)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the test case.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def AppendTraceAnalysis(self, traceAnalysis):
        """
        Adds a trace analysis to the trace analyses list.

        :param traceAnalysis: Trace analysis to be added
        :type traceAnalysis: :class:`.TraceAnalysis`
        
        """
        callResult = self._Call("AppendTraceAnalysis", traceAnalysis)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def Close(self):
        """
        Closes the package. After closing the package it can not be modified/accessed anymore.

        
        """
        callResult = self._Call("Close", )


    def GetAdditionalXMLData(self):
        """
        Returns the additional XML data of a package.

        :return: additional XML data
        :rtype: unicode
        
        """
        callResult = self._Call("GetAdditionalXMLData", )

        if callResult is None:
            return None

        return callResult

    def GetAttributes(self):
        """
        Returns all attributes of the package with their values.

        :return: Dictionary of attributes with values
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the package description.

        :return: Description shown in the package properties
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the package file as absolute path, if this is a file.
        If not it may be unsaved.

        :return: The file name of the saved file or None, if not a file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetImplemetedKeywordInterfaceId(self):
        """
        Returns the ID of the implemented key word interface, if set and the package is marked a
        key word implementation.

        :return: Implemented key word interface ID. If not yet set, an empty string will be
                 returned.
        :rtype: unicode
        :raise ApiError: If the "key word implementation" flag is not set.
        
        """
        callResult = self._Call("GetImplemetedKeywordInterfaceId", )

        if callResult is None:
            return None

        return callResult

    def GetKeywordImplementationLanguage(self):
        """
        Returns the implementation language ("de_DE" or "en_US") of the current package, if it is
        marked as key word implementation.

        :return: The implementation language of this package, if explicitly set. "None" will be
                 returned otherwise.
        :rtype: unicode
        :raise ApiError: If the "key word implementation" flag is not set.
        
        """
        callResult = self._Call("GetKeywordImplementationLanguage", )

        if callResult is None:
            return None

        return callResult

    def GetMapping(self):
        """
        Returns the local mapping of the package.

        :return: Mapping of the package
        :rtype: :class:`.LocalMapping`
        
        """
        callResult = self._Call("GetMapping", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = LocalMapping
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the package name.

        :return: Package name.
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterVariables(self):
        """
        Returns a list of all variables defined in the package and set as a parameter.

        :return: List of all defined parameters
        :rtype: list <:class:`.Variable`>
        
        """
        callResult = self._Call("GetParameterVariables", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Variable
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetPostconditionBlock(self):
        """
        Returns the postcondition block.

        :return: Postcondition block or None, if none existing
        :rtype: :class:`.TsPostconditionBlock`
        
        """
        callResult = self._Call("GetPostconditionBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPostconditionBlock
        return classInstance(self._xmlRpc, objId)


    def GetPreconditionBlock(self):
        """
        Returns the precondition block.

        :return: Precondition block or None, if none existing
        :rtype: :class:`.TsPreconditionBlock`
        
        """
        callResult = self._Call("GetPreconditionBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPreconditionBlock
        return classInstance(self._xmlRpc, objId)


    def GetRecordedVariables(self):
        """
        Returns a list of all variables defined in the package and set as a recorded variable.

        :return: List of all recorded variables
        :rtype: list <:class:`.Variable`>
        
        """
        callResult = self._Call("GetRecordedVariables", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Variable
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetReturnVariables(self):
        """
        Returns a list of all variables defined in the package and set as a return variable.

        :return: List of all defined return variables
        :rtype: list <:class:`.Variable`>
        
        """
        callResult = self._Call("GetReturnVariables", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Variable
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetSignalGroups(self):
        """
        Returns a list of all the signal groups within the package.
        Signals and signal recording groups are attributed to their corresponding signal group.

        :return: List of all the signal groups
        :rtype: list <:class:`.SignalGroup`>
        
        """
        callResult = self._Call("GetSignalGroups", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = SignalGroup
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTestScriptId(self):
        """
        Returns the test script id of the package.

        :return: Test script id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestScriptId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepByLineNo(self, lineNo):
        """
        Searches for the line number and returns the test step, if existing.

        :param lineNo: Line number of the test step to be retrieved
        :type lineNo: integer
        :return: Test step at the current line number or None if no test step exists
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetTestStepByLineNo", lineNo)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.

        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>

        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTmsMetaData(self):
        """
        **for internal use only**

        Returns a dict of meta data consumed by the TestManagementService
        :return: dict with meta data
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetTmsMetaData", )

        if callResult is None:
            return None

        return callResult

    def GetTraceAnalyses(self):
        """
        Returns all trace analyses of the package.

        :return: The trace analyses of the package
        :rtype: list<:class:`.TraceAnalysis`>
        
        """
        callResult = self._Call("GetTraceAnalyses", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = TraceAnalysis
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetVariable(self, name):
        """
        Returns the variable defined in the package with a specific name.

        :param name: The name of the variable
        :type name: string
        :return: Variable with the specified name or None
        :rtype: :class:`.Variable`
        
        """
        callResult = self._Call("GetVariable", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Variable
        return classInstance(self._xmlRpc, objId)


    def GetVariableRecordingGroup(self):
        """
        Returns the recording group representing recorded variables.
        It can be used for the generic signal binding and trace synchronization of trace analyses.
        This recording group is read only.

        :return: The variable recording group
        :rtype: :class:`.VariableRecordingGroup`
        
        """
        callResult = self._Call("GetVariableRecordingGroup", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = VariableRecordingGroup
        return classInstance(self._xmlRpc, objId)


    def GetVariables(self):
        """
        Returns a list of all variables defined in the package.

        :return: List of all defined variables
        :rtype: list <:class:`.Variable`>
        
        """
        callResult = self._Call("GetVariables", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Variable
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetVersion(self):
        """
        Returns the package version.

        :return: Version shown in the package properties
        :rtype: unicode
        
        """
        callResult = self._Call("GetVersion", )

        if callResult is None:
            return None

        return callResult

    def HasTestCaseFlag(self):
        """
        Returns the state of the test case flag.

        :return: True if test case flag is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("HasTestCaseFlag", )

        if callResult is None:
            return None

        return callResult

    def HasTraceAnalyses(self):
        """
        Returns True if the package has trace analyses.

        :return: True if the package has trace analyses
        :rtype: boolean
        
        """
        callResult = self._Call("HasTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def ImplementsKeyword(self):
        """
        Checks if current package is marked as a key word interface implementation.
        :return: "True", if package is marked as a key word interface implementation else "False".
        :rtype: boolean
        
        """
        callResult = self._Call("ImplementsKeyword", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain line of the test case.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def RemoveAttribute(self, attributeName):
        """
        Removes an attribute.

        :param attributeName: Name of the attribute to be removed
        :type attributeName: unicode
        :raises: ApiError: When the specified attribute does not exist.
        
        """
        callResult = self._Call("RemoveAttribute", attributeName)


    def RemoveSignalGroup(self, signalGroup):
        """
        Removes a signal group from the package. All relations to recording groups of
        the signal group will be lost.

        :param signalGroup: The signal group to be removed
        :type signalGroup: :class:`.SignalGroup`
        
        """
        callResult = self._Call("RemoveSignalGroup", signalGroup)


    def RemoveTestStep(self, testStep):
        """
        Removes the given test step from the test case.

        :param testStep: Test step to be removed
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("RemoveTestStep", testStep)


    def RemoveTraceAnalysis(self, traceAnalysisName):
        """
        Removes a trace analysis from the trace analyses list.

        :param traceAnalysisName: Name of trace analysis to be removed
        :type traceAnalysisName: unicode
        
        """
        callResult = self._Call("RemoveTraceAnalysis", traceAnalysisName)


    def RemoveVariable(self, variableName):
        """
        Removes a variable from the package.

        :param variableName: Name of variable to be removed
        :type variableName: unicode
        
        """
        callResult = self._Call("RemoveVariable", variableName)


    def RenameVariable(self, oldVarName, newVarName):
        """
        Renames a existing variable of the package.

        :param oldVarName: The old variable name
        :type oldVarName: unicode
        :param newVarName: The new variable name
        :type newVarName: unicode
        
        """
        callResult = self._Call("RenameVariable", oldVarName, newVarName)


    def Save(self, filename=None):
        """
        Saves the package. Appends file ending if needed.

        :param filename: File name of the package; Either absolute or relative to the 'Packages'
                         directory. Leave out to save the package to its existing file
                         (previously set with :meth:`~.Package.Save` or from
                         :meth:`.PackageApi.OpenPackage`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)


    def SetAdditionalXMLData(self, xmlData):
        """
        Sets the additional XML data of a package.

        :param xmlData: XML data to be added to a package.
        :type xmlData: unicode
        
        """
        callResult = self._Call("SetAdditionalXMLData", xmlData)


    def SetAttribute(self, attributeName, value):
        """
        Sets an attribute to a certain value.

        :param attributeName: Name of the attribute to be set
        :type attributeName: unicode
        :param value: Value to be set
        :type value: unicode
        
        """
        callResult = self._Call("SetAttribute", attributeName, value)


    def SetDescription(self, description):
        """
        Sets the package description.

        :param description: Description to be shown in the package properties
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetImplementsKeywordFlag(self, state):
        """
        Sets the state of the "key word implementation" flag.

        :param state: If "state" is "True", this package will be marked as a key word interface
                      implementation, otherwise an eventually existing mark will be removed.
        :type state: boolean
        
        """
        callResult = self._Call("SetImplementsKeywordFlag", state)


    def SetImplemetedKeywordInterfaceId(self, implId):
        """
        Sets the ID of the implemented key word interface, package must be marked as a key
        word implementation before.

        :param implId: ID of the implemented key word interfaces or empty.
        :type implId: unicode
        :raise ApiError: If the "key word implementation" flag is not set.
        
        """
        callResult = self._Call("SetImplemetedKeywordInterfaceId", implId)


    def SetKeywordImplementationLanguage(self, implLanguage):
        """
        Sets the implementation language of the current package. Package must be marked as a key
        word implementation before.

        :param implLanguage: Implementation language "de_DE" or "en_US". Or "None" to reset the
                             current setting to program language.
        :type implLanguage: unicode
        :raise ApiError: If the "key word implementation" flag is not set.
        
        """
        callResult = self._Call("SetKeywordImplementationLanguage", implLanguage)


    def SetTestCaseFlag(self, state=True):
        """
        Sets the test case flag.

        :param state: True to enable, False to disable the test case flag
        :type state: bool
        
        """
        callResult = self._Call("SetTestCaseFlag", state)


    def SetTestScriptId(self, testSriptId):
        """
        Sets the test script id of the pacakge.

        :param testSriptId: Test script id
        :type testSriptId: unicode
        
        """
        callResult = self._Call("SetTestScriptId", testSriptId)


    def SetVersion(self, version):
        """
        Sets the package version.

        :param version: Version to be shown in the package properties
        :type version: unicode
        
        """
        callResult = self._Call("SetVersion", version)



class SignalGroup(ObjectApiProxy):
    """

    API to access signal groups. Signals of a signal group are
    represented by references to mapping items.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalGroup, self).__init__(xmlRpc, objId)



    def AppendMappingItem(self, mappingItem):
        """
        Adds a mapping item to the signal group.

        :param mappingItem: The mapping item to be added
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("AppendMappingItem", mappingItem)


    def AppendRecordingGroup(self, recordingGroup):
        """
        Adds a recording group to the signal group.

        :param recordingGroup: The recording group to be added
        :type recordingGroup: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("AppendRecordingGroup", recordingGroup)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SignalGroup`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalGroup
        return classInstance(self._xmlRpc, objId)


    def GetMappingItemNames(self):
        """
        Returns the names of all the mapping Items within the signal group.

        :return: List of all the mapping item names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetMappingItemNames", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItems(self):
        """
        Returns a list of all resolved mapping items (representing the signals) within the signal
        group. Mapping items can be a part of the package's mapping or of the global mapping if any
        is loaded.

        :return: List of all resolved mapping items.
        :rtype: list <:class:`.MappingItem`>
        
        """
        callResult = self._Call("GetMappingItems", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetName(self):
        """
        Returns the name of the signal group.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingGroupNames(self):
        """
        Returns the names of all the recording groups within the signal group.

        :return: List of all the recording group names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetRecordingGroupNames", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingGroups(self):
        """
        Returns a list of all the signal recording groups within the signal group.

        :return: List of all the signal recording groups
        :rtype: list <:class:`.RecordingGroup`>
        
        """
        callResult = self._Call("GetRecordingGroups", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def RemoveMappingItem(self, mappingItemName):
        """
        Removes a mapping item from the signal group.
        
        :param mappingItemName: The mapping item name
        :type mappingItemName: unicode
        
        """
        callResult = self._Call("RemoveMappingItem", mappingItemName)


    def RemoveRecordingGroup(self, recordingGroup):
        """
        Removes a recording group from the signalGroup.

        :param recordingGroup: The recording group to be removed
        :type recordingGroup: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("RemoveRecordingGroup", recordingGroup)


    def SetName(self, name):
        """
        Sets the name of the signal group.

        :param name: The new name
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class RecordingGroup(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(RecordingGroup, self).__init__(xmlRpc, objId)



    def AppendRecordingInfo(self, recordingInfo):
        """
        Adds a recording info to the recording group.

        :param recordingInfo: The recording info to be added
        :type recordingInfo: :class:`.RecordingInfo`
        
        """
        callResult = self._Call("AppendRecordingInfo", recordingInfo)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def EnableAutoStartStop(self, enable=True):
        """
        Enables or disables automatic recording of this recording group during test execution.

        :param enable: True to enable automatic recording, False to disable it
        :type enable: bool
        
        """
        callResult = self._Call("EnableAutoStartStop", enable)


    def GetConditionalSignalNamesForTraceAnalyses(self):
        """
        Returns the list of signal names that can be optional or mandatory for running 
        the trace analyses depending on the values of global constants.

        :return: The list of undetermined signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetConditionalSignalNamesForTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetMandatorySignalNamesForTraceAnalyses(self):
        """
        Returns the list of signal names that are mandatory for running the trace analyses.

        :return: The list of mandatory signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetMandatorySignalNamesForTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of a recording group.        

        :return: the name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOptionalSignalNamesForTraceAnalyses(self):
        """
        Returns the list of signal names that are optional for running the trace analyses.

        :return: The list of optional signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetOptionalSignalNamesForTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingInfos(self):
        """
        Returns the recording infos of the recording group

        :return: Recording infos
        :rtype: list <:class:`.RecordingInfo`>
        
        """
        callResult = self._Call("GetRecordingInfos", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RecordingInfo
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetSignalGroup(self):
        """
        Returns the parent signal group.
        
        :return: The parent signal group
        :rtype: :class:`.SignalGroup`
        
        """
        callResult = self._Call("GetSignalGroup", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalGroup
        return classInstance(self._xmlRpc, objId)


    def IsAutoStartStopEnabled(self):
        """
        Returns if the recording group is configured to be recorded automatically during test execution

        :return: True if automatic recording is enabled, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsAutoStartStopEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsLogRecording(self):
        """
        Returns whether the recording group is a log recording.

        :return: True if the recording group is a log recording else False
        :rtype: bool
        
        """
        callResult = self._Call("IsLogRecording", )

        if callResult is None:
            return None

        return callResult

    def IsSignalRecording(self):
        """
        Returns whether the recording group is a signal recording.

        :return: True if the recording group is a signal recording else False
        :rtype: bool
        
        """
        callResult = self._Call("IsSignalRecording", )

        if callResult is None:
            return None

        return callResult

    def SetName(self, name):
        """
        Sets the name of the recording group.

        :param name: The new name
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class Variable(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Variable, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Variable`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Variable
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the variable.

        :return: Description of variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetInitialBooleanValue(self):
        """
        Returns the initial value of the variable or None if it is not a Boolean.

        :return: Initial value of the variable
        :rtype: bool
        
        """
        callResult = self._Call("GetInitialBooleanValue", )

        if callResult is None:
            return None

        return callResult

    def GetInitialFunctionValue(self):
        """
        Returns the code of the function variable or None if it is not a function variable.

        :return: Initial code of the function variable
        :rtype: string
        
        """
        callResult = self._Call("GetInitialFunctionValue", )

        if callResult is None:
            return None

        return callResult

    def GetInitialNumericValue(self):
        """
        Returns the initial value of the variable or None if it is not a Numeric.

        :return: Initial value of the variable
        :rtype: int/float
        
        """
        callResult = self._Call("GetInitialNumericValue", )

        if callResult is None:
            return None

        return callResult

    def GetInitialPyObjectValue(self):
        """
        Returns the initial value of the variable or None if it is not a PyObject.

        :return: Initial value of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetInitialPyObjectValue", )

        if callResult is None:
            return None

        return callResult

    def GetInitialStringValue(self):
        """
        Returns the initial value of the variable or None if it is not a String.
 
        :return: Initial value of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetInitialStringValue", )

        if callResult is None:
            return None

        return callResult

    def GetInitialTextTableValue(self):
        """
        Returns the initial value of the variable or None if it is not a Texttable.

        :return: Initial value of the variable
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetInitialTextTableValue", )

        if callResult is None:
            return None

        return callResult

    def GetInitialValueType(self):
        """
        Returns the type of the initial value of the variable.
        
        :return: type of the initial value
        :rtype: unicode
        
        """
        callResult = self._Call("GetInitialValueType", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the variable.

        :return: Name of variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def IsParameter(self):
        """
        Returns whether the variable is a parameter.

        :return: True if parameter, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsParameter", )

        if callResult is None:
            return None

        return callResult

    def IsRecorded(self):
        """
        Returns whether the variable is recorded during execution.

        :return: True if recorded, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsRecorded", )

        if callResult is None:
            return None

        return callResult

    def IsReturn(self):
        """
        Returns whether the variable is a return value.

        :return: True if return value, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsReturn", )

        if callResult is None:
            return None

        return callResult

    def SetDescription(self, description):
        """
        Sets the description of the variable.

        :param description: Description of variable
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetInitialBooleanValue(self, value):
        """
        Sets the initial value of the variable.

        :param value: Initial value of the variable
        :type value: bool
        
        """
        callResult = self._Call("SetInitialBooleanValue", value)


    def SetInitialFunctionValue(self, code):
        """
        Sets the code of the Function.

        :param code: Python code to be executed
        :type code: string
        
        """
        callResult = self._Call("SetInitialFunctionValue", code)


    def SetInitialNumericValue(self, value):
        """
        Sets the initial value of the variable.

        :param value: Initial value of the variable
        :type value: int/float
        
        """
        callResult = self._Call("SetInitialNumericValue", value)


    def SetInitialPyObjectValue(self, value):
        """
        Sets the initial value of the variable.

        :param value: May only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None
        :type value: string
        
        """
        callResult = self._Call("SetInitialPyObjectValue", value)


    def SetInitialStringValue(self, value):
        """
        Sets the initial value of the variable.

        :param value: Initial value of the variable
        :type value: string
        
        """
        callResult = self._Call("SetInitialStringValue", value)


    def SetInitialTextTableValue(self, value, defaultValue):
        """
        Sets the initial value of the variable.

        :param value: A list of strings.
        :type value: list<unicode>
        :param defaultValue: The string which should be used as the current value.
        :type defaultValue: unicode
        
        """
        callResult = self._Call("SetInitialTextTableValue", value, defaultValue)


    def SetParameter(self, enable=True):
        """
        Sets whether the variable is a parameter or not.

        :param enable: Whether the variable is a parameter or not
        :type enable: boolean
        
        """
        callResult = self._Call("SetParameter", enable)


    def SetRecorded(self, enable=True):
        """
        Sets the recording state of the variable to the value of enable.

        :param enable: Whether to enable the recording of the variable
        :type enable: boolean
        
        """
        callResult = self._Call("SetRecorded", enable)


    def SetReturn(self, enable=True):
        """
        Sets whether the variable is a return value or not.

        :param enable: Whether the variable is a return value or not
        :type enable: boolean
        
        """
        callResult = self._Call("SetReturn", enable)



class GenericSignal(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(GenericSignal, self).__init__(xmlRpc, objId)



    def AssignRecordingSignal(self, recordingGroup, mappingItemName):
        """
        Assigns a signal of recording group to the generic signal by specifying
        a recording group and a valid mapping item name of the parent signal group.

        :param recordingGroup: The recording group of the signal
        :type recordingGroup: :class:`.RecordingGroup`

        :param mappingItemName: The name of signal to be assigned. It has to be a signal contained
                                in the parent signal group of the recording group.
        :type mappingItemName: unicode
        
        """
        callResult = self._Call("AssignRecordingSignal", recordingGroup, mappingItemName)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.GenericSignal`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericSignal
        return classInstance(self._xmlRpc, objId)


    def GetAssignedMappingItemName(self):
        """
        Returns the name of the mapping item of the recoding group signal assigned to the
        generic signal.
        
        :return: Name of the assigned mapping item.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAssignedMappingItemName", )

        if callResult is None:
            return None

        return callResult

    def GetAssignedRecordingGroupName(self):
        """
        Returns the name of the recording group the assigned recoding group signal belongs to,
        if there is any mapping item assigned to the generic signal.

        :return: Name of the recording group the assigned recoding group signal belongs to.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAssignedRecordingGroupName", )

        if callResult is None:
            return None

        return callResult

    def GetDefaultUnit(self):
        """
        Returns the default unit that will be used if a trace step (e.g. a plot) uses this signal.

        :note: The default unit will not be used if the generic signal is calculated or it is not interpreted as number.

        :return: The default unit (default: "don't care")
        :rtype: unicode
        
        """
        callResult = self._Call("GetDefaultUnit", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the generic signal.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetSignalType(self):
        """
        Returns the signal type to be read.
        
        :return: The signal type. Possible values: "PHY", "RAW", "STR"
        :rtype: string
        
        """
        callResult = self._Call("GetSignalType", )

        if callResult is None:
            return None

        return callResult

    def IsOptional(self):
        """
        Returns whether this generic signals optional flag is set.

        :note: This flag will be used for trace steps that have no own option
               to mark a signal as optional. If this flag is set, it is valid
               that a signal is not found in a recording or the mapping path 
               could not be resolved.

        :return: The optional flag
        :rtype: boolean
        
        """
        callResult = self._Call("IsOptional", )

        if callResult is None:
            return None

        return callResult

    def SetDefaultUnit(self, unit):
        """
        Set the default unit that will be used if a trace step (e.g. a plot) uses this signal.

        :note: The default unit will not be used if the generic signal is calculated or it is not interpreted as number.

        :param unit: The default unit (default: "don't care"). Use None or 'don't care' to set it to its default value.
        :type unit: unicode
        
        """
        callResult = self._Call("SetDefaultUnit", unit)


    def SetName(self, name):
        """
        Sets the name of the generic signal.

        :param name: The new name
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetOptional(self, optional):
        """
        Set the optional flag for the generic signal.
        
        :note: This flag will be used for trace steps that have no own option
               to mark a signal as optional. If this flag is set, it is valid
               that a signal is not found in a recording or the mapping path 
               could not be resolved.
        
        :param optional: The new value
        :type optional: boolean
        
        """
        callResult = self._Call("SetOptional", optional)


    def SetSignalType(self, signalType):
        """
        Set the signal type to be read.
        
        :param signalType: The signal type: possible values: "PHY", "RAW", "STR"
        :type signalType: string
        
        """
        callResult = self._Call("SetSignalType", signalType)



class SyncConfig(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SyncConfig, self).__init__(xmlRpc, objId)



    def AssignEqualnessMatchingSynchronization(self, recordingGroup, masterGroup):
        """
        Assigns an equalness matching synchronization that synchronizes recordingGroup with masterGroup.
        If there is already a synchronization assigned to recordingGroup it will be unassigned.
        
        :param recordingGroup: The recording group the synchronization is assigned to
        :type recordingGroup: :class:`.RecordingGroup`
        :param masterGroup: The recording group that is used as master for this synchronization
        :type masterGroup: :class:`.RecordingGroup`
        
        :return: Returns the newly created equalness matching synchronization
        :rtype: :class:`.EqualnessMatchingSynchronization`
        
        """
        callResult = self._Call("AssignEqualnessMatchingSynchronization", recordingGroup, masterGroup)

        if callResult is None:
            return None


        objId = callResult
        classInstance = EqualnessMatchingSynchronization
        return classInstance(self._xmlRpc, objId)


    def AssignExpectationSynchronization(self, recordingGroup, masterGroup):
        """
        Assigns an expectation synchronization that synchronizes recordingGroup with masterGroup.
        If there is already a synchronization assigned to recordingGroup it will be unassigned.
        
        :param recordingGroup: The recording group the synchronization is assigned to
        :type recordingGroup: :class:`.RecordingGroup`
        :param masterGroup: The recording group that is used as master for this synchronization
        :type masterGroup: :class:`.RecordingGroup`
        
        :return: Returns the newly created expectation synchronization
        :rtype: :class:`.ExpectationSynchronization`
        
        """
        callResult = self._Call("AssignExpectationSynchronization", recordingGroup, masterGroup)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ExpectationSynchronization
        return classInstance(self._xmlRpc, objId)


    def AssignOffsetSynchronization(self, recordingGroup, masterGroup):
        """
        Assigns an offset synchronization that synchronizes recordingGroup with masterGroup.
        If there is already a synchronization assigned to recordingGroup it will be unassigned.
        
        :param recordingGroup: The recording group the synchronization is assigned to
        :type recordingGroup: :class:`.RecordingGroup`
        :param masterGroup: The recording group that is used as master for this synchronization
        :type masterGroup: :class:`.RecordingGroup`
        
        :return: Returns the newly created offset synchronization
        :rtype: :class:`.OffsetSynchronization`
        
        """
        callResult = self._Call("AssignOffsetSynchronization", recordingGroup, masterGroup)

        if callResult is None:
            return None


        objId = callResult
        classInstance = OffsetSynchronization
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SyncConfig`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SyncConfig
        return classInstance(self._xmlRpc, objId)


    def GetAdjustTimeInTraceCopy(self):
        """
        Returns whether the trace files are copied to the report directory with 
        time axes adjusted according to sync delta T determined by synchronization.

        :return: True if the synchronized copies of the trace files are generated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("GetAdjustTimeInTraceCopy", )

        if callResult is None:
            return None

        return callResult

    def GetContinueOnError(self):
        """
        Returns whether the trace analysis should continue after an error occurred during the synchronization.

        :return: True if the trace analysis should continue, else False
        :rtype: boolean
        
        """
        callResult = self._Call("GetContinueOnError", )

        if callResult is None:
            return None

        return callResult

    def GetMaster(self):
        """
        Returns the master recording group.

        :return: The master recording group
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetMaster", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSynchronization(self, recordingGroup):
        """
        Returns the assigned synchronization for the given recording group.
        
        :param recordingGroup: The recording group
        :type recordingGroup: :class:`.RecordingGroup`
        :return: The assigned synchronization. Returns None if no synchronization is set.
        :rtype: :class:`.Synchronization`
        
        """
        callResult = self._Call("GetSynchronization", recordingGroup)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSynchronizations(self):
        """
        Returns the list synchronizations.

        :return: The list of synchronizations
        :rtype: list<:class:`.Synchronization`>
        
        """
        callResult = self._Call("GetSynchronizations", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def IsActive(self):
        """
        Returns whether the synchronization is active. By default, for a newly created trace analysis
        the synchronization is not active.

        :return: True if the synchronization is active, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsActive", )

        if callResult is None:
            return None

        return callResult

    def SetActive(self, active=True):
        """
        Activates or deactivates the synchronization.

        :param active: True will activate and False will deactivate the synchronization
        :type active: boolean
        
        """
        callResult = self._Call("SetActive", active)


    def SetAdjustTimeInTraceCopy(self, value):
        """
        Sets whether the trace files should be copied to the report directory with 
        time axes adjusted according to sync delta T determined by synchronization.

        :param value: True if the synchronized copies of the trace files are generated, else False
        :type value: boolean
        
        """
        callResult = self._Call("SetAdjustTimeInTraceCopy", value)


    def SetContinueOnError(self, value):
        """
        Sets whether the trace analysis should continue after an error occurred during the synchronization.
        If so, all traces will be used unsynchronized.

        :param value: True, to continue the trace analysis after an synchronization error, else False
        :type value: boolean
        
        """
        callResult = self._Call("SetContinueOnError", value)


    def SetMaster(self, recordingGroup):
        """
        Sets the master recording group. If there is a synchronization assigned
        to the recording group it will be deleted.

        :param recordingGroup: The master recording group
        :type recordingGroup: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("SetMaster", recordingGroup)



class Synchronization(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Synchronization, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Synchronization`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMaster(self):
        """
        Returns the master recording group for this synchronization.

        :return: The master recording group
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetMaster", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMaxDeltaT(self):
        """
        Returns the bound for deltaT. If deltaT is found to be greater than this bound, 
        the synchronization will fail.
        
        :return: The maximum for deltaT as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxDeltaT", )

        if callResult is None:
            return None

        return callResult

    def GetOffset(self):
        """
        Returns the (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.
        
        :return: The (known) offset as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetOffset", )

        if callResult is None:
            return None

        return callResult

    def GetOffsetUsed(self):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :return: True if the offset will be used, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetOffsetUsed", )

        if callResult is None:
            return None

        return callResult

    def GetTimeLimit(self):
        """
        Returns the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.
        
        :return: The relative time limit as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeLimit", )

        if callResult is None:
            return None

        return callResult

    def IsFirstSampleDifferenceCorrected(self):
        """
        Returns whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :return: The setting for the interpretation of maxDeltaT
        :rtype: boolean
        
        """
        callResult = self._Call("IsFirstSampleDifferenceCorrected", )

        if callResult is None:
            return None

        return callResult

    def SetFirstSampleDifferenceCorrected(self, isCorrected):
        """
        Sets whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :param isCorrected: The setting for the interpretation of maxDeltaT
        :type isCorrected: boolean
        
        """
        callResult = self._Call("SetFirstSampleDifferenceCorrected", isCorrected)


    def SetMaxDeltaT(self, maxDeltaT):
        """
        Sets the bound for deltaT to the value maxDeltaT. 
        If deltaT is found to be greater than this bound, the synchronization will fail.

        :param maxDeltaT: The maximum for deltaT as expression
        :type maxDeltaT: unicode
        
        """
        callResult = self._Call("SetMaxDeltaT", maxDeltaT)


    def SetOffset(self, offset):
        """
        Sets (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.

        :param offset: The (known) offset as expression
        :type offset: unicode
        
        """
        callResult = self._Call("SetOffset", offset)


    def SetOffsetUsed(self, used):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :param used: True if the offset should be used, else False.
        :type used: boolean
        
        """
        callResult = self._Call("SetOffsetUsed", used)


    def SetTimeLimit(self, timeLimit):
        """
        Sets the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.

        :param timeLimit: The relative time limit as expression
        :type timeLimit: unicode
        
        """
        callResult = self._Call("SetTimeLimit", timeLimit)



class SyncExpectation(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SyncExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SyncExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SyncExpectation
        return classInstance(self._xmlRpc, objId)


    def GetEventType(self):
        """
        Returns the event type of the signal.
        
        :return: The event type ("RAW" or "PHY").
        :rtype: string
        
        """
        callResult = self._Call("GetEventType", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self):
        """
        Returns the expectation expression as text.

        :return: The expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationParameters(self):
        """
        Returns the parameters of the numeric expectation expression as dictionary.

        :return: Dictionary with keys "relation", "value", "toleranceType", "toleranceValue"
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetExpectationParameters", )

        if callResult is None:
            return None

        return callResult

    def GetSignalName(self):
        """
        Returns the signal name of the signal that should be evaluated.
        
        :return: The signal name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSignalName", )

        if callResult is None:
            return None

        return callResult

    def SetEventType(self, eventType):
        """
        Set the event type of the signal.
        
        :param eventType: "RAW" or "PHY"
        :type eventType: string
        
        """
        callResult = self._Call("SetEventType", eventType)


    def SetExpectationParameters(self, relation, value, toleranceType=None, toleranceValue=None):
        """
        Sets the parameters of the numeric expectation expression. The parameters toleranceType and
        toleranceValue can be passed if relation is "==".
        
        :param relation: The relation between the signal value and the expected value.
                         One of: u"<", u"<=", u"==", u">=", u">", u"!=", u"<>"
        :type relation: unicode
        
        :param value: The expected value as expression
        :type value: unicode
        
        :param toleranceType: Optional, must be "none" if relation is not "==". Flag for the tolerance. One of:
                              - "none" (no tolerance)
                              - "absolute" (absolute)
                              - "percentage" (relative in percent)
                              - "fractional digits"
        :type toleranceType: unicode
        
        :param toleranceValue: Optional. The tolerance value as expression if a tolerance is used.
        :type toleranceValue: unicode
        
        """
        callResult = self._Call("SetExpectationParameters", relation, value, toleranceType, toleranceValue)


    def SetSignalName(self, signalName):
        """
        Sets the signal name of the signal that should be evaluated.
        
        :param signalName: The signal name
        :type signalName: unicode
        
        """
        callResult = self._Call("SetSignalName", signalName)



class EqualEntry(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(EqualEntry, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.EqualEntry`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = EqualEntry
        return classInstance(self._xmlRpc, objId)


    def GetEventType(self):
        """
        Return the event type for this equalness matching. Possible values are
        "RAW", "PHY", and "STR".

        :return: The event type
        :rtype: str
        
        """
        callResult = self._Call("GetEventType", )

        if callResult is None:
            return None

        return callResult

    def GetMasterName(self):
        """
        Returns the signal name of the selected master recording group that is used for the equalness
        synchronization.
        
        :return: The signal name
        :rtype: unicode
        
        """
        callResult = self._Call("GetMasterName", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the signal name of the associated recording group that is used for the equalness
        synchronization.
        
        :return: The signal name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def SetEventType(self, eventType):
        """
        Sets the event type to use for this equalness matching.

        :param eventType: Type of event: "RAW", "PHY", or "STR"
        :type eventType: str
        
        """
        callResult = self._Call("SetEventType", eventType)


    def SetMasterName(self, masterName):
        """
        Sets the signal (by name) of the selected master recording group to use for the equalness
        synchronization.

        :param masterName: The name of the signal
        :type masterName: unicode
        
        """
        callResult = self._Call("SetMasterName", masterName)


    def SetName(self, name):
        """
        Sets the signal (by name) of the associated recording group to use for the equalness
        synchronization.

        :param name: The name of the signal
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class PackageApi(ObjectApiProxy):
    """

    API to access Packages
    
    """


    @property
    def ExpectationApi(self):
        """
        Returns the ExpectationApi namespace.

        :return: ExpectationApi namespace
        :rtype: :class:`.ExpectationApi`
        
        """
        return self.__ExpectationApi

    @property
    def MappingApi(self):
        """
        Returns the MappingApi namespace.

        :return: MappingApi namespace
        :rtype: :class:`.MappingApi`
        
        """
        return self.__MappingApi

    @property
    def SignalRecordingApi(self):
        """
        Returns the SignalRecordingApi namespace.

        :return: SignalRecordingApi namespace
        :rtype: :class:`.SignalRecordingApi`
        
        """
        return self.__SignalRecordingApi

    @property
    def TestStepApi(self):
        """
        Returns the TestStepApi namespace.

        :return: TestStepApi namespace
        :rtype: :class:`.TestStepApi`
        
        """
        return self.__TestStepApi

    @property
    def TraceAnalysisApi(self):
        """
        Returns the TraceAnalysisApi namespace.

        :return: TraceAnalysisApi namespace
        :rtype: :class:`.TraceAnalysisApi`
        
        """
        return self.__TraceAnalysisApi

    @property
    def VariableApi(self):
        """
        Returns the VariableApi namespace.

        :return: VariableApi namespace
        :rtype: :class:`.VariableApi`
        
        """
        return self.__VariableApi

    def __init__(self, xmlRpc=None, objId=0):
        super(PackageApi, self).__init__(xmlRpc, objId)

        self.__ExpectationApi = ExpectationApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ExpectationApi"))
        self.__MappingApi = MappingApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "MappingApi"))
        self.__SignalRecordingApi = SignalRecordingApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "SignalRecordingApi"))
        self.__TestStepApi = TestStepApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "TestStepApi"))
        self.__TraceAnalysisApi = TraceAnalysisApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "TraceAnalysisApi"))
        self.__VariableApi = VariableApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "VariableApi"))


    def CreatePackage(self):
        """
        Creates a new package.

        :return: New empty package
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("CreatePackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetPackageByTestManagementId(self, testManagementId):
        """
        Returns an existing package holding the given test management id or None, if no matching
        package exists in the workspace. If found, the package will be opened.

        :param testManagementId: The test management id identifying the package
        :type testManagementId: unicode
        :return: the package or None, if no matching package exists within the workspace
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("GetPackageByTestManagementId", testManagementId)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetTestManagementIdByPath(self, filename):
        """
        Returns the test script id for a given Package filename. If the corresponding package has
        no id of if the package does not exist, an empty string is returned.
        
        :param filename: Absolute path to the package file or relative path in regard to the
                         package directory
        :type filename: unicode
        :return: The test script id of an empty string
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementIdByPath", filename)

        if callResult is None:
            return None

        return callResult

    def OpenPackage(self, filename):
        """
        Opens an existing package. The package may not be opened in ECU-TEST.

        :param filename: Absolute path to the package file or relative path in regard to the
                         package directory
        :type filename: unicode
        :return: Existing package
        :rtype: :class:`.Package`

        
        """
        callResult = self._Call("OpenPackage", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)



class SignalRecordingApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalRecordingApi, self).__init__(xmlRpc, objId)



    def CreateFormatDetailsStringASC(self, medium='AUTO', channel='ALL', direction='RxTx'):
        """
        Creates the format details string for ASC files.
        The information are needed to filter the medium, a specific channel and the direction.

        :param medium: The medium to be read: "AUTO" (default), "CAN", "CANFD", "FlexRay" or "LIN".
                    If medium is "AUTO" the parser tries to guess the medium by reading the header of the ASC file.
                    Only frames of the guessed medium will be read.
        :type medium: unicode

        :param channel: The channel(s) to read. Possible values: "ALL" or "01" up to "99".
                        For medium "FlexRay" values are typically: "ALL", "01"  or "02".
                        For medium "LIN" values are "ALL" or "1" up to "64"
        :type channel: unicode

        :param direction: The communication direction: "Rx", "Tx" or "RxTx".
        :type direction: unicode

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringASC", medium, channel, direction)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringBLF(self, medium='AUTO', channel='ALL', direction='RxTx'):
        """
        Creates the format details string for BLF files.
        The information are needed to filter the medium, a specific channel and the direction.

        :param medium: The medium to be read: "AUTO" (default), "CAN", "FlexRay", or "Ethernet".
        :type medium: unicode

        :param channel: The channel(s) to read. Possible values: "ALL" or "01" up to "99".
                        For medium "FlexRay" values are typically: "ALL", "01"  or "02".
        :type channel: unicode

        :param direction: The communication direction: "Rx", "Tx" or "RxTx".
        :type direction: unicode

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringBLF", medium, channel, direction)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringCSV(self, columnSeparator=';', decimalSeparator='.', thousandSeparator=',', headLineNumber=0, timeColumn=0):
        """
        Creates a format string for CSV files.

        :param columnSeparator: The column separator.
        :type columnSeparator: unicode

        :param decimalSeparator: The decimal separator.
        :type decimalSeparator: unicode

        :param thousandSeparator: The thousand separator.
        :type thousandSeparator: unicode

        :param headLineNumber: The line number of the header with signal names.
        :type headLineNumber: int

        :param timeColumn: The column number of the time column.
        :type timeColumn: int

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringCSV", columnSeparator, decimalSeparator, thousandSeparator, headLineNumber, timeColumn)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringMatControlDesk(self, platformToModelNames):
        """
        Creates the format details string for MAT files created by ControlDeskNG.
        The devices in the file are named like the platforms defined in ControlDeskNG.
        To address signals via model values a dictionary with a mapping of platform names to
        your model names (in ECU-TEST) can be specified.

        :param platformToModelNames: Mapping of platform names to model names (in ECU-TEST).
        :type platformToModelNames: dict<string:string>

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringMatControlDesk", platformToModelNames)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringMdf4ControlDesk(self, platformToModelNames):
        """
        Creates the format details string for MDF4 files created by ControlDeskNG.
        The devices in the file are named like the platforms defined in ControlDeskNG.
        To address signals via model values a dictionary with a mapping of platform names to
        your model names (in ECU-TEST) can be specified.

        :param platformToModelNames: Mapping of platform names to model names (in ECU-TEST).
        :type platformToModelNames: dict<string:string>

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringMdf4ControlDesk", platformToModelNames)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringMdfControlDesk(self, platformToModelNames):
        """
        Creates the format details string for MDF files created by ControlDesk.
        The devices in the file are named like the platforms defined in ControlDesk.
        To address signals via model values a dictionary with a mapping of platform names to
        your model names (in ECU-TEST) can be specified.

        :param platformToModelNames: Mapping of platform names to model names (in ECU-TEST).
        :type platformToModelNames: dict<string:string>

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringMdfControlDesk", platformToModelNames)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringSTI(self, sampleRate=50.0):
        """
        Creates the format details string for STI files.
        The information simple provides the sample rate to generate concrete samples.

        :param sampleRate: The sample rate. Default is 50.0.
        :type sampleRate: float

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringSTI", sampleRate)

        if callResult is None:
            return None

        return callResult

    def CreateFormatDetailsStringTTL(self, medium='CAN', channel='01', direction='RxTx', captureDevice='ANY'):
        """
        Creates the format details string for TTL files.
        The information are needed to filter the medium, a specific channel and the direction. Please note that
        the recording name ("Analog", "CAN", "Flexray") must specified for the recording info, too.

        :param medium: The medium to be read: "CAN" (default), "Flexray" or "LIN".
        :type medium: unicode

        :param channel: The channel(s) to read. Possible values if "CAN" should be read: "01" up to "24".
                        If "LIN" possible values are: "01" up to "12".
                        If "Flexray" possible values are: "1A", "1B", "1AB", ... ,"3AB".
        :type channel: unicode

        :param direction: The communication direction: "Rx", "Tx" or "RxTx".
        :type direction: unicode

        :param captureDevice: Possible values are "ANY" (default), "FPGA" and "Tricore".
        :type captureDevice: unicode

        :return: The newly created format details string.
        :rtype: unicode
        
        """
        callResult = self._Call("CreateFormatDetailsStringTTL", medium, channel, direction, captureDevice)

        if callResult is None:
            return None

        return callResult

    def CreateRecordingGroup(self, name='', description=''):
        """
        Creates a new recording group. If no name is given, a name will be generated
        if the recording group is added to signal group.

        :param name: The name of the recording group. The name must be unique for all recording groups in a package!
        :type name: unicode

        :param description: Description for the signal group
        :type description: unicode

        :return: The newly created recording group
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("CreateRecordingGroup", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def CreateRecordingInfo(self, path, recordingName='', formatDetailsString=None, recordingNumber=0, startTime=None, stopTime=None):
        """
        Creates a recording info.

        :param path: Path to the recording.
        :type path: unicode

        :param recordingName: Optional: The recording name in the file (mostly the device name).
        :type recordingName: unicode

        :param formatDetailsString: Optional: The format details string with information to read the file.
                                    If the file exists it will be checked whether the given format details string
                                    is supported.
                                    See also: CreateFormatDetailsStringXYZ().
        :type formatDetailsString: unicode

        :param recordingNumber: Optional: Number of the recording.
        :type recordingNumber: int

        :param startTime: Optional: First time stamp to be read in from the recording.
        :type startTime: float

        :param stopTime: Optional: Last time stamp to be read in from the recording.
        :type stopTime: float

        :return: The newly created recording info.
        :rtype: :class:`.RecordingInfo`
        
        """
        callResult = self._Call("CreateRecordingInfo", path, recordingName, formatDetailsString, recordingNumber, startTime, stopTime)

        if callResult is None:
            return None


        objId = callResult
        classInstance = RecordingInfo
        return classInstance(self._xmlRpc, objId)


    def CreateSignalGroup(self, name='', description=''):
        """
        Creates a new signal group. If no name is given, a name will be generated
        if the signal group is added to a package.

        :param name: The name of the signal group. The name must be unique for all signal groups in a package!
        :type name: unicode

        :param description: Description for the signal group
        :type description: unicode

        :return: The newly created signal group.
        :rtype: :class:`.SignalGroup`
        
        """
        callResult = self._Call("CreateSignalGroup", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalGroup
        return classInstance(self._xmlRpc, objId)



class TraceAnalysisApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceAnalysisApi, self).__init__(xmlRpc, objId)



    def CreateAssertion(self, name, description=None):
        """
        Creates an assertion trace step.

        :type name: unicode
        :param name: The name of newly created trace step
        :type description: unicode
        :param description: The description of newly created trace step
        :return: New trace analysis assertion step
        :rtype: :class:`.Assertion`
        
        """
        callResult = self._Call("CreateAssertion", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Assertion
        return classInstance(self._xmlRpc, objId)


    def CreateBlock(self, name, description=None):
        """
        Creates a block.

        :type name: unicode
        :param name: The name of newly created trace analysis
        :type description: unicode
        :param description: The description of newly created trace step
        :return: New block
        :rtype: :class:`.AnalysisBlock`
        
        """
        callResult = self._Call("CreateBlock", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = AnalysisBlock
        return classInstance(self._xmlRpc, objId)


    def CreateCalculation(self, name, description=None):
        """
        Creates a calculation trace step.

        :type name: unicode
        :param name: The name of newly created trace step
        :type description: unicode
        :param description: The description of newly created trace step
        :return: New trace analysis calculation step
        :rtype: :class:`.Calculation`
        
        """
        callResult = self._Call("CreateCalculation", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Calculation
        return classInstance(self._xmlRpc, objId)


    def CreateEpisode(self, name, description=None):
        """
        Creates an episode.

        :type name: unicode
        :param name: The name of newly created episode
        :type description: unicode
        :param description: The description of newly created episode
        :return: New trace analysis episode
        :rtype: :class:`.Episode`
        
        """
        callResult = self._Call("CreateEpisode", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Episode
        return classInstance(self._xmlRpc, objId)


    def CreateGenericSignal(self, name, description=None):
        """
        Creates a generic signal to the trace analysis.
        The name must be python-conform!

        :param name: The name of the generic signal
        :type name: unicode
        :type description: unicode
        :param description: The description of newly created generic signal
        :return: The new generic signal
        :rtype: :class:`.GenericSignal`
        
        """
        callResult = self._Call("CreateGenericSignal", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericSignal
        return classInstance(self._xmlRpc, objId)


    def CreateIfDef(self):
        """
        Creates an IfDef block.

        :return: New trace analysis IfDef block
        :rtype: :class:`.IfDef`
        
        """
        callResult = self._Call("CreateIfDef", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = IfDef
        return classInstance(self._xmlRpc, objId)


    def CreatePlot(self, name, description=None):
        """
        Creates a plot.

        :type name: unicode
        :param name: The name of newly created plot
        :type description: unicode
        :param description: The description of newly created plot
        :return: New trace analysis plot
        :rtype: :class:`.Plot`
        
        """
        callResult = self._Call("CreatePlot", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Plot
        return classInstance(self._xmlRpc, objId)


    def CreatePlotSignal(self, name, signalType='GENERIC'):
        """
        Creates a plot signal to be used for a plot (:class:`.PlotSignal`).

        :param name: Name of the plot signal
        :type name: unicode
        :param signalType: Type of plot signal to be mapped (GENERIC, TRACESTEP)
        :type signalType: unicode
        :return: A plot signal
        :rtype: :class:`.PlotSignal`
        
        """
        callResult = self._Call("CreatePlotSignal", name, signalType)

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSignal
        return classInstance(self._xmlRpc, objId)


    def CreateSignalRecording(self, name=None, description=None):
        """
        Creates a signal recording step.

        :param name: The name of newly created signal recording
        :type name: unicode
        :param description: The description of newly created signal recording
        :type description: unicode
        :return: New trace analysis signal recording step
        :rtype: :class:`.SignalRecording`
        
        """
        callResult = self._Call("CreateSignalRecording", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalRecording
        return classInstance(self._xmlRpc, objId)


    def CreateSwitchDefCase(self):
        """
        Creates a SwitchDefCase block.

        :return: New trace analysis SwitchDefCase block
        :rtype: :class:`.SwitchDefCase`
        
        """
        callResult = self._Call("CreateSwitchDefCase", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SwitchDefCase
        return classInstance(self._xmlRpc, objId)


    def CreateTemplateBasedTraceStep(self, name=None, description=None):
        """
        Creates a trace step that references a trace step template.

        :note: After creation the template reference has to be set by calling
               :meth:`.TemplateBasedTraceStep.SetTemplateById()` or
               :meth:`.TemplateBasedTraceStep.SetTemplate()`!

        :type name: unicode
        :param name: The name of the newly created trace step. If None,
                     the trace step template name will be used.
        :type description: unicode
        :param description: The description of the newly created trace step
        :return: New template based trace step
        :rtype: :class:`.TemplateBasedTraceStep`
        
        """
        callResult = self._Call("CreateTemplateBasedTraceStep", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TemplateBasedTraceStep
        return classInstance(self._xmlRpc, objId)


    def CreateTraceAnalysis(self, name, description=None):
        """
        Creates a trace analysis.

        :type name: unicode
        :param name: The name of newly created trace analysis
        :type description: unicode
        :param description: The description of newly created trace step
        :return: New trace analysis
        :rtype: :class:`.TraceAnalysis`
        
        """
        callResult = self._Call("CreateTraceAnalysis", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceAnalysis
        return classInstance(self._xmlRpc, objId)


    def CreateTraceAnalysisReference(self, name, description=None):
        """
        Creates a reference to another trace analysis of a different package that works
        like an episode.

        :type name: unicode
        :param name: The name of newly created trace analysis reference
        :type description: unicode
        :param description: The description of newly created trace analysis reference
        :return: New trace analysis reference
        :rtype: :class:`.TraceAnalysisReference`
        
        """
        callResult = self._Call("CreateTraceAnalysisReference", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceAnalysisReference
        return classInstance(self._xmlRpc, objId)


    def CreateTriggerBlock(self, name, description=None):
        """
        Creates a trigger block.

        :type name: unicode
        :param name: The name of newly created trace step
        :type description: unicode
        :param description: The description of newly created trace step
        :return: New trigger block
        :rtype: :class:`.TriggerBlock`
        
        """
        callResult = self._Call("CreateTriggerBlock", name, description)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TriggerBlock
        return classInstance(self._xmlRpc, objId)



class PlotSignal(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PlotSignal, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PlotSignal`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSignal
        return classInstance(self._xmlRpc, objId)


    def GetAxisIndex(self):
        """
        Returns the index of the axis the signal is assigned to.

        :return: The axis index
        :rtype: integer
        
        """
        callResult = self._Call("GetAxisIndex", )

        if callResult is None:
            return None

        return callResult

    def GetColor(self):
        """
        Return the color that is set in this plot signal.

        :return: The color
        :rtype: unicode
        
        """
        callResult = self._Call("GetColor", )

        if callResult is None:
            return None

        return callResult

    def GetDrawStyle(self):
        """
        Return the draw style that is set in this plot signal.

        :return: The draw style
        :rtype: unicode
        
        """
        callResult = self._Call("GetDrawStyle", )

        if callResult is None:
            return None

        return callResult

    def GetLineStyle(self):
        """
        Return the line style that is set in this plot signal.

        :return: The line style
        :rtype: unicode
        
        """
        callResult = self._Call("GetLineStyle", )

        if callResult is None:
            return None

        return callResult

    def GetLineWidth(self):
        """
        Return the line width that is set in this plot signal.

        :return: The line width
        :rtype: float
        
        """
        callResult = self._Call("GetLineWidth", )

        if callResult is None:
            return None

        return callResult

    def GetMarkerSize(self):
        """
        Return the marker size that is set in this plot signal.

        :return: The marker size
        :rtype: float
        
        """
        callResult = self._Call("GetMarkerSize", )

        if callResult is None:
            return None

        return callResult

    def GetMarkerStyle(self):
        """
        Return the marker style that is set in this plot signal.

        :return: The marker style
        :rtype: unicode
        
        """
        callResult = self._Call("GetMarkerStyle", )

        if callResult is None:
            return None

        return callResult

    def GetName(self, namespace=None):
        """
        Returns the name of this plot signal.

        :param namespace: One of 'tracestep', 'generic', 'mapping', 'file'
        :type namespace: unicode
        :return: The name of this plot signal
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", namespace)

        if callResult is None:
            return None

        return callResult

    def IsGenericSignal(self):
        """
        Returns, if this plot signal has its origin from a generic signal.

        :return: True or False
        :rtype: bool
        
        """
        callResult = self._Call("IsGenericSignal", )

        if callResult is None:
            return None

        return callResult

    def IsTraceStepSignal(self):
        """
        Returns, if this plot signal has its origin from a trace step.

        :return: True or False
        :rtype: bool
        
        """
        callResult = self._Call("IsTraceStepSignal", )

        if callResult is None:
            return None

        return callResult

    def SetAxisIndex(self, axisIndex):
        """
        Assigns the signal to an axis by index.

        :param axisIndex: The axis index in the list of axis of a sub plot
        :type axisIndex: integer
        
        """
        callResult = self._Call("SetAxisIndex", axisIndex)


    def SetColor(self, color):
        """
        Sets the color of this plot signal. Use value '' to assign the color automatically.

        :param color: The new color to be set
        :type color: unicode
        
        """
        callResult = self._Call("SetColor", color)


    def SetDrawStyle(self, drawStyle):
        """
        Sets the draw style of this plot signal.
        Valid values are: 'hold' or 'linear'

        :param drawStyle: The new draw style to be set
        :type drawStyle: unicode
        
        """
        callResult = self._Call("SetDrawStyle", drawStyle)


    def SetLineStyle(self, lineStyle):
        """
        Sets the line style of this plot signal.
        Valid values are: '-', '--', '-.' or ':'. Use value '' to assign the color automatically.

        :param lineStyle: The new line style to be set
        :type lineStyle: unicode
        
        """
        callResult = self._Call("SetLineStyle", lineStyle)


    def SetLineWidth(self, lineWidth):
        """
        Sets the line width of this plot signal.

        :param lineWidth: The new line width to be set
        :type lineWidth: float
        
        """
        callResult = self._Call("SetLineWidth", lineWidth)


    def SetMarkerSize(self, markerSize):
        """
        Sets the marker size of this plot signal.

        :param markerSize: The new marker size to be set
        :type markerSize: float
        
        """
        callResult = self._Call("SetMarkerSize", markerSize)


    def SetMarkerStyle(self, markerStyle):
        """
        Sets the marker style of this plot signal.
        Valid values are: '' (no marker), 'o', '*', 'x', '+', '.'.

        :param markerStyle: The new marker style to be set
        :type markerStyle: unicode
        
        """
        callResult = self._Call("SetMarkerStyle", markerStyle)


    def SetName(self, name, namespace=None):
        """
        Sets the name of the signal to plot.

        :param name: The new name
        :type name: unicode
        :param namespace: One of 'tracestep', 'generic', 'mapping', 'file'
        :type namespace: unicode
        
        """
        callResult = self._Call("SetName", name, namespace)



class PlotSubPlot(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PlotSubPlot, self).__init__(xmlRpc, objId)



    def AppendPlotSignal(self, plotSignal):
        """
        Adds a plot signal to the sub plot.
        :note:

          Don't forget to create at least one axis using :meth:`.CreateAxis` and assign an
          axis to the signal calling :meth:`.PlotSignal.SetAxisIndex`!

        :param plotSignal: The plot signal to be added
        :type plotSignal: :class:`.PlotSignal`
        
        """
        callResult = self._Call("AppendPlotSignal", plotSignal)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PlotSubPlot`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSubPlot
        return classInstance(self._xmlRpc, objId)


    def CreateAxis(self):
        """
        Creates and returns a new axis. The axis will be appended to the list of existing axes of the
        sub plot.

        :return: The newly created axis
        :rtype: :class:`.PlotAxis`
        
        """
        callResult = self._Call("CreateAxis", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotAxis
        return classInstance(self._xmlRpc, objId)


    def GetAxes(self):
        """
        Returns a list of all separate axes.
        
        :return: All seperate axes
        :rtype: list<:class:`.PlotAxis`>
        
        """
        callResult = self._Call("GetAxes", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PlotAxis
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetAxisIndex(self, axis):
        """
        Returns the index of this axis in the list of all axes of the sub plot.

        :param axis: An axis of this sub plot
        :type axis: :class:`.PlotAxis`
        :return: The axis index.
        :rtype: int
        :raise ValueError: If axis is not a member of the sub plot
        
        """
        callResult = self._Call("GetAxisIndex", axis)

        if callResult is None:
            return None

        return callResult

    def GetPlotSignals(self):
        """
        Returns a merged list of all signals of the sub plots.

        :return: The signals of the plot
        :rtype: list<:class:`.PlotSignal`>
        
        """
        callResult = self._Call("GetPlotSignals", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PlotSignal
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetYGrid(self):
        """
        Returns whether horizontal grid lines are visible.

        :return: True if visible, else False
        :rtype: boolean
        
.. deprecated:: 6.5.0
      Use :meth:`.GetYRasterMode` instead.
        """
        callResult = self._Call("GetYGrid", )

        if callResult is None:
            return None

        return callResult

    def GetYRasterMode(self):
        """
        Returns the raster mode for the y-axis.

        :return: the raster mode (0 for no raster, 1 for automatic and 2 for manual raster mode)
        :rtype: int
        
        """
        callResult = self._Call("GetYRasterMode", )

        if callResult is None:
            return None

        return callResult

    def GetYRasterStepSize(self):
        """
        Returns the step size for the raster of the y-axis.

        :return: the raster step size
        :rtype: float
        
        """
        callResult = self._Call("GetYRasterStepSize", )

        if callResult is None:
            return None

        return callResult

    def RemovePlotSignal(self, plotSignal):
        """
        Removes a plot signal from the sub plot.

        :param plotSignal: The plot signal to be removed
        :type plotSignal: :class:`.PlotSignal`
        :raise ValueError: If the plot signal is not present 
        
        """
        callResult = self._Call("RemovePlotSignal", plotSignal)


    def SetYGrid(self, grid):
        """
        Sets whether horizontal grid lines are visible.

        :param grid: True to set visible, else False.
        :type grid: boolean
        
.. deprecated:: 6.5.0
      Use :meth:`.SetYRasterMode` instead.
        """
        callResult = self._Call("SetYGrid", grid)


    def SetYRasterMode(self, mode):
        """
        Sets the raster mode for the y-axis.

        :param mode: 0 for no raster, 1 for automatic and 2 for manual raster mode
        :type mode: int
        :raise ValueError: If mode is not a valid parameter
        
        """
        callResult = self._Call("SetYRasterMode", mode)


    def SetYRasterStepSize(self, value):
        """
        Sets the step size for the raster of the y-axis.

        :param value: the raster step size (!= 0.0)
        :type value: float
        
        """
        callResult = self._Call("SetYRasterStepSize", value)



class PlotSubConfig(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PlotSubConfig, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PlotSubConfig`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSubConfig
        return classInstance(self._xmlRpc, objId)


    def GetCondition(self):
        """
        Returns the condition that must be matched to create a plot.
        Possible return values are 'NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED', 'NEVER'.
        For plot creation the verdict of the plot's parent must be equal to or worse than this setting.
        For instance 'NONE' means that the plot is always created whereas the setting 'FAILED'
        causes its creation only if the plot's parent runs FAILED or ERROR.
        
        :return: The plot condition
        :rtype: unicode
        
        """
        callResult = self._Call("GetCondition", )

        if callResult is None:
            return None

        return callResult

    def GetExpandXLimitsLeft(self):
        """
        Returns the expand value of the left limit as expression. The expand value will be added to automatically determined
        view limits of the plot.
        
        :return: The expression for the expand value of the left limit
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpandXLimitsLeft", )

        if callResult is None:
            return None

        return callResult

    def GetExpandXLimitsRight(self):
        """
        Returns the expand value of the right limit as expression. The expand value will be added to automatically determined
        view limits of the plot.
        
        :return: The expression for expand value of the right limit
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpandXLimitsRight", )

        if callResult is None:
            return None

        return callResult

    def GetMaxNumberPlots(self):
        """
        Returns the maximum number of plots to be created. This number is counted for the entire execution so trigger ranges
        will not reset the count.
        
        :return: The maximum number of plots as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxNumberPlots", )

        if callResult is None:
            return None

        return callResult

    def SetCondition(self, condition):
        """
        Sets the condition that must be matched to create a plot.
        Possible parameter values are 'NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED', 'NEVER'.
        For plot creation the verdict of the plot's parent must be equal to or worse than this setting.
        For instance 'NONE' means that the plot is always created whereas the setting 'FAILED'
        causes its creation only if the plot's parent runs FAILED or ERROR.
        
        :param condition: The plot condition
        :type condition: unicode
        
        """
        callResult = self._Call("SetCondition", condition)


    def SetExpandXLimitsLeft(self, expandXLimitsLeft):
        """
        Sets the expand value of the left limit as expression. The expand value will be added to automatically determined
        view limits of the plot.
        An overview plot ignores this setting entirely.
        
        :param expandXLimitsLeft: The expression for the expand value of the left limit
        :type expandXLimitsLeft: unicode
        
        """
        callResult = self._Call("SetExpandXLimitsLeft", expandXLimitsLeft)


    def SetExpandXLimitsRight(self, expandXLimitsRight):
        """
        Sets the expand value of the left limit as expression. The expand value will be added to automatically determined
        view limits of the plot.
        An overview plot ignores this setting entirely.
        
        :param expandXLimitsRight: The expression for the expand value of the right limit
        :type expandXLimitsRight: unicode
        
        """
        callResult = self._Call("SetExpandXLimitsRight", expandXLimitsRight)


    def SetMaxNumberPlots(self, maxNumberPlots):
        """
        Sets the maximum number of plots to be created. This number is counted for the entire execution so trigger ranges
        will not reset the count.
        An overview plot ignores this setting entirely. 
        
        :param maxNumberPlots: The maximum number of plots as expression
        :type maxNumberPlots: unicode
        
        """
        callResult = self._Call("SetMaxNumberPlots", maxNumberPlots)



class PlotAxis(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PlotAxis, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PlotAxis`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotAxis
        return classInstance(self._xmlRpc, objId)


    def GetScalingMode(self):
        """
        Returns the scaling mode for the y-axis.

        :return: the scaling mode (0 for automatic, 1 for manual scaling mode)
        :rtype: int
        
        """
        callResult = self._Call("GetScalingMode", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMaxActive(self):
        """
        Returns whether the maximum value for the y-axis is active or not.

        :return: True or False
        :rtype: bool
        
        """
        callResult = self._Call("GetScalingYMaxActive", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMaxValue(self):
        """
        Returns the maximum value for the y-axis.

        :return: the maximum value
        :rtype: float
        
        """
        callResult = self._Call("GetScalingYMaxValue", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMinActive(self):
        """
        Returns whether the minimum value for the y-axis is active or not.

        :return: True or False
        :rtype: bool
        
        """
        callResult = self._Call("GetScalingYMinActive", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMinValue(self):
        """
        Returns the minimum value for the y-axis.

        :return: the minimum value
        :rtype: float
        
        """
        callResult = self._Call("GetScalingYMinValue", )

        if callResult is None:
            return None

        return callResult

    def SetScalingMode(self, mode):
        """
        Sets the scaling mode for the y-axis.

        :param mode: 0 for automatic, 1 for manual scaling mode
        :type mode: int
        :raise ValueError: If mode is not a valid parameter
        
        """
        callResult = self._Call("SetScalingMode", mode)


    def SetScalingYMaxActive(self, value):
        """
        Sets whether the maximum value for the y-axis should be active or not.

        :param value: True or False
        :type value: bool
        
        """
        callResult = self._Call("SetScalingYMaxActive", value)


    def SetScalingYMaxValue(self, value):
        """
        Sets the maximum value for the y-axis.

        :param value: The maximum value
        :type value: float
        
        """
        callResult = self._Call("SetScalingYMaxValue", value)


    def SetScalingYMinActive(self, value):
        """
        Sets whether the minimum value for the y-axis should be active or not.

        :param value: True or False
        :type value: bool
        
        """
        callResult = self._Call("SetScalingYMinActive", value)


    def SetScalingYMinValue(self, value):
        """
        Sets the minimum value for the y-axis.

        :param value: The minimum value
        :type value: float
        
        """
        callResult = self._Call("SetScalingYMinValue", value)



class SignalBinding(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalBinding, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SignalBinding`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def GetGenericSignal(self):
        """
        Get the bound generic signal.

        :return: The generic signal. Can be None.
        :rtype: :class:`.GenericSignal`
        
        """
        callResult = self._Call("GetGenericSignal", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericSignal
        return classInstance(self._xmlRpc, objId)


    def GetUnit(self):
        """
        Returns the default unit that will be used if a trace step (e.g. a plot) uses this signal.

        :return: The default unit (default: "don't care")
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", )

        if callResult is None:
            return None

        return callResult

    def IsOptional(self):
        """
        Checks whether the bound generic signal is optionally bound
        to a recording signal.
        
        :note: The value True for this flag is only valid if the 
               trace step template signal is marked as optional.
        
        :return: True if it is optional, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOptional", )

        if callResult is None:
            return None

        return callResult

    def SetGenericSignal(self, genericSignal):
        """
        Set a new generic signal to be bound.

        :param genericSignal: The generic signal
        :type genericSignal: :class:`.GenericSignal`
        
        """
        callResult = self._Call("SetGenericSignal", genericSignal)


    def SetOptional(self, optional):
        """
        Set whether the bound generic signal is optionally bound
        to a recording signal.
        
        :note: The value True for this flag is only valid if the 
               trace step template signal is marked as optional.

        :param optional: The new value
        :type optional: boolean
        
        """
        callResult = self._Call("SetOptional", optional)


    def SetUnit(self, unit):
        """
        Set the default unit that will be used if a trace step (e.g. a plot) uses this signal.

        :param unit: The default unit (default: "don't care"). Use None or 'don't care' to set it to its default value.
        :type unit: unicode
        
        """
        callResult = self._Call("SetUnit", unit)



class ReportConfig(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportConfig, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportConfig`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportConfig
        return classInstance(self._xmlRpc, objId)


    def GetMaxSpots(self):
        """
        Get how many spots or ranges will be reported.
        
        :return: Number of spots or ranges to be reported
        :rtype: int
        
        """
        callResult = self._Call("GetMaxSpots", )

        if callResult is None:
            return None

        return callResult

    def GetMinDelta(self):
        """
        Get the minimum duration between reported spots or ranges.
        
        :return: Minimum duration between reported spots or ranges
        :rtype: float
        
        """
        callResult = self._Call("GetMinDelta", )

        if callResult is None:
            return None

        return callResult

    def GetResultDetailsVariable(self):
        """
        Get the name of the package variable result details will be written to.

        :return: Name of the result details variable. None if not set.
        :rtype: unicode
        
        """
        callResult = self._Call("GetResultDetailsVariable", )

        if callResult is None:
            return None

        return callResult

    def SetMaxSpots(self, maxSpots):
        """
        Sets how many spots or ranges will be reported.
        
        :param maxSpots: Number of spots or ranges to be reported (defaults to 100)
        :type maxSpots: int
        
        """
        callResult = self._Call("SetMaxSpots", maxSpots)


    def SetMinDelta(self, minDelta):
        """
        Sets the minimum duration between reported spots or ranges.
        
        :param minDelta: Minimum duration between reported spots or ranges (defaults to 0.0)
        :type minDelta: float
        
        """
        callResult = self._Call("SetMinDelta", minDelta)


    def SetResultDetailsVariable(self, varName):
        """
        Sets the name of the package variable result details will be written to.
        
        :param varName: Name of the result details variable. None to set no variable.
        :type varName: unicode
        
        """
        callResult = self._Call("SetResultDetailsVariable", varName)



class ExpectationApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ExpectationApi, self).__init__(xmlRpc, objId)



    def CreateBooleanExpectation(self, truthValue):
        """
        Creates a boolean expectation.
        
        :param truthValue: The truth value of the expectation
        :type truthValue: bool
        :return: The boolean expression expectation
        :rtype: :class:`.BooleanExpectation`
        
        """
        callResult = self._Call("CreateBooleanExpectation", truthValue)

        if callResult is None:
            return None


        objId = callResult
        classInstance = BooleanExpectation
        return classInstance(self._xmlRpc, objId)


    def CreateExpressionExpectation(self, expression=None):
        """
        Creates an unspecific expression expectation.
        
        :param expression: Optional. The expression text.
        :type expression: unicode
        :return: The unspecific expression expectation
        :rtype: :class:`.ExpressionExpectation`
        
        """
        callResult = self._Call("CreateExpressionExpectation", expression)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ExpressionExpectation
        return classInstance(self._xmlRpc, objId)


    def CreateNumericExpectation(self):
        """
        Creates a numeric expectation.
        
        :return: The numeric expectation
        :rtype: :class:`.NumericExpectation`
        
        """
        callResult = self._Call("CreateNumericExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = NumericExpectation
        return classInstance(self._xmlRpc, objId)


    def CreateNumericExpressionExpectation(self, expression=None):
        """
        Creates a manual numeric expectation.
        
        :param expression: Optional. The expression text.
        :type expression: unicode
        :return: The numeric expectation
        :rtype: :class:`.NumericExpressionExpectation`
        
        """
        callResult = self._Call("CreateNumericExpressionExpectation", expression)

        if callResult is None:
            return None


        objId = callResult
        classInstance = NumericExpressionExpectation
        return classInstance(self._xmlRpc, objId)


    def CreateStringExpectation(self):
        """
        Creates a string expectation.
        
        :return: The string expectation
        :rtype: :class:`.StringExpectation`
        
        """
        callResult = self._Call("CreateStringExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = StringExpectation
        return classInstance(self._xmlRpc, objId)


    def CreateStringExpressionExpectation(self, expression=None):
        """
        Creates a string expression expectation.
        
        :param expression: Optional. The expression text.
        :type expression: unicode
        :return: The string expression expectation
        :rtype: :class:`.StringExpressionExpectation`
        
        """
        callResult = self._Call("CreateStringExpressionExpectation", expression)

        if callResult is None:
            return None


        objId = callResult
        classInstance = StringExpressionExpectation
        return classInstance(self._xmlRpc, objId)


    def CreateStringListExpectation(self):
        """
        Creates a string list expectation.
        
        :return: The string list expectation
        :rtype: :class:`.StringListExpectation`
        
        """
        callResult = self._Call("CreateStringListExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = StringListExpectation
        return classInstance(self._xmlRpc, objId)



class Expectation(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Expectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)



class VariableApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(VariableApi, self).__init__(xmlRpc, objId)



    def CreateVariable(self, name):
        """
        Creates a new variable.

        :param name: Variable name
        :type name: unicode
        :return: New variable
        :rtype: :class:`.Variable`
        
        """
        callResult = self._Call("CreateVariable", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Variable
        return classInstance(self._xmlRpc, objId)



class TestStepApi(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TestStepApi, self).__init__(xmlRpc, objId)



    def CreateTsAddTrace(self):
        """
        Creates an add trace utility test step.

        :return: New add trace utility test step
        :rtype: :class:`.TsAddTrace`
        
        """
        callResult = self._Call("CreateTsAddTrace", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAddTrace
        return classInstance(self._xmlRpc, objId)


    def CreateTsAlterPDUTiming(self, mappingItem):
        """
        Creates a new alter PDU timing test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusSignalGroupMappingItem`
        :return: New alter PDU timing test step
        :rtype: :class:`.TsAlterPDUTiming`
        
        """
        callResult = self._Call("CreateTsAlterPDUTiming", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAlterPDUTiming
        return classInstance(self._xmlRpc, objId)


    def CreateTsAnalysisJob(self):
        """
        Creates a analysis job traceanalysis test step.

        :return: New analysis job traceanalysis test step
        :rtype: :class:`.TsAnalysisJob`
        
        """
        callResult = self._Call("CreateTsAnalysisJob", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAnalysisJob
        return classInstance(self._xmlRpc, objId)


    def CreateTsAssertion(self):
        """
        Creates an assertion test step.

        :return: New assertion test step
        :rtype: :class:`.TsAssertion`
        
        """
        callResult = self._Call("CreateTsAssertion", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAssertion
        return classInstance(self._xmlRpc, objId)


    def CreateTsBitExtract(self):
        """
        Creates a bit extract utility test step. Make sure to add this test step to a parent and
        set the variable name using SetSaveInVariableName().

        :return: New bit extract utility test step
        :rtype: :class:`.TsBitExtract`
        
        """
        callResult = self._Call("CreateTsBitExtract", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBitExtract
        return classInstance(self._xmlRpc, objId)


    def CreateTsBlock(self):
        """
        Creates a block utility test step. Other test steps can be added to the block.

        :return: New block utility test step
        :rtype: :class:`.TsBlock`
        
        """
        callResult = self._Call("CreateTsBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBlock
        return classInstance(self._xmlRpc, objId)


    def CreateTsBreak(self):
        """
        Creates a break utility test step.

        :return: New break utility test step
        :rtype: :class:`.TsBreak`
        
        """
        callResult = self._Call("CreateTsBreak", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBreak
        return classInstance(self._xmlRpc, objId)


    def CreateTsBusFirstSignalCheck(self, mappingItem):
        """
        Creates a new check initial value test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusSignalMappingItem`
        :return: New check initial value test step
        :rtype: :class:`.TsBusFirstSignalCheck`
        
        """
        callResult = self._Call("CreateTsBusFirstSignalCheck", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusFirstSignalCheck
        return classInstance(self._xmlRpc, objId)


    def CreateTsBusMonitoringAliveCounter(self, mappingItem):
        """
        Creates a new bus monitoring alive counter test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusMonitoringMappingItem`
        :return: New bus monitoring alive counter test step
        :rtype: :class:`.TsBusMonitoringAliveCounter`
        
        """
        callResult = self._Call("CreateTsBusMonitoringAliveCounter", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringAliveCounter
        return classInstance(self._xmlRpc, objId)


    def CreateTsBusMonitoringChecksum(self, mappingItem):
        """
        Creates a new bus monitoring checksum test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusMonitoringMappingItem`
        :return: New bus monitoring checksum test step
        :rtype: :class:`.TsBusMonitoringChecksum`
        
        """
        callResult = self._Call("CreateTsBusMonitoringChecksum", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringChecksum
        return classInstance(self._xmlRpc, objId)


    def CreateTsBusMonitoringDlc(self, mappingItem):
        """
        Creates a new bus monitoring DLC test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusMonitoringMappingItem`
        :return: New bus monitoring DLC test step
        :rtype: :class:`.TsBusMonitoringDlc`
        
        """
        callResult = self._Call("CreateTsBusMonitoringDlc", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringDlc
        return classInstance(self._xmlRpc, objId)


    def CreateTsBusMonitoringFrameTiming(self, mappingItem):
        """
        Creates a new bus monitoring frame timing test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusMonitoringMappingItem`
        :return: New bus monitoring frame timing test step
        :rtype: :class:`.TsBusMonitoringFrameTiming`
        
        """
        callResult = self._Call("CreateTsBusMonitoringFrameTiming", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringFrameTiming
        return classInstance(self._xmlRpc, objId)


    def CreateTsCalculation(self):
        """
        Creates a calculation utility test step.

        :return: New calculation utility test step
        :rtype: :class:`.TsCalculation`
        
        """
        callResult = self._Call("CreateTsCalculation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCalculation
        return classInstance(self._xmlRpc, objId)


    def CreateTsChangeReportFolder(self):
        """
        Creates a new change report folder test step

        :return: New change report folder test step
        :rtype: :class:`.TsChangeReportFolder`
        
        """
        callResult = self._Call("CreateTsChangeReportFolder", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsChangeReportFolder
        return classInstance(self._xmlRpc, objId)


    def CreateTsClearFrameAndSignalBuffers(self, mappingItem):
        """
        Creates a new clear buffers for frame and signals test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.BusSignalGroupMappingItem`
        :return: New clear buffers for frame and signals test step
        :rtype: :class:`.TsClearFrameAndSignalBuffers`
        
        """
        callResult = self._Call("CreateTsClearFrameAndSignalBuffers", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsClearFrameAndSignalBuffers
        return classInstance(self._xmlRpc, objId)


    def CreateTsComment(self, comment=None):
        """
        Creates a comment utility test step. A comment and an evaluation can be set.

        :param comment: Text to be shown as comment
        :type comment: unicode
        :return: New comment utility test step
        :rtype: :class:`.TsComment`
        
        """
        callResult = self._Call("CreateTsComment", comment)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsComment
        return classInstance(self._xmlRpc, objId)


    def CreateTsContinue(self):
        """
        Creates a continue utility test step.

        :return: New continue utility test step
        :rtype: :class:`.TsContinue`
        
        """
        callResult = self._Call("CreateTsContinue", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsContinue
        return classInstance(self._xmlRpc, objId)


    def CreateTsEdiabas(self, mappingItem):
        """
        Creates a new ediabas test step

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.EdiabasVariableMappingItem`
        :return: New ediabas test step
        :rtype: :class:`.TsEdiabas`
        
        """
        callResult = self._Call("CreateTsEdiabas", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEdiabas
        return classInstance(self._xmlRpc, objId)


    def CreateTsEdiabasLockBlock(self):
        """
        Creates a new ediabas lock block test step

        :return: New ediabas lock block test step
        :rtype: :class:`.TsEdiabasLockBlock`
        
        """
        callResult = self._Call("CreateTsEdiabasLockBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEdiabasLockBlock
        return classInstance(self._xmlRpc, objId)


    def CreateTsEesError(self, mappingItem):
        """
        Creates a new ees error test step

        :param mappingItem: Mapping item
        :type mappingItem: :class:`.EesPinVariableMappingItem`
        :return: New ees error test step
        :rtype: :class:`.TsEesError`
        
        """
        callResult = self._Call("CreateTsEesError", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEesError
        return classInstance(self._xmlRpc, objId)


    def CreateTsEesErrorSet(self):
        """
        Creates a new ees error set test step

        :return: New ees error set test step
        :rtype: :class:`.TsEesErrorSet`
        
        """
        callResult = self._Call("CreateTsEesErrorSet", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEesErrorSet
        return classInstance(self._xmlRpc, objId)


    def CreateTsExit(self):
        """
        Creates an exit test step.

        :return: New exit test step
        :rtype: :class:`.TsExit`
        
        """
        callResult = self._Call("CreateTsExit", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsExit
        return classInstance(self._xmlRpc, objId)


    def CreateTsIfDef(self):
        """
        Creates an ifDef utility test step.

        :return: New ifDef utility test step
        :rtype: :class:`.TsIfDef`
        
        """
        callResult = self._Call("CreateTsIfDef", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsIfDef
        return classInstance(self._xmlRpc, objId)


    def CreateTsIfThenElse(self):
        """
        Creates an if-then-else utility test step that executes the contained test steps of the
        then branch or the else branch depending on the evaluation of the condition.

        :return: New if-then-else utility test step
        :rtype: :class:`.TsIfThenElse`
        
        """
        callResult = self._Call("CreateTsIfThenElse", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsIfThenElse
        return classInstance(self._xmlRpc, objId)


    def CreateTsImageDialog(self):
        """
        Creates a new image dialog test step

        :return: New image dialog test step
        :rtype: :class:`.TsImageDialog`
        
        """
        callResult = self._Call("CreateTsImageDialog", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsImageDialog
        return classInstance(self._xmlRpc, objId)


    def CreateTsInboxFetch(self):
        """
        Creates an inbox fetch utility test step. Make sure to add this test step to a parent and
        set the inbox name using SetInboxName().

        :return: New inbox fetch utility test step
        :rtype: :class:`.TsInboxFetch`
        
        """
        callResult = self._Call("CreateTsInboxFetch", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsInboxFetch
        return classInstance(self._xmlRpc, objId)


    def CreateTsInfoBlock(self):
        """
        Creates a new info block test step

        :return: New info block test step
        :rtype: :class:`.TsInfoBlock`
        
        """
        callResult = self._Call("CreateTsInfoBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsInfoBlock
        return classInstance(self._xmlRpc, objId)


    def CreateTsInputDialog(self):
        """
        Creates a new input dialog test step

        :return: New input dialog test step
        :rtype: :class:`.TsInputDialog`
        
        """
        callResult = self._Call("CreateTsInputDialog", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsInputDialog
        return classInstance(self._xmlRpc, objId)


    def CreateTsJob(self, mappingItem, generateInterface=True):
        """
        Creates a tool/port job test step.

        :param mappingItem: The mapping item pointing to the desired tool/port job
        :type mappingItem: :class:`.MappingItem`
        :param generateInterface: True if parameters and return should be added
               automatically based on the current testbench configuration
        :type generateInterface: boolean
        :return: New tool/port job test step
        :rtype: :class:`.TsJob`
        
        """
        callResult = self._Call("CreateTsJob", mappingItem, generateInterface)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsJob
        return classInstance(self._xmlRpc, objId)


    def CreateTsKeywordFromId(self, id, isEstablishTs=False):
        """
        Creates a keyword test step from a keyword id.

        :param id: Id to an existing keyword
        :type id: int

        :param isEstablishTs: True if an establish keyword test step shall be created, else False.
            Default is False.
        :type isEstablishTs: boolean

        :return: New keyword test step
        :rtype: :class:`.TsKeyword`


        
        """
        callResult = self._Call("CreateTsKeywordFromId", id, isEstablishTs)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeyword
        return classInstance(self._xmlRpc, objId)


    def CreateTsLoadEnvironment(self):
        """
        **for internal use only**

        Creates a load environment utility test step.

        :return: New load environment utility test step
        :rtype: :class:`.TsLoadEnvironment`
        
        """
        callResult = self._Call("CreateTsLoadEnvironment", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsLoadEnvironment
        return classInstance(self._xmlRpc, objId)


    def CreateTsLogFile(self):
        """
        Creates a new log file test step

        :return: New log file test step
        :rtype: :class:`.TsLogFile`
        
        """
        callResult = self._Call("CreateTsLogFile", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsLogFile
        return classInstance(self._xmlRpc, objId)


    def CreateTsLoop(self):
        """
        Creates a loop utility test step.

        :return: New loop utility test step
        :rtype: :class:`.TsLoop`
        
        """
        callResult = self._Call("CreateTsLoop", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsLoop
        return classInstance(self._xmlRpc, objId)


    def CreateTsMessageDialog(self):
        """
        Creates a new message dialog test step

        :return: New message dialog test step
        :rtype: :class:`.TsMessageDialog`
        
        """
        callResult = self._Call("CreateTsMessageDialog", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsMessageDialog
        return classInstance(self._xmlRpc, objId)


    def CreateTsMultiCheck(self):
        """
        Creates a Multi-Check utility test step

        :return: New Multi-Check test step
        :rtype: :class:`.TsMultiCheck`
        
        """
        callResult = self._Call("CreateTsMultiCheck", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsMultiCheck
        return classInstance(self._xmlRpc, objId)


    def CreateTsOutboxPost(self):
        """
        Creates an outbox post utility test step. Make sure to add this test step to a parent and
        set the outbox name using SetOutboxName().

        :return: New outbox fetch utility test step
        :rtype: :class:`.TsOutboxPost`
        
        """
        callResult = self._Call("CreateTsOutboxPost", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsOutboxPost
        return classInstance(self._xmlRpc, objId)


    def CreateTsPackage(self, pkgPath, packageLibraryAlias=None):
        """
        Creates a package call test step that executes the referenced package.

        :type pkgPath: string
        :param pkgPath: Relative path of the package to be called.
        :type packageLibraryAlias: string
        :param packageLibraryAlias: Package library alias, if the package is part of a library
        :return: New package test step
        :rtype: :class:`.TsPackage`
        
        """
        callResult = self._Call("CreateTsPackage", pkgPath, packageLibraryAlias)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def CreateTsParallelPackage(self, pkgPath, packageLibraryAlias=None):
        """
        Creates a parallel package call test step that executes the referenced package in
        parallel.

        :type pkgPath: string
        :param pkgPath: Relative path of the package to be called.
        :type packageLibraryAlias: string
        :param packageLibraryAlias: Package library alias, if the package is part of a library
        :return: New parallel package test step
        :rtype: :class:`.TsParallelPackage`
        
        """
        callResult = self._Call("CreateTsParallelPackage", pkgPath, packageLibraryAlias)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsParallelPackage
        return classInstance(self._xmlRpc, objId)


    def CreateTsPostconditionBlock(self):
        """
        Creates a postcondition block utility test step. Other test steps can be added to this block
        and will be executed as postcondition of the package.

        :return: New postcondition block test step
        :rtype: :class:`.TsPostconditionBlock`
        
        """
        callResult = self._Call("CreateTsPostconditionBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPostconditionBlock
        return classInstance(self._xmlRpc, objId)


    def CreateTsPreconditionBlock(self):
        """
        Creates a precondition block utility test step. Other test steps can be added to this block
        and will be executed as precondition of the package.

        :return: New precondition block test step
        :rtype: :class:`.TsPreconditionBlock`
        
        """
        callResult = self._Call("CreateTsPreconditionBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPreconditionBlock
        return classInstance(self._xmlRpc, objId)


    def CreateTsReactOn(self):
        """
        Creates a react-on utility test step.

        :return: New react-on utility test step
        :rtype: :class:`.TsReactOn`
        
        """
        callResult = self._Call("CreateTsReactOn", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReactOn
        return classInstance(self._xmlRpc, objId)


    def CreateTsRead(self, mappingItem):
        """
        Creates a read test step to read the values of the test quantity that is mapped to the
        mapping item.

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.MappingItem`
        :return: New read test step
        :rtype: :class:`.TsRead`
        
        """
        callResult = self._Call("CreateTsRead", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsRead
        return classInstance(self._xmlRpc, objId)


    def CreateTsReport(self):
        """
        Creates a new report test step

        :return: New report test step
        :rtype: :class:`.TsReport`
        
        """
        callResult = self._Call("CreateTsReport", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReport
        return classInstance(self._xmlRpc, objId)


    def CreateTsRestore(self, mappingItem):
        """
        Creates a restore test step to set the values of the test quantity that is mapped to the
        mapping item to the value it had when test execution started

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.MappingItem`
        :return: New restore test step
        :rtype: :class:`.TsRestore`
        
        """
        callResult = self._Call("CreateTsRestore", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsRestore
        return classInstance(self._xmlRpc, objId)


    def CreateTsReturn(self):
        """
        Creates a return utility test step.

        :return: New return utility test step
        :rtype: :class:`.TsReturn`
        
        """
        callResult = self._Call("CreateTsReturn", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReturn
        return classInstance(self._xmlRpc, objId)


    def CreateTsRttPackage(self, pkgPath, packageLibraryAlias=None):
        """
        Creates a parallel real-time package call test step that executes the referenced package
        in parallel on a real-time platform.

        :type pkgPath: string
        :param pkgPath: Relative path of the package to be called.
        :type packageLibraryAlias: string
        :param packageLibraryAlias: Package library alias, if the package is part of a library
        :return: New RTT package test step
        :rtype: :class:`.TsParallelRttPackage`
        
        """
        callResult = self._Call("CreateTsRttPackage", pkgPath, packageLibraryAlias)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsParallelRttPackage
        return classInstance(self._xmlRpc, objId)


    def CreateTsSelectList(self):
        """
        Creates a new select list test step

        :return: New select list test step
        :rtype: :class:`.TsSelectList`
        
        """
        callResult = self._Call("CreateTsSelectList", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSelectList
        return classInstance(self._xmlRpc, objId)


    def CreateTsSetTraceComment(self):
        """
        Creates a set trace comment utility test step.

        :return: New set trace comment utility test step
        :rtype: :class:`.TsSetTraceComment`
        
        """
        callResult = self._Call("CreateTsSetTraceComment", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSetTraceComment
        return classInstance(self._xmlRpc, objId)


    def CreateTsStartSimulation(self):
        """
        **for internal use only**

        Creates a start simulation utility test step.

        :return: New start simulation utility test step
        :rtype: :class:`.TsStartSimulation`
        
        """
        callResult = self._Call("CreateTsStartSimulation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStartSimulation
        return classInstance(self._xmlRpc, objId)


    def CreateTsStartStimulus(self):
        """
        Creates a start stimulus utility test step.

        :return: New start stimulus utility test step
        :rtype: :class:`.TsStartStimulus`
        
        """
        callResult = self._Call("CreateTsStartStimulus", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStartStimulus
        return classInstance(self._xmlRpc, objId)


    def CreateTsStartTrace(self):
        """
        Creates a start trace utility test step.

        :return: New start trace utility test step
        :rtype: :class:`.TsStartTrace`
        
        """
        callResult = self._Call("CreateTsStartTrace", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStartTrace
        return classInstance(self._xmlRpc, objId)


    def CreateTsStopSimulation(self):
        """
        **for internal use only**

        Creates a stop simulation utility test step.

        :return: New stop simulation utility test step
        :rtype: :class:`.TsStopSimulation`
        
        """
        callResult = self._Call("CreateTsStopSimulation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStopSimulation
        return classInstance(self._xmlRpc, objId)


    def CreateTsStopStimulus(self):
        """
        Creates a stop stimulus utility test step.

        :return: New stop stimulus utility test step
        :rtype: :class:`.TsStopStimulus`
        
        """
        callResult = self._Call("CreateTsStopStimulus", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStopStimulus
        return classInstance(self._xmlRpc, objId)


    def CreateTsStopTrace(self):
        """
        Creates a stop trace utility test step.

        :return: New stop trace utility test step
        :rtype: :class:`.TsStopTrace`
        
        """
        callResult = self._Call("CreateTsStopTrace", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStopTrace
        return classInstance(self._xmlRpc, objId)


    def CreateTsSwitchCase(self):
        """
        Creates a switch-case utility test step.

        :return: New switch-case utility test step
        :rtype: :class:`.TsSwitchCase`
        
        """
        callResult = self._Call("CreateTsSwitchCase", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSwitchCase
        return classInstance(self._xmlRpc, objId)


    def CreateTsSwitchDefCase(self):
        """
        Creates a switchdef-case utility test step.

        :return: New switchdef-case utility test step
        :rtype: :class:`.TsSwitchDefCase`
        
        """
        callResult = self._Call("CreateTsSwitchDefCase", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSwitchDefCase
        return classInstance(self._xmlRpc, objId)


    def CreateTsToDo(self):
        """
        Creates a ToDo utility test step that can be used to mark that something is still to
        do here.

        :return: New ToDo utility test step
        :rtype: :class:`.TsTodo`
        
        """
        callResult = self._Call("CreateTsToDo", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsTodo
        return classInstance(self._xmlRpc, objId)


    def CreateTsTraceStepResult(self):
        """
        Creates a trace step result traceanalysis test step.

        :return: New trace step result traceanalysi test step
        :rtype: :class:`.TsTraceStepResult`
        
        """
        callResult = self._Call("CreateTsTraceStepResult", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsTraceStepResult
        return classInstance(self._xmlRpc, objId)


    def CreateTsWait(self):
        """
        Creates a wait utility test step.

        :return: New wait utility test step
        :rtype: :class:`.TsWait`
        
        """
        callResult = self._Call("CreateTsWait", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWait
        return classInstance(self._xmlRpc, objId)


    def CreateTsWaitForUser(self):
        """
        Creates a wait for user utility test step.

        :return: New wait for user utility test step
        :rtype: :class:`.TsWaitForUser`
        
        """
        callResult = self._Call("CreateTsWaitForUser", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWaitForUser
        return classInstance(self._xmlRpc, objId)


    def CreateTsWrite(self, mappingItem):
        """
        Creates a write test step to write values in the test quantity that is mapped to the
        mapping item.

        :param mappingItem: The mapping item pointing to the desired test quantity
        :type mappingItem: :class:`.MappingItem`
        :return: New write test step
        :rtype: :class:`.TsWrite`
        
        """
        callResult = self._Call("CreateTsWrite", mappingItem)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWrite
        return classInstance(self._xmlRpc, objId)



class AlmRepresentation(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(AlmRepresentation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.AlmRepresentation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetEnglishDescription(self):
        """
        **for internal use only**

        :return: The English description
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEnglishExpectation(self):
        """
        **for internal use only**

        :return: The English expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetGermanDescription(self):
        """
        **for internal use only**

        :return: The German description
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGermanExpectation(self):
        """
        **for internal use only**

        :return: The German expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetTestcaseLanguage(self):
        """
        **for internal use only**

        :return: The testcase language that was active when this object has been created
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestcaseLanguage", )

        if callResult is None:
            return None

        return callResult


class EdiabasArgument(ObjectApiProxy):
    """

    API-Fassade eines Ediabas-Arguments.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(EdiabasArgument, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.EdiabasArgument`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = EdiabasArgument
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the argument.

        :return: Comment of the argument
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the argument.

        :return: Name of the argument
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterExpression(self):
        """
        Returns the parameter expression of the argument.

        :return: Parameter expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterExpression", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type of the argument.

        :return: Type of the argument
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def SetParameterExpression(self, expr):
        """
        Sets the parameter expression of the argument.
        Mind that by changing parameters of arguments the result list may change as well. Make sure
        you are working with the latest result list by calling GetResults after all arguments are
        set.

        :param expr: Parameter expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetParameterExpression", expr)



class EdiabasResult(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(EdiabasResult, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.EdiabasResult`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = EdiabasResult
        return classInstance(self._xmlRpc, objId)


    def DeactivateEdiabasOption(self):
        """
        Deactivates the ediabas option.
        
        """
        callResult = self._Call("DeactivateEdiabasOption", )


    def DeactivateSaveIn(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def GetComment(self):
        """
        Returns the comment of the result.

        :return: Comment of the result
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetExpectation(self):
        """
        Returns the expectation of the result.

        :return: Expectation of the result
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the name of the result.

        :return: Name of the result
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOptionHighlightGroup(self):
        """
        Returns the highlight group option of the 'GROUP' option type.

        :return: Whether the group of the result set will be highlighted when successful.
        :rtype: boolean
        
        """
        callResult = self._Call("GetOptionHighlightGroup", )

        if callResult is None:
            return None

        return callResult

    def GetOptionResultSet(self):
        """
        Returns the result set of the 'CHOICE' option type. That result set must fulfill the
        expectation.

        :return: Result set
        :rtype: integer
        
        """
        callResult = self._Call("GetOptionResultSet", )

        if callResult is None:
            return None

        return callResult

    def GetOptionType(self):
        """
        Returns the option type of the result.

        :return: Option type. One of [u'ALL', u'EXIST', u'CHOICE', u'GROUP'].
            'ALL':     Must be fulfilled in every result set
            'EXIST':   Must be fulfilled in at least one result set
            'CHOICE':  Must be fulfilled in the selected result set
            'GROUP':   Must be fulfilled together with other results
        :rtype: unicode
        
        """
        callResult = self._Call("GetOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type of the result.

        :return: Type of the result
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def IsCheckTypeEnabled(self):
        """
        Returns whether the type will be checked or not.

        :return: Whether the type will be checked or not. Returns None if no ediabas option is set.
        :rtype: boolean
        
        """
        callResult = self._Call("IsCheckTypeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsChecked(self):
        """
        Returns whether the result is checked or not.

        :return: Whether the result is checked or not (optional, defaults to True)
        :rtype: boolean
        
        """
        callResult = self._Call("IsChecked", )

        if callResult is None:
            return None

        return callResult

    def IsDynamic(self):
        """
        Returns whether the result is dynamic or not.

        :return: Whether the result is dynamic or not.
        :rtype: boolean
        
        """
        callResult = self._Call("IsDynamic", )

        if callResult is None:
            return None

        return callResult

    def IsSelfDefined(self):
        """
        Returns whether the result is self defined or not.

        :return: Whether the result is self defined or not.
        :rtype: boolean
        
        """
        callResult = self._Call("IsSelfDefined", )

        if callResult is None:
            return None

        return callResult

    def SetCheckType(self, checkType=True):
        """
        Sets whether the type will be checked or not.

        :param checkType: Whether the type will be checked or not. Optional, defaults to True.
        :type checkType: boolean
        :raises: ApiError: The EDIABAS option is not defined
        
        """
        callResult = self._Call("SetCheckType", checkType)


    def SetChecked(self, checked=True):
        """
        Sets whether the result is checked or not.

        :param checked: Whether the result is checked or not (optional, defaults to True)
        :type checked: boolean
        
        """
        callResult = self._Call("SetChecked", checked)


    def SetComment(self, comment):
        """
        Sets the comment of the result. This can only be used with self defined results. Use
        IsSelfDefined to check whether a result is self defined.

        :param comment: Result comment
        :type comment: unicode
        :raises: ApiError: If called on a result that is not self defined.
        
        """
        callResult = self._Call("SetComment", comment)


    def SetExpectation(self, exp):
        """
        Sets the expectation of the result.

        :param exp: Expectation of the result
        :type exp: :class:`.Expectation`
        :raises: ApiError: If the parameter exp is not if type Expectation.
        
        """
        callResult = self._Call("SetExpectation", exp)


    def SetOptionHighlightGroup(self, highlight=True):
        """
        Sets the highlight group option of the 'GROUP' option type. The option type will be set to
        'GROUP' if it is not already.

        :param highlight: Whether the group of the result set will be highlighted when successful.
        :type highlight: boolean
        
        """
        callResult = self._Call("SetOptionHighlightGroup", highlight)


    def SetOptionResultSet(self, resultSet):
        """
        Sets the result set of the 'CHOICE' option type. That result set must fulfill the
        expectation. The option type will be set to 'CHOICE' if it is not already.

        :param resultSet: Result set
        :type resultSet: integer
        :raises: ApiError: If the parameter resultSet is not >=0.
        
        """
        callResult = self._Call("SetOptionResultSet", resultSet)


    def SetOptionType(self, optionType):
        """
        Sets the option type of the result. Existing option settings like the expression and type
        checking will be kept. The Ediabas option will be activated if it is not already.

        :param optionType: Option type. Must be one of [u'ALL', u'EXIST', u'CHOICE', u'GROUP'].
            'ALL':     Must be fulfilled in every result set
            'EXIST':   Must be fulfilled in at least one result set
            'CHOICE':  Must be fulfilled in the selected result set
            'GROUP':   Must be fulfilled together with other results
        :type optionType: unicode
        :raises: ApiError: If the parameter optionType is not one of
            [u'ALL', u'EXIST', u'CHOICE', u'GROUP'].
        
        """
        callResult = self._Call("SetOptionType", optionType)


    def SetSaveInVariableName(self, varName):
        """
        Sets the save in variable name.

        :param varName: Variable name
        :type varName: unicode
        :raises: ApiError: If the test step is not added to a package.
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetType(self, resType):
        """
        Sets the type of the result. This can only be used with self defined results. Use
        IsSelfDefined to check whether a result is self defined.

        :param resType: Result type. Must be one of [u'binary', u'string', u'char',
            u'unsigned char', u'int', u'unsigned int', u'long', u'unsigned long', u'real']
        :type resType: unicode
        :raises: ApiError:  - When the result is not a self defined result.
                            - When the result type is invalid.
        
        """
        callResult = self._Call("SetType", resType)



class Argument(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Argument, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Argument`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetIdentifier(self):
        """
        Returns the identifier of the argument.

        :return: Identifier of argument.
        :rtype: unicode
        
        """
        callResult = self._Call("GetIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self):
        """
        Returns the unit of the argument.

        :return: Unit string of argument or None if no unit information is attached.
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", )

        if callResult is None:
            return None

        return callResult

    def GetValueExpression(self):
        """
        Returns the value expression of the argument.

        :return: Expression of argument.
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueExpression", )

        if callResult is None:
            return None

        return callResult

    def SetUnit(self, unit):
        """
        Sets the unit of the argument.

        :param unit: Unit string of argument. Use None to remove unit information.
        :type unit: unicode
        
        """
        callResult = self._Call("SetUnit", unit)


    def SetValueExpression(self, value):
        """
        Sets the value expression of the argument.

        :param value: Expression of argument.
        :type value: unicode
        
        """
        callResult = self._Call("SetValueExpression", value)


    def SetValueRangeExpression(self, minValue, maxValue, stepSize, includeMinValue=True, includeMaxValue=False):
        """
        Special method to define a range as value expression for the argument.

        :param minValue: Expression of the lower limit
        :type minValue: unicode
        :param maxValue: Expression of the upper limit
        :type maxValue: unicode
        :param stepSize: Expression of the step size
        :type stepSize: unicode
        :param includeMinValue: If True (default) the minimum value is a candidate for the random
                                value at runtime. If False it is not a possible candidate to pick
                                from.
        :type includeMinValue: boolean
        :param includeMaxValue: If True the maximum value is a candidate for the random value at
                                runtime; if False (default) it is not.
        :type includeMaxValue: boolean
        
        """
        callResult = self._Call("SetValueRangeExpression", minValue, maxValue, stepSize, includeMinValue, includeMaxValue)



class Return(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Return, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Return`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateSaveIn(self):
        """
        Deactivates the return's save in property, so the value will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def GetExpectation(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetIdentifier(self):
        """
        Returns the identifier of the argument.

        :return: Identifier of return.
        :rtype: unicode
        
        """
        callResult = self._Call("GetIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the currently selected variable to save the return value.

        :return: The variable's name or None if return value is not saved to a variable by the
            keyword test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self):
        """
        Returns the unit of the return.

        :return: Unit string of return or None if no unit information is attached.
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", )

        if callResult is None:
            return None

        return callResult

    def SetExpectation(self, expectation):
        """
        Sets the expectation in the evaluation of the test step. The expectation will be
        activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        :raise ValueError: If the expectation is not of type NumericExpectation or StringExpectation
        
        """
        callResult = self._Call("SetExpectation", expectation)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing data by the return. The variable
        will be created automatically if it does not already exist in the package where the return
        is placed in.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: unicode
        :raise ApiError: If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetUnit(self, unit):
        """
        Sets the unit of the return.

        :param unit: Unit string of return. Use None to remove unit information.
        :type unit: unicode
        
        """
        callResult = self._Call("SetUnit", unit)



class TraceFileApi(ObjectApiProxy):
    """

    API to access trace files
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceFileApi, self).__init__(xmlRpc, objId)



    def OpenTraceFile(self, filename):
        """
        Opens an existing recording file.

        :param filename: Name of the trace file to open
        :type filename: unicode
        :return: Trace file
        :rtype: :class:`.TraceFile`
        
        """
        callResult = self._Call("OpenTraceFile", filename)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceFile
        return classInstance(self._xmlRpc, objId)



class TraceFile(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceFile, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TraceFile`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceFile
        return classInstance(self._xmlRpc, objId)


    def GetDeviceByName(self, name):
        """
        Returns the device for the given name.
        
        :param name: The device name.
        :type name: unicode
        
        :return: The found device
        :rtype: :class:`.Device`
        
        """
        callResult = self._Call("GetDeviceByName", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = Device
        return classInstance(self._xmlRpc, objId)


    def GetDeviceNames(self):
        """
        Returns a list with all device names.
 
        :return: The device names
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetDeviceNames", )

        if callResult is None:
            return None

        return callResult

    def GetDevices(self):
        """
        Returns a list of all devices. A device object can be used to access recording infos.
        
        :return: List of devices.
        :rtype: list<:class:`.Device`>
        
        """
        callResult = self._Call("GetDevices", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = Device
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetRecordingType(self):
        """
        Returns the recording type.

        :return: The recording type, e.g. 'CSV', 'MDF_VECTOR' etc.
        :rtype: unicode
        
        """
        callResult = self._Call("GetRecordingType", )

        if callResult is None:
            return None

        return callResult


class Device(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Device, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Device`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Device
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the name of the device.
        
        :return: The device name.
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingInfos(self):
        """
        Returns all recording infos for the device.
        
        :return: List of all recording infos.
        :rtype: list<:class:`.RecordingInfo`>
        
        """
        callResult = self._Call("GetRecordingInfos", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RecordingInfo
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetSignalNames(self):
        """
        Returns all signal names provided by the device.
        
        :return: List of all signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalNames", )

        if callResult is None:
            return None

        return callResult


class SettingsApi(ObjectApiProxy):
    """

    Reserved name for future implementation of an API to access settings files
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SettingsApi, self).__init__(xmlRpc, objId)




class ApiClient(ObjectApiProxy):
    """

    Entry point for object based api.
    
    """


    @property
    def ConfigurationApi(self):
        """
        Returns the ConfigurationApi namespace.

        :return: ConfigurationApi namespace
        :rtype: :class:`.ConfigurationApi`
        
        """
        return self.__ConfigurationApi

    @property
    def GlobalMappingApi(self):
        """
        Returns the GlobalMappingApi namespace.

        :return: GlobalMappingApi namespace
        :rtype: :class:`.GlobalMappingApi`
        
        """
        return self.__GlobalMappingApi

    @property
    def PackageApi(self):
        """
        Returns the PackageApi namespace.

        :return: PackageApi namespace
        :rtype: :class:`.PackageApi`
        
        """
        return self.__PackageApi

    @property
    def ParameterApi(self):
        """
        Returns the ParameterApi namespace.

        :return: ParameterApi namespace
        :rtype: :class:`.ParameterApi`
        
        """
        return self.__ParameterApi

    @property
    def ProjectApi(self):
        """
        Returns the ProjectApi namespace.

        :return: ProjectApi namespace
        :rtype: :class:`.ProjectApi`
        
        """
        return self.__ProjectApi

    @property
    def ReportApi(self):
        """
        Returns the ReportApi namespace.

        :return: ReportApi namespace
        :rtype: :class:`ApiClient.ReportApi`
        
        """
        return self.__ReportApi

    @property
    def SignalDescriptionApi(self):
        """
        Returns the SignalDescriptionApi namespace.

        :return: SignalDescriptionApi namespace
        :rtype: :class:`.SignalDescriptionApi`
        
        """
        return self.__SignalDescriptionApi

    @property
    def TraceFileApi(self):
        """
        Returns the TraceFileApi namespace.

        :return: TraceFileApi namespace
        :rtype: :class:`.TraceFileApi`
        
        """
        return self.__TraceFileApi

    @property
    def TraceStepTemplateApi(self):
        """
        Returns the TraceStepTemplateApi namespace.

        :return: TraceStepTemplateApi namespace
        :rtype: :class:`.TraceStepTemplateApi`
        
        """
        return self.__TraceStepTemplateApi

    def __init__(self, xmlRpc=None, objId=0):
        super(ApiClient, self).__init__(xmlRpc, objId)

        self.__ConfigurationApi = ConfigurationApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ConfigurationApi"))
        self.__GlobalMappingApi = GlobalMappingApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "GlobalMappingApi"))
        self.__PackageApi = PackageApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "PackageApi"))
        self.__ParameterApi = ParameterApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ParameterApi"))
        self.__ProjectApi = ProjectApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ProjectApi"))
        self.__ReportApi = ReportApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "ReportApi"))
        self.__SignalDescriptionApi = SignalDescriptionApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "SignalDescriptionApi"))
        self.__TraceFileApi = TraceFileApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "TraceFileApi"))
        self.__TraceStepTemplateApi = TraceStepTemplateApi(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "TraceStepTemplateApi"))


    def GetApplicationVersion(self):
        """
        Returns the version of ECU-TEST.

        :return: ECU-TEST version
        :rtype: unicode
        
        """
        callResult = self._Call("GetApplicationVersion", )

        if callResult is None:
            return None

        return callResult

    def GetClientVersion(self):
        """
        Returns the version of the object based api client.

        :return: client version
        :rtype: unicode
        
        """
        return u'7.1.0'


class TraceStepTemplatePythonEvent(TraceStepTemplate):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceStepTemplatePythonEvent, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TraceStepTemplatePythonEvent`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceStepTemplatePythonEvent
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace step template.

        :return: The Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEventFunctions(self):
        """
        Returns the functions associated with signal events, i.e. the next functions.
        
        :return: List of the event functions
        :rtype: list<:class:`.PythonEventFunction`>
        
        """
        callResult = self._Call("GetEventFunctions", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PythonEventFunction
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetFinalizeFunctionCode(self):
        """
        Returns the code used in the finalize function.
        
        :return: The finalize function code
        :rtype: unicode
        
        """
        callResult = self._Call("GetFinalizeFunctionCode", )

        if callResult is None:
            return None

        return callResult

    def GetInitFunctionCode(self):
        """
        Returns the code used in the init function.
        
        :return: The init function code
        :rtype: unicode
        
        """
        callResult = self._Call("GetInitFunctionCode", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace step template.
        
        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterDescriptions(self):
        """
        Returns the descriptions of all parameters of a trace step template.
        
        :return: The descriptions of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterDescriptions", )

        if callResult is None:
            return None

        return callResult

    def GetParameterDirections(self):
        """
        Returns the direction of all parameters of a trace step template.
    
        :return: The direction of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterDirections", )

        if callResult is None:
            return None

        return callResult

    def GetParameterNames(self):
        """
        Returns the names of all parameters of a trace step template.
        
        :return: The names of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterNames", )

        if callResult is None:
            return None

        return callResult

    def GetParameterTypes(self):
        """
        Returns the types of all parameters of a trace step template.
        
        :return: The types of all parameters
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterTypes", )

        if callResult is None:
            return None

        return callResult

    def GetSignalDescriptions(self):
        """
        Returns the descriptions of all signals of a trace step template.
        
        :return: The Descriptions of all signals
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalDescriptions", )

        if callResult is None:
            return None

        return callResult

    def GetSignalDirections(self):
        """
        Returns the direction of all signals of a trace step template.
        
        :return: The direction of all signals
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalDirections", )

        if callResult is None:
            return None

        return callResult

    def GetSignalNames(self):
        """
        Returns the names of all signals of the trace step template.

        :return: The Names of all signals
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetSignalNames", )

        if callResult is None:
            return None

        return callResult

    def GetSignalOptionalFlags(self):
        """
        Returns the "is optional" flags of all signals of a trace step template.

        :return: The "is optional" flags of all signals
        :rtype: list<boolean>
        
        """
        callResult = self._Call("GetSignalOptionalFlags", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the specific type of the trace step template, i.e.

        * "TraceStepTemplatePythonEvent"
        * "TraceStepTemplatePythonEventDeprecated"
        * "TraceStepTemplatePythonStream"
        * "TraceStepTemplateTimingDiagram"
        * "TraceStepTemplateLogic"
        * "TraceStepTemplateInternal"
        * "TraceStepTemplateMissing"
        * "TraceStepTemplateBroken"
        
        If the particular type cannot be resolved, the method will return

        * "TraceStepTemplate"
        
        :return: The type of the template 
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def IsMissing(self):
        """
        Returns whether the trace step template represents a missing trace step template.

        :note: This status is set initially and will not be changed if the trace step template
               becomes available later on. You need to close and re-open the package,
               obtain the trace step from the re-opened package using
               :meth:`Package.GetTraceAnalyses <.ApiClient.Package.Package.GetTraceAnalyses>`,
               :meth:`.TraceStepContainer.GetTraceSteps`, etc.,
               and call :meth:`.TemplateBasedTraceStep.GetTemplate` on the new instance.

        :return: True if the file of the trace step template is not found
        :rtype: boolean
        
        """
        callResult = self._Call("IsMissing", )

        if callResult is None:
            return None

        return callResult


class ReportProject(ReportProjectElement):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportProject, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportProject`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportProject
        return classInstance(self._xmlRpc, objId)


    def GetAttributes(self):
        """
        Returns all project attributes

        :return: Dictionary of project attributes
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetElementName(self):
        """
        Returns the name of the project element.

        :return: Element name
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements. 
        
        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetResult(self):
        """
        Returns the result of the project Element.

        :return: Project element result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult


class ReportFolderElement(ReportProjectElement):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportFolderElement, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportFolderElement`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportFolderElement
        return classInstance(self._xmlRpc, objId)


    def GetElementName(self):
        """
        Returns the name of the project element.

        :return: Element name
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements. 
        
        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetResult(self):
        """
        Returns the result of the project Element.

        :return: Project element result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult


class ReportParameterizedPackage(ReportProjectElement):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportParameterizedPackage, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportParameterizedPackage`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportParameterizedPackage
        return classInstance(self._xmlRpc, objId)


    def GetElementName(self):
        """
        Returns the name of the project element.

        :return: Element name
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements. 
        
        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetResult(self):
        """
        Returns the result of the project Element.

        :return: Project element result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult


class ReportConfigurationChange(ReportProjectElement):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportConfigurationChange, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportConfigurationChange`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportConfigurationChange
        return classInstance(self._xmlRpc, objId)


    def GetElementName(self):
        """
        Returns the name of the project element.

        :return: Element name
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements. 
        
        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetResult(self):
        """
        Returns the result of the project Element.

        :return: Project element result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult


class ReportPackage(ReportProjectElement):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportPackage, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportPackage`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the package or an empty string if it was not aborted.

        :return: Abort code of the package
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the package or an empty string if it was not aborted.

        :return: Abort comment of the package
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetAttributes(self):
        """
        Returns all package attributes

        :return: Dictionary of package attributes
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the package.

        :return: Comment of the package
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetDuration(self):
        """
        Returns the duration of the test execution.

        :return: Execution duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetElementName(self):
        """
        Returns the project element name.

        :return: Name of the project element
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetExecutionTime(self):
        """
        Returns the test execution date and time as string representation.

        :return: Execution time
        :rtype: unicode
        
        """
        callResult = self._Call("GetExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the filename of the package which corresponds to the column 'Activity'
        in the project summary.

        :return: Name of the package file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the package name.

        :return: Package name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the original total test result.

        :return: Original total test result
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetParameterDescription(self, name):
        """
        Returns the description of the parameter specified by the given name.

        :param name: Name of the parameter
        :type name: unicode
        :return: Description of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterDescription", name)

        if callResult is None:
            return None

        return callResult

    def GetParameterInitialValue(self, name):
        """
        Returns the initial value of the parameter specified by the given name.

        :param name: Name of the parameter
        :type name: unicode
        :return: Initial value of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterInitialValue", name)

        if callResult is None:
            return None

        return callResult

    def GetParameterNames(self):
        """
        Returns a list of parameter names.

        :return: List of names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetParameterNames", )

        if callResult is None:
            return None

        return callResult

    def GetParameterValue(self, name):
        """
        Returns the latest value of the parameter specified by the given name.

        :param name: Name of the parameter
        :type name: unicode
        :return: Value of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterValue", name)

        if callResult is None:
            return None

        return callResult

    def GetProjectComponentName(self):
        """
        Returns the project element name.

        :return: Name of the project element
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Use :meth:`~ReportPackage.GetElementName` instead.
        """
        callResult = self._Call("GetProjectComponentName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements.

        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetReportItemId(self):
        """
        Returns the ReportItem Id of the package.

        :return: ReportItem Id
        :rtype: int
        
        """
        callResult = self._Call("GetReportItemId", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the package result.

        :return: Package result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetRevalComments(self):
        """
        Returns all revalution comments of the package.

        :return: List of revaluation comments
        :rtype: list <:class:`.RevaluationComment`>
        
        """
        callResult = self._Call("GetRevalComments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RevaluationComment
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTestCase(self):
        """
        Returns the test case of the package.

        :return: Test case of the package
        :rtype: :class:`.ReportTestCase`
        
        """
        callResult = self._Call("GetTestCase", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportTestCase
        return classInstance(self._xmlRpc, objId)


    def GetTestManagementId(self):
        """
        Returns the corresponding testmanagement Id.

        :return: Testmanagement Id or an empty string if no Id defined.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestScriptId(self):
        """
        Returns the corresponding testscript-id.

        :return: Testscript-id or an empty string if no id defined.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestScriptId", )

        if callResult is None:
            return None

        return callResult

    def GetTraceAnalysisJobs(self):
        """
        Returns a list of the analysis jobs of the package.

        :return: List of analysis jobs
        :rtype: list <:class:`.ReportAnalysisJob`>
        
        """
        callResult = self._Call("GetTraceAnalysisJobs", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ReportAnalysisJob
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUserDefinedData(self):
        """
        Returns the user defined report information.

        :return: Name and value of the user defined information.
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetUserDefinedData", )

        if callResult is None:
            return None

        return callResult

    def IsSkipped(self):
        """
        Returns True if the package was skipped.

        :return: True if skipped
        :rtype: bool
        
        """
        callResult = self._Call("IsSkipped", )

        if callResult is None:
            return None

        return callResult


class ReportTestStep(ReportItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportTestStep, self).__init__(xmlRpc, objId)



    def AddRevalComment(self, author, comment, revaluation=None):
        """
        Add a revaluation comment to the test step.
        
        :param author: author of the comment
        :type author: unicode
        :param comment: text of the comment. Must be at least 10 characters
        :type comment: unicode
        :param revaluation: "NONE", "SUCCESS", "INCONCLUSIVE", "FAILED" or "ERROR"; 
                            None to just add a comment without changing the result
        :type revaluation: unicode
        
        """
        callResult = self._Call("AddRevalComment", author, comment, revaluation)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportTestStep`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportTestStep
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the report item.

        :return: Abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the report item.

        :return: Abort comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetAbsoluteTime(self):
        """
        Returns the content of the 'Time (absolute)' column.

        :return: Content of the 'Time (absolute)' column
        :rtype: float
        
        """
        callResult = self._Call("GetAbsoluteTime", )

        if callResult is None:
            return None

        return callResult

    def GetActivity(self):
        """
        Returns the activity part of the content of the 'Activity/Name' column.

        :return: Activity part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetActivity", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the content of the 'Comment' column.

        :return: Content of the 'Comment' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetExpectedValue(self):
        """
        Returns the content of the 'Expected value' column.
        :return: Content of the 'Expected value' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectedValue", )

        if callResult is None:
            return None

        return callResult

    def GetId(self):
        """
        Returns the Id of the report item.

        :return: Id of the report item
        :rtype: int
        
        """
        callResult = self._Call("GetId", )

        if callResult is None:
            return None

        return callResult

    def GetMappingTarget(self):
        """
        Returns the content of the 'Mapping target' column.

        :return: Content of the 'Mapping target' column
        :rtype: unicode
        
.. deprecated:: 6.6.1
      For some test steps there may exist multiple mapping targets. Use :meth:`.ReportTestStep.GetMappingTargets` instead.
        """
        callResult = self._Call("GetMappingTarget", )

        if callResult is None:
            return None

        return callResult

    def GetMappingTargets(self):
        """
        Returns a list with the contents of the 'Mapping target' column.

        :return: Content of the 'Mapping target' column
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetMappingTargets", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name part of the content of the 'Activity/Name' column.

        :return: Name part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetNestingLevel(self):
        """
        Returns the nesting depth.

        :return: Nesting depth
        :rtype: int
        
        """
        callResult = self._Call("GetNestingLevel", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the content of the 'Original evaluation' column.

        :return: Content of the 'Original evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetParentId(self):
        """
        Returns the Id of the parent report item.

        :return: Id of the parent report item
        :rtype: int
        
        """
        callResult = self._Call("GetParentId", )

        if callResult is None:
            return None

        return callResult

    def GetPosition(self):
        """
        Returns the position of the test step within the test case.

        :return: position within the test case
        :rtype: int
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetRelativeTime(self):
        """
        Returns the content of the 'Time [s]' column.

        :return: Content of the 'Time [s]' column
        :rtype: float
        
        """
        callResult = self._Call("GetRelativeTime", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the content of the 'Evaluation' column.

        :return: Content of the 'Evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetRevalComments(self):
        """
        Returns all revalution comments of the test step.

        :return: List of revaluation comments
        :rtype: list <:class:`.RevaluationComment`>
        
        """
        callResult = self._Call("GetRevalComments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RevaluationComment
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTags(self):
        """
        Returns all tags associated with this report entry.
        
        :return: Tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self):
        """
        Returns all direct child test steps of the test step. If the test step is no container an
        empty list will be returned.

        :return: List of test step results
        :rtype: list <:class:`.ReportTestStep`>
        
        """
        callResult = self._Call("GetTestSteps", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ReportTestStep
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTime(self):
        """
        Returns the string for the relative timestamp if available, else the absolute timestamp.

        :return: Either relative or absolute timestamp, depending on availability
        :rtype: float
        
.. deprecated:: 7.1.0
      Use :meth:`.GetRelativeTime` and :meth:`.GetAbsoluteTime` instead.
        """
        callResult = self._Call("GetTime", )

        if callResult is None:
            return None

        return callResult

    def GetUserDefinedReportDetails(self):
        """
        Returns a list of all report details defined by the user during test execution. Each item
        in the list is a tuple, representing a line within the report details.
        The header line displayed in the report is not included in the returned list.

        :return: A list of tuples, each inner list representing a line within the report details
        :rtype: list<list<unicode>>
        
        """
        callResult = self._Call("GetUserDefinedReportDetails", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self):
        """
        Returns the content of the 'Value' column.

        :return: Content of the 'Value' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetValue", )

        if callResult is None:
            return None

        return callResult

    def HasTag(self, tagName):
        """
        Checks whether this report item has the specified tag
        
        :param tagName: tag to check for
        :type tagName: unicode
        :return: whether this report item has the specified tag
        :rtype: bool
        
        """
        callResult = self._Call("HasTag", tagName)

        if callResult is None:
            return None

        return callResult


class ReportAnalysisStep(ReportItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportAnalysisStep, self).__init__(xmlRpc, objId)



    def AddRevalComment(self, author, comment, revaluation=None):
        """
        Add a revaluation comment to the test step.
        
        :param author: author of the comment
        :type author: unicode
        :param comment: text of the comment. Must be at least 10 characters
        :type comment: unicode
        :param revaluation: "NONE", "SUCCESS", "INCONCLUSIVE", "FAILED" or "ERROR"; 
                            None to just add a comment without changing the result
        :type revaluation: unicode
        
        """
        callResult = self._Call("AddRevalComment", author, comment, revaluation)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportAnalysisStep`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the report item.

        :return: Abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the report item.

        :return: Abort comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetActivity(self):
        """
        Returns the activity part of the content of the 'Activity/Name' column.

        :return: Activity part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetActivity", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the content of the 'Description' column.

        :return: Content of the 'Description' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetId(self):
        """
        Returns the Id of the report item.

        :return: Id of the report item
        :rtype: int
        
        """
        callResult = self._Call("GetId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name part of the content of the 'Activity/Name' column.

        :return: Name part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetNestingLevel(self):
        """
        Returns the nesting depth.

        :return: Nesting depth
        :rtype: int
        
        """
        callResult = self._Call("GetNestingLevel", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the content of the 'Original evaluation' column.

        :return: Content of the 'Original evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetParameter(self):
        """
        Returns the content of the 'Parameter' column.

        :return: Content of the 'Parameter' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameter", )

        if callResult is None:
            return None

        return callResult

    def GetParentId(self):
        """
        Returns the Id of the parent report item.

        :return: Id of the parent report item
        :rtype: int
        
        """
        callResult = self._Call("GetParentId", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the content of the 'Evaluation' column.

        :return: Content of the 'Evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetResultText(self):
        """
        Returns text illustrated in the trace step's report details below 'result'.

        :return: The result text if existing, else an empty string
        :rtype: unicode
        
        """
        callResult = self._Call("GetResultText", )

        if callResult is None:
            return None

        return callResult

    def GetRevalComments(self):
        """
        Returns all revalution comments of the test step.

        :return: List of revaluation comments
        :rtype: list <:class:`.RevaluationComment`>
        
        """
        callResult = self._Call("GetRevalComments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RevaluationComment
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTags(self):
        """
        Returns all tags associated with this report entry.
        
        :return: Tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self):
        """
        Returns all direct child trace steps of this step. If the trace step 
        is no container an empty list will be returned.

        :return: List of trace steps
        :rtype: list <:class:`.ReportAnalysisStep`>
        
        """
        callResult = self._Call("GetTraceSteps", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def HasTag(self, tagName):
        """
        Checks whether this report item has the specified tag
        
        :param tagName: tag to check for
        :type tagName: unicode
        :return: whether this report item has the specified tag
        :rtype: bool
        
        """
        callResult = self._Call("HasTag", tagName)

        if callResult is None:
            return None

        return callResult

    def IsTemplateBasedTraceStep(self):
        """
        Returns whether the trace step is based on a template.
        
        :return: True if trace step is based on a template
        :rtype: bool
        
        """
        callResult = self._Call("IsTemplateBasedTraceStep", )

        if callResult is None:
            return None

        return callResult


class ConstantSegment(SignalSegment):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ConstantSegment, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ConstantSegment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ConstantSegment
        return classInstance(self._xmlRpc, objId)


    def GetDuration(self):
        """
        Returns the duration of the segment

        :return: duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self):
        """
        Returns the amplitude of the segment

        :return: amplitude
        :rtype: float
        
        """
        callResult = self._Call("GetValue", )

        if callResult is None:
            return None

        return callResult

    def SetDuration(self, duration):
        """
        Sets the duration of the segment

        :param duration: duration in seconds
        :type duration: float
        
        """
        callResult = self._Call("SetDuration", duration)


    def SetValue(self, value):
        """
        Sets the amplitude of the segment

        :param value: amplitude
        :type value: float
        
        """
        callResult = self._Call("SetValue", value)



class RampSegment(SignalSegment):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(RampSegment, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.RampSegment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = RampSegment
        return classInstance(self._xmlRpc, objId)


    def GetDuration(self):
        """
        Returns the duration of the segment

        :return: duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetStartValue(self):
        """
        Returns the amplitude of the segment at the start

        :return: amplitude
        :rtype: float
        
        """
        callResult = self._Call("GetStartValue", )

        if callResult is None:
            return None

        return callResult

    def GetStopValue(self):
        """
        Returns the amplitude of the segment at the end

        :return: amplitude
        :rtype: float
        
        """
        callResult = self._Call("GetStopValue", )

        if callResult is None:
            return None

        return callResult

    def SetDuration(self, duration):
        """
        Sets the duration of the segment

        :param duration: duration in seconds
        :type duration: float
        
        """
        callResult = self._Call("SetDuration", duration)


    def SetStartValue(self, startValue):
        """
        Sets the amplitude of the segment at the start

        :param startValue: amplitude
        :type startValue: float
        
        """
        callResult = self._Call("SetStartValue", startValue)


    def SetStopValue(self, stopValue):
        """
        Sets the amplitude of the segment at the end

        :param stopValue: amplitude
        :type stopValue: float
        
        """
        callResult = self._Call("SetStopValue", stopValue)



class SegmentSignal(Signal):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SegmentSignal, self).__init__(xmlRpc, objId)



    def AppendSegment(self, segment):
        """
        Append a signal segment as last element.

        :param segment: Signal segment
        :type segment: :class:`.SignalSegment`
        
        """
        callResult = self._Call("AppendSegment", segment)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SegmentSignal`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SegmentSignal
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the name of the signal

        :return: Signal name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult


class SignalReferenceSegment(SignalSegment):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalReferenceSegment, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.SignalReferenceSegment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalReferenceSegment
        return classInstance(self._xmlRpc, objId)


    def GetDataSignalName(self):
        """
        Returns the name of the data signal

        :return: Name of data signal
        :rtype: unicode
        
        """
        callResult = self._Call("GetDataSignalName", )

        if callResult is None:
            return None

        return callResult

    def GetTimeSignalName(self):
        """
        Returns the name of the time signal

        :return: Name of time signal
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeSignalName", )

        if callResult is None:
            return None

        return callResult


class Common(MappingFiles):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Common, self).__init__(xmlRpc, objId)



    def AddMappingFile(self, filename):
        """
        Adds a mapping file to the list

        :param filename: Name of the mapping file
        :type filename: unicode
        
        """
        callResult = self._Call("AddMappingFile", filename)


    def ClearMappingFiles(self):
        """
        Clears all entries from the mapping file list.
        
        """
        callResult = self._Call("ClearMappingFiles", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Common`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Common
        return classInstance(self._xmlRpc, objId)


    def GetMappingFiles(self):
        """
        Returns the mapping files.

        :return: A list of all mapping files
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetMappingFiles", )

        if callResult is None:
            return None

        return callResult

    def GetTesterName(self):
        """
        Returns the name of the tester.

        :return: Name of tester to show in the test configuration file
        :rtype: unicode
        
        """
        callResult = self._Call("GetTesterName", )

        if callResult is None:
            return None

        return callResult

    def IsAutoLoadMapping(self):
        """
        Returns whether mapping files are automatically loaded from model directories.

        :return: True if mapping files are loaded automatically, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutoLoadMapping", )

        if callResult is None:
            return None

        return callResult

    def RemoveMappingFile(self, index):
        """
        Removes a mapping file from the list

        :param index: The index of the mapping file to remove
        :type index: int
        
        """
        callResult = self._Call("RemoveMappingFile", index)


    def SetAutoLoadMapping(self, value):
        """
        Decides whether mapping files are automatically loaded from model directories.

        :param value: True if the mapping files have to be loaded automatically, else False
        :type value: boolean
        
        """
        callResult = self._Call("SetAutoLoadMapping", value)


    def SetTesterName(self, testerName):
        """
        Sets the name of the tester. Via API only direct input is possible.

        :param testerName: Name of tester to show in the test configuration file
        :type testerName: unicode
        
        """
        callResult = self._Call("SetTesterName", testerName)



class GlobalMapping(Mapping):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(GlobalMapping, self).__init__(xmlRpc, objId)



    def AddItem(self, mappingItem):
        """
        Adds a mapping item to the mapping.

        :param mappingItem: The mapping item to be added
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("AddItem", mappingItem)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.GlobalMapping`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GlobalMapping
        return classInstance(self._xmlRpc, objId)


    def GetFilename(self):
        """
        Returns the path to the .xam file.

        :return: Path to the .xam file or None if mapping is not saved yet.
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetItemByName(self, name):
        """
        Searches the mapping for the mapping item by its name and returns it if existing.

        :param name: The name of the mapping item to be searched for
        :type name: unicode
        :return: mapping item with the given name or None if no such mapping item exists
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("GetItemByName", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetItems(self):
        """
        Returns a list of all the mapping items of the mapping.

        :return: List of all the mapping items of the mapping.
        :rtype: list <:class:`.MappingItem`>
        
        """
        callResult = self._Call("GetItems", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def HasItem(self, mappingItem):
        """
        Checks whether the given mapping item belongs to the mapping.

        :param mappingItem: The mapping item to be checked
        :type mappingItem: :class:`.MappingItem`
        :return: True if the given mapping item belongs to the mapping.
        :rtype: boolean
        
        """
        callResult = self._Call("HasItem", mappingItem)

        if callResult is None:
            return None

        return callResult

    def RemoveItemByName(self, name):
        """
        Removes a mapping item from the mapping.

        :param name: The name of the mapping item to be removed
        :type name: unicode
        
        """
        callResult = self._Call("RemoveItemByName", name)


    def ReplaceItem(self, mappingItem):
        """
        Replaces a mapping item from the mapping

        :param mappingItem: The new mapping item to replace an existing one of the same name
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("ReplaceItem", mappingItem)


    def Save(self, filename=''):
        """
        Saves the mapping space as an .xam file. Appends file ending if needed.

        :param filename: File name of the mapping file; Either absolute or relative to the
                         'Parameters' directory. If left out, use the existing file name and path
                         (from a previous call of :meth:`~GlobalMapping.Save` or
                         :meth:`.MappingApi.OpenMapping`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)



class BusMonitoringMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(BusMonitoringMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.BusMonitoringMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusMonitoringMappingItem
        return classInstance(self._xmlRpc, objId)


    def DeactivateCycleTime(self):
        """
        Deactivates the cycle option.
        
        """
        callResult = self._Call("DeactivateCycleTime", )


    def DeactivateDebounce(self):
        """
        Deactivates the debounce option.
        
        """
        callResult = self._Call("DeactivateDebounce", )


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetCycleTimeMax(self):
        """
        Returns the maximum cycle time in milliseconds.

        :return: Maximum cycle time in milliseconds
        :rtype: integer
        
        """
        callResult = self._Call("GetCycleTimeMax", )

        if callResult is None:
            return None

        return callResult

    def GetCycleTimeMin(self):
        """
        Returns the minimum cycle time in milliseconds.

        :return: Minimum cycle time in milliseconds
        :rtype: integer
        
        """
        callResult = self._Call("GetCycleTimeMin", )

        if callResult is None:
            return None

        return callResult

    def GetDebounceTime(self):
        """
        Returns the debounce time in milliseconds.

        :return: Debounce time in milliseconds
        :rtype: integer
        
        """
        callResult = self._Call("GetDebounceTime", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetCycleTimeMax(self, cycleTimeMax):
        """
        Sets the maximum cycle time in milliseconds.

        :param cycleTimeMax: Maximum cycle time in milliseconds
        :type cycleTimeMax: integer
        
        """
        callResult = self._Call("SetCycleTimeMax", cycleTimeMax)


    def SetCycleTimeMin(self, cycleTimeMin):
        """
        Sets the minimum cycle time in milliseconds.

        :param cycleTimeMin: Minimum cycle time in milliseconds
        :type cycleTimeMin: integer
        
        """
        callResult = self._Call("SetCycleTimeMin", cycleTimeMin)


    def SetDebounceTime(self, debounceTime):
        """
        Sets the debounce time in milliseconds.

        :param debounceTime: Debounce time in milliseconds
        :type debounceTime: integer
        
        """
        callResult = self._Call("SetDebounceTime", debounceTime)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class BusSignalMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(BusSignalMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.BusSignalMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusSignalMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSignalManipulation(self):
        """
        Returns the manipulation parameters. Can only be used for bus signals!

        :return: SignalManipulation. Possible values:

            - None: signal manipulation is disabled
            - 0: signal manipulation is permanent
            - n>0: signal is manipulated for n frames

        :rtype: int
        
        """
        callResult = self._Call("GetSignalManipulation", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult

    def SetSignalManipulation(self, value=None):
        """
        Sets the manipulation parameters. Can only be used for bus signals!

        :param value: The value to be used. Possible values:

            - None: signal manipulation parameters will be disabled
            - 0: permanent
            - n>0: signal is manipulated for n frames

        :type value: int
        
        """
        callResult = self._Call("SetSignalManipulation", value)



class EdiabasVariableMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(EdiabasVariableMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.EdiabasVariableMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = EdiabasVariableMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetEcuKey(self):
        """
        Returns the ECU key.

        :return: ECU key
        :rtype: unicode
        
        """
        callResult = self._Call("GetEcuKey", )

        if callResult is None:
            return None

        return callResult

    def GetJobComment(self):
        """
        Returns the job comment.

        :return: Job comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetJobComment", )

        if callResult is None:
            return None

        return callResult

    def GetJobName(self):
        """
        Returns the job name.

        :return: Job name
        :rtype: unicode
        
        """
        callResult = self._Call("GetJobName", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSgbdName(self):
        """
        Returns the SGBD name.

        :return: SGBD name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSgbdName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class GenericMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(GenericMappingItem, self).__init__(xmlRpc, objId)



    def AddEnumeration(self, text, value):
        """
        Adds a (text: value) pair to an existing enumeration. Creates a new enumeration
        if none exists.

        :param text: Text to show instead of the value
        :type text: unicode
        :param value: Value that should be mapped
        :type value: int
        
        """
        callResult = self._Call("AddEnumeration", text, value)


    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.GenericMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetEnumeration(self):
        """
        Returns the enumeration of the mapping item.

        :return: Dictionary with the (text: value) pairs.
        :rtype: dict<unicode:int>
        
        """
        callResult = self._Call("GetEnumeration", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def RemoveEnumeration(self):
        """
        Removes the enumeration of the mapping item.

        :return: True on success
        :rtype: bool
        
        """
        callResult = self._Call("RemoveEnumeration", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetEnumeration(self, vtabDict):
        """
        Sets the enumeration of the mapping item.

        :param vtabDict: Dictionary with the (text: value) pairs.
        :type vtabDict: dict<unicode:int>
        
        """
        callResult = self._Call("SetEnumeration", vtabDict)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class CalibrationMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(CalibrationMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.CalibrationMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = CalibrationMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class BusSignalGroupMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(BusSignalGroupMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.BusSignalGroupMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = BusSignalGroupMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class EesPinVariableMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(EesPinVariableMappingItem, self).__init__(xmlRpc, objId)



    def AddPotential(self, potentialName):
        """
        Adds a potential.

        :param potentialName: Potential
        :type potentialName: unicode
        
        """
        callResult = self._Call("AddPotential", potentialName)


    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.EesPinVariableMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = EesPinVariableMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetBatteryPotential(self):
        """
        Returns the battery potential.

        :return: Battery potential
        :rtype: unicode
        
        """
        callResult = self._Call("GetBatteryPotential", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetGroundPotential(self):
        """
        Returns the ground potential.

        :return: Ground potential
        :rtype: unicode
        
        """
        callResult = self._Call("GetGroundPotential", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the signal.

        :return: Name of the signal
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPotentials(self):
        """
        Returns a list of potentials.

        :return: List of potentials
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetPotentials", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSutKey(self):
        """
        Returns the SUT key.

        :return: SUT key
        :rtype: unicode
        
        """
        callResult = self._Call("GetSutKey", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetBatteryPotential(self, potentialName):
        """
        Sets the battery potential.

        :param potentialName: Battery potential
        :type potentialName: unicode
        
        """
        callResult = self._Call("SetBatteryPotential", potentialName)


    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetGroundPotential(self, potentialName):
        """
        Sets the ground potential.

        :param potentialName: Ground potential
        :type potentialName: unicode
        
        """
        callResult = self._Call("SetGroundPotential", potentialName)


    def SetName(self, name):
        """
        Sets the name of the signal.

        :param name: Name of the signal
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult

    def SetSutKey(self, sutKey):
        """
        Sets the SUT key.

        :param sutKey: SUT key
        :type sutKey: unicode
        
        """
        callResult = self._Call("SetSutKey", sutKey)



class ServiceMethodReturnMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ServiceMethodReturnMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ServiceMethodReturnMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ServiceMethodReturnMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class ServiceEventLeafMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ServiceEventLeafMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ServiceEventLeafMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ServiceEventLeafMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns if the raster selected for test quantity access

        :return: Name of selected raster
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem`  and :class:`.ModelMappingItem`
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the raster to be used to access the test quantity

        :param rasterName: Name of the raster to be used
        :type rasterName: unicode
        :return: True if the raster has changed, else False
        :rtype: bool
        
.. deprecated:: 6.6.0
      Only available on :class:`.MeasureMappingItem` and :class:`.ModelMappingItem`
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class ModelMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ModelMappingItem, self).__init__(xmlRpc, objId)



    def AddEnumeration(self, text, value):
        """
        Adds a (text: value) pair to an existing enumeration. Creates a new enumeration
        if none exists.

        :param text: Text to show instead of the value
        :type text: unicode
        :param value: Value that should be mapped
        :type value: int
        
        """
        callResult = self._Call("AddEnumeration", text, value)


    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ModelMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ModelMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetEnumeration(self):
        """
        Returns the enumeration of the mapping item.

        :return: Dictionary with the (text: value) pairs.
        :rtype: dict<unicode:int>
        
        """
        callResult = self._Call("GetEnumeration", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns the raster of the mapping item.

        :return: Raster
        :rtype: str
        
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def RemoveEnumeration(self):
        """
        Removes the enumeration of the mapping item.
        
        """
        callResult = self._Call("RemoveEnumeration", )


    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetEnumeration(self, vtabDict):
        """
        Sets the enumeration of the mapping item.

        :param vtabDict: Dictionary with the (text: value) pairs.
        :type vtabDict: dict<unicode:int>
        
        """
        callResult = self._Call("SetEnumeration", vtabDict)


    def SetRaster(self, rasterName):
        """
        Sets the enumeration of the mapping item.

        :param rasterName: Raster to be set
        :type rasterName: str
        :return: True if the raster has changed, else False
        :rtype: bool
        
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class MeasureMappingItem(MappingItem):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(MeasureMappingItem, self).__init__(xmlRpc, objId)



    def AllowOtherRaster(self, forceRaster):
        """
        Set that the registration of the raster should be enforced

        :param forceRaster: Set if the specified raster should be enforced or not
        :type forceRaster: bool
        
        """
        callResult = self._Call("AllowOtherRaster", forceRaster)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.MeasureMappingItem`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MeasureMappingItem
        return classInstance(self._xmlRpc, objId)


    def GetAccessType(self):
        """
        Returns a string identifying the mapping item's type. (such as MODEL, BUS,
        MEASUREMENT, ...)

        :return: access type
        :rtype: unicode
        
        """
        callResult = self._Call("GetAccessType", )

        if callResult is None:
            return None

        return callResult

    def GetCategory(self):
        """
        Returns the category

        :return: Category
        :rtype: unicode
        
        """
        callResult = self._Call("GetCategory", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description

        :return: Description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayedType(self):
        """
        Returns a "nice" representation of the type as displayed in the "type" column of the
        mapping panel

        :return: the displayed mapping type
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayedType", )

        if callResult is None:
            return None

        return callResult

    def GetRaster(self):
        """
        Returns the raster of the mapping item.

        :return: Raster
        :rtype: str
        
        """
        callResult = self._Call("GetRaster", )

        if callResult is None:
            return None

        return callResult

    def GetReferenceName(self):
        """
        Returns the reference name of the mapping.

        :return: The reference name of the mapping
        :rtype: unicode
        
        """
        callResult = self._Call("GetReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetSystemIdentifier(self):
        """
        Returns the system identifier providing the currently mapped test quantity

        :return: system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetSystemIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetTargetPath(self):
        """
        Returns the path this mapping item is currently pointing at

        :return: complete path to the destination test quantity
        :rtype: unicode
        
        """
        callResult = self._Call("GetTargetPath", )

        if callResult is None:
            return None

        return callResult

    def GetVariableType(self):
        """
        Returns the type of the target variable.

        :return: The type of the target variable. (e.g. VALUE, MATRIX, CURVE, ...)
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableType", )

        if callResult is None:
            return None

        return callResult

    def IsOtherRasterAllowed(self):
        """
        Returns if the registration of the raster should be enforced

        :return: Name of selected raster
        :rtype: bool
        
        """
        callResult = self._Call("IsOtherRasterAllowed", )

        if callResult is None:
            return None

        return callResult

    def SetCategory(self, category):
        """
        Sets the category

        :param category: The new category to be used
        :type category: unicode
        
        """
        callResult = self._Call("SetCategory", category)


    def SetDescription(self, description):
        """
        Sets the description

        :param description: The new description to be used
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetRaster(self, rasterName):
        """
        Sets the enumeration of the mapping item.

        :param rasterName: Raster to be set
        :type rasterName: str
        :return: True if the raster has changed, else False
        :rtype: bool
        
        """
        callResult = self._Call("SetRaster", rasterName)

        if callResult is None:
            return None

        return callResult


class LocalMapping(Mapping):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(LocalMapping, self).__init__(xmlRpc, objId)



    def AddItem(self, mappingItem):
        """
        Adds a mapping item to the mapping.

        :param mappingItem: The mapping item to be added
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("AddItem", mappingItem)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.LocalMapping`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = LocalMapping
        return classInstance(self._xmlRpc, objId)


    def GetItemByName(self, name):
        """
        Searches the mapping for the mapping item by its name and returns it if existing.

        :param name: The name of the mapping item to be searched for
        :type name: unicode
        :return: mapping item with the given name or None if no such mapping item exists
        :rtype: :class:`.MappingItem`
        
        """
        callResult = self._Call("GetItemByName", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetItems(self):
        """
        Returns a list of all the mapping items of the mapping.

        :return: List of all the mapping items of the mapping.
        :rtype: list <:class:`.MappingItem`>
        
        """
        callResult = self._Call("GetItems", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def HasItem(self, mappingItem):
        """
        Checks whether the given mapping item belongs to the mapping.

        :param mappingItem: The mapping item to be checked
        :type mappingItem: :class:`.MappingItem`
        :return: True if the given mapping item belongs to the mapping.
        :rtype: boolean
        
        """
        callResult = self._Call("HasItem", mappingItem)

        if callResult is None:
            return None

        return callResult

    def RemoveItemByName(self, name):
        """
        Removes a mapping item from the mapping.

        :param name: The name of the mapping item to be removed
        :type name: unicode
        
        """
        callResult = self._Call("RemoveItemByName", name)


    def ReplaceItem(self, mappingItem):
        """
        Replaces a mapping item from the mapping

        :param mappingItem: The new mapping item to replace an existing one of the same name
        :type mappingItem: :class:`.MappingItem`
        
        """
        callResult = self._Call("ReplaceItem", mappingItem)



class ParameterSet(ProjectComponent):
    """

    """


    @property
    def GlobalConstants(self):
        """
        Returns access to the global constants definitions specified within the parameter set
        and the referenced global constants definition files.

        :return: Global constants interface of the parameter set
        :rtype: :class:`.GlobalConstants`
        
        """
        return self.__GlobalConstants

    @property
    def Mapping(self):
        """
        Returns access to the mapping of the parameter set.

        :return: Mapping interface of the parameter set
        :rtype: :class:`.ParameterSetMapping`
        
        """
        return self.__Mapping

    @property
    def MappingFiles(self):
        """
        Returns access to the mapping file list of the parameter set.

        :return: Mapping file list object of the parameter set
        :rtype: :class:`.MappingFiles`
        
        """
        return self.__MappingFiles

    @property
    def Parameters(self):
        """
        Returns access to the package parameters definitions specified within the parameter set
        and the referenced package parameters definition files.

        :return: Package parameters interface of the parameter set
        :rtype: :class:`.PackageParameters`
        
        """
        return self.__Parameters

    @property
    def Recordings(self):
        """
        Returns access to the recordings of the parameter set.

        :return: Recording interface of the parameter set
        :rtype: :class:`.ParameterSetRecordings`
        
        """
        return self.__Recordings

    def __init__(self, xmlRpc=None, objId=0):
        super(ParameterSet, self).__init__(xmlRpc, objId)

        self.__GlobalConstants = GlobalConstants(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "GlobalConstants"))
        self.__Mapping = ParameterSetMapping(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Mapping"))
        self.__MappingFiles = MappingFiles(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "MappingFiles"))
        self.__Parameters = PackageParameters(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Parameters"))
        self.__Recordings = ParameterSetRecordings(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "Recordings"))


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ParameterSet`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ParameterSet
        return classInstance(self._xmlRpc, objId)


    def GetAvailableRecordingGroupNames(self):
        """
        Returns the available names of the recording groups of the package.

        :return: Recording group names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAvailableRecordingGroupNames", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPackage(self):
        """
        Returns the referenced package.

        :return: The referenced package
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("GetPackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetTestCaseId(self):
        """
        Returns the test case id of the parameter record.

        :return: Test case id
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestCaseId", )

        if callResult is None:
            return None

        return callResult

    def GetTestScriptId(self):
        """
        Returns the test script id of the corresponding package.

        :return: Test script id
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestScriptId", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetTestCaseId(self, testCaseId):
        """
        Sets the independent test case id of the parameter record.

        :param testCaseId: Test case id
        :type testCaseId: unicode
        :return: True if the update was successful
        :rtype: boolean
        
        """
        callResult = self._Call("SetTestCaseId", testCaseId)

        if callResult is None:
            return None

        return callResult


class TestStep(ObjectApiProxy):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TestStep, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class VariableRecordingGroup(RecordingGroup):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(VariableRecordingGroup, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.VariableRecordingGroup`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = VariableRecordingGroup
        return classInstance(self._xmlRpc, objId)


    def EnableAutoStartStop(self, enable=True):
        """
        Enables or disables automatic recording of this recording group during test execution.

        :param enable: True to enable automatic recording, False to disable it
        :type enable: bool
        
        """
        callResult = self._Call("EnableAutoStartStop", enable)


    def GetConditionalSignalNamesForTraceAnalyses(self):
        """
        Returns the list of signal names that can be optional or mandatory for running 
        the trace analyses depending on the values of global constants.

        :return: The list of undetermined signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetConditionalSignalNamesForTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetMandatorySignalNamesForTraceAnalyses(self):
        """
        Returns the list of signal names that are mandatory for running the trace analyses.

        :return: The list of mandatory signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetMandatorySignalNamesForTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of a recording group.        

        :return: the name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOptionalSignalNamesForTraceAnalyses(self):
        """
        Returns the list of signal names that are optional for running the trace analyses.

        :return: The list of optional signal names.
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetOptionalSignalNamesForTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingInfos(self):
        """
        Not available.

        :return: Returns always an empty list
        :rtype: list<:class:`.RecordingInfo`>
        
        """
        callResult = self._Call("GetRecordingInfos", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RecordingInfo
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def IsAutoStartStopEnabled(self):
        """
        Returns if the recording group is configured to be recorded automatically during test execution

        :return: True if automatic recording is enabled, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsAutoStartStopEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsLogRecording(self):
        """
        Returns whether the recording group is a log recording.

        :return: True if the recording group is a log recording else False
        :rtype: bool
        
        """
        callResult = self._Call("IsLogRecording", )

        if callResult is None:
            return None

        return callResult

    def IsSignalRecording(self):
        """
        Returns whether the recording group is a signal recording.

        :return: True if the recording group is a signal recording else False
        :rtype: bool
        
        """
        callResult = self._Call("IsSignalRecording", )

        if callResult is None:
            return None

        return callResult


class TraceStep(ObjectApiProxy):
    """

    Base class for all elements of a trace analysis and the trace analysis itself.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceStep, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.TraceStep`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class ExpectationSynchronization(Synchronization):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ExpectationSynchronization, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ExpectationSynchronization`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ExpectationSynchronization
        return classInstance(self._xmlRpc, objId)


    def GetMaster(self):
        """
        Returns the master recording group for this synchronization.

        :return: The master recording group
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetMaster", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMasterExpectation(self):
        """
        Returns the expectation of the master recording group.

        :return: The master recording group expectation 
        :rtype: :class:`.SyncExpectation`
        
        """
        callResult = self._Call("GetMasterExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SyncExpectation
        return classInstance(self._xmlRpc, objId)


    def GetMaxDeltaT(self):
        """
        Returns the bound for deltaT. If deltaT is found to be greater than this bound, 
        the synchronization will fail.
        
        :return: The maximum for deltaT as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxDeltaT", )

        if callResult is None:
            return None

        return callResult

    def GetOffset(self):
        """
        Returns the (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.
        
        :return: The (known) offset as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetOffset", )

        if callResult is None:
            return None

        return callResult

    def GetOffsetUsed(self):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :return: True if the offset will be used, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetOffsetUsed", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingGroupExpectation(self):
        """
        Returns the recording group expectation .
        
        :return: The recording group expectation 
        :rtype: :class:`.SyncExpectation`
        
        """
        callResult = self._Call("GetRecordingGroupExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SyncExpectation
        return classInstance(self._xmlRpc, objId)


    def GetTimeLimit(self):
        """
        Returns the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.
        
        :return: The relative time limit as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeLimit", )

        if callResult is None:
            return None

        return callResult

    def IsFirstSampleDifferenceCorrected(self):
        """
        Returns whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :return: The setting for the interpretation of maxDeltaT
        :rtype: boolean
        
        """
        callResult = self._Call("IsFirstSampleDifferenceCorrected", )

        if callResult is None:
            return None

        return callResult

    def SetFirstSampleDifferenceCorrected(self, isCorrected):
        """
        Sets whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :param isCorrected: The setting for the interpretation of maxDeltaT
        :type isCorrected: boolean
        
        """
        callResult = self._Call("SetFirstSampleDifferenceCorrected", isCorrected)


    def SetMaxDeltaT(self, maxDeltaT):
        """
        Sets the bound for deltaT to the value maxDeltaT. 
        If deltaT is found to be greater than this bound, the synchronization will fail.

        :param maxDeltaT: The maximum for deltaT as expression
        :type maxDeltaT: unicode
        
        """
        callResult = self._Call("SetMaxDeltaT", maxDeltaT)


    def SetOffset(self, offset):
        """
        Sets (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.

        :param offset: The (known) offset as expression
        :type offset: unicode
        
        """
        callResult = self._Call("SetOffset", offset)


    def SetOffsetUsed(self, used):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :param used: True if the offset should be used, else False.
        :type used: boolean
        
        """
        callResult = self._Call("SetOffsetUsed", used)


    def SetTimeLimit(self, timeLimit):
        """
        Sets the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.

        :param timeLimit: The relative time limit as expression
        :type timeLimit: unicode
        
        """
        callResult = self._Call("SetTimeLimit", timeLimit)



class EqualnessMatchingSynchronization(Synchronization):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(EqualnessMatchingSynchronization, self).__init__(xmlRpc, objId)



    def AppendEqualEntry(self, name, masterName, eventType):
        """
        Adds an equal entry to this synchronization object.
        
        :param name: The signal name of the associated recording group
        :type name: unicode
        :param masterName:  The signal name of the selected master recording group
        :type masterName: unicode
        :param eventType: The event type for the equalness matching. Possible values 
                          are "RAW", "PHY", and "STR".
        :type eventType: str
        :return: An object representing the equal entry
        :rtype: :class:`.EqualEntry`
        
        """
        callResult = self._Call("AppendEqualEntry", name, masterName, eventType)

        if callResult is None:
            return None


        objId = callResult
        classInstance = EqualEntry
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.EqualnessMatchingSynchronization`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = EqualnessMatchingSynchronization
        return classInstance(self._xmlRpc, objId)


    def GetEqualEntries(self):
        """
        Returns all equal entries.

        :return: The list of equal entries
        :rtype: list<:class:`.EqualEntry`>
        
        """
        callResult = self._Call("GetEqualEntries", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = EqualEntry
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetMaster(self):
        """
        Returns the master recording group for this synchronization.

        :return: The master recording group
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetMaster", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMaxDeltaT(self):
        """
        Returns the bound for deltaT. If deltaT is found to be greater than this bound, 
        the synchronization will fail.
        
        :return: The maximum for deltaT as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxDeltaT", )

        if callResult is None:
            return None

        return callResult

    def GetOffset(self):
        """
        Returns the (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.
        
        :return: The (known) offset as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetOffset", )

        if callResult is None:
            return None

        return callResult

    def GetOffsetUsed(self):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :return: True if the offset will be used, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetOffsetUsed", )

        if callResult is None:
            return None

        return callResult

    def GetTimeLimit(self):
        """
        Returns the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.
        
        :return: The relative time limit as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeLimit", )

        if callResult is None:
            return None

        return callResult

    def IsFirstSampleDifferenceCorrected(self):
        """
        Returns whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :return: The setting for the interpretation of maxDeltaT
        :rtype: boolean
        
        """
        callResult = self._Call("IsFirstSampleDifferenceCorrected", )

        if callResult is None:
            return None

        return callResult

    def RemoveEqualEntry(self, equalEntry):
        """
        Removes the given equal entry from this synchronization object.

        :param equalEntry: equal entry to be removed
        :type equalEntry: :class:`.EqualEntry`
        
        """
        callResult = self._Call("RemoveEqualEntry", equalEntry)


    def SetFirstSampleDifferenceCorrected(self, isCorrected):
        """
        Sets whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :param isCorrected: The setting for the interpretation of maxDeltaT
        :type isCorrected: boolean
        
        """
        callResult = self._Call("SetFirstSampleDifferenceCorrected", isCorrected)


    def SetMaxDeltaT(self, maxDeltaT):
        """
        Sets the bound for deltaT to the value maxDeltaT. 
        If deltaT is found to be greater than this bound, the synchronization will fail.

        :param maxDeltaT: The maximum for deltaT as expression
        :type maxDeltaT: unicode
        
        """
        callResult = self._Call("SetMaxDeltaT", maxDeltaT)


    def SetOffset(self, offset):
        """
        Sets (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.

        :param offset: The (known) offset as expression
        :type offset: unicode
        
        """
        callResult = self._Call("SetOffset", offset)


    def SetOffsetUsed(self, used):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :param used: True if the offset should be used, else False.
        :type used: boolean
        
        """
        callResult = self._Call("SetOffsetUsed", used)


    def SetTimeLimit(self, timeLimit):
        """
        Sets the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.

        :param timeLimit: The relative time limit as expression
        :type timeLimit: unicode
        
        """
        callResult = self._Call("SetTimeLimit", timeLimit)



class OffsetSynchronization(Synchronization):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(OffsetSynchronization, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.OffsetSynchronization`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = OffsetSynchronization
        return classInstance(self._xmlRpc, objId)


    def GetMaster(self):
        """
        Returns the master recording group for this synchronization.

        :return: The master recording group
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetMaster", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetMaxDeltaT(self):
        """
        Returns the bound for deltaT. If deltaT is found to be greater than this bound, 
        the synchronization will fail.
        
        :return: The maximum for deltaT as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxDeltaT", )

        if callResult is None:
            return None

        return callResult

    def GetOffset(self):
        """
        Returns the (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.
        
        :return: The (known) offset as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetOffset", )

        if callResult is None:
            return None

        return callResult

    def GetOffsetUsed(self):
        """
        Sets whether the known offset should be applied.
        For the ExpectationSynchronization and EqualnessMatchingSynchronization
        the known offset will be added to the calculated deltaT. The known offset
        will always be used by the OffsetSynchronization.

        :return: True if the offset will be used, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetOffsetUsed", )

        if callResult is None:
            return None

        return callResult

    def GetTimeLimit(self):
        """
        Returns the time stamp relative to the first time stamp (of the recording group and 
        master recording group) until that the running synchronization will be evaluated.
        If the time limit is reached, the synchronization will fail.
        
        :return: The relative time limit as expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeLimit", )

        if callResult is None:
            return None

        return callResult

    def IsFirstSampleDifferenceCorrected(self):
        """
        Returns whether the parameter maxDeltaT is corrected by the difference of the 
        time stamps of the first samples (of the recording group and master recording group).
        Suppose that the time axes to be synchronized start at 20s and 50s, respectively. Then
        activating this option acts as if maxDeltaT was increased by 30s.

        :return: The setting for the interpretation of maxDeltaT
        :rtype: boolean
        
        """
        callResult = self._Call("IsFirstSampleDifferenceCorrected", )

        if callResult is None:
            return None

        return callResult

    def SetFirstSampleDifferenceCorrected(self, isCorrected):
        """
        Not available. maxDeltaT is not used by the offset synchronization.

        :param isCorrected: The setting for the interpretation of maxDeltaT
        :type isCorrected: boolean
        
        """
        callResult = self._Call("SetFirstSampleDifferenceCorrected", isCorrected)


    def SetMaxDeltaT(self, maxDeltaT):
        """
        Not available. maxDeltaT is not used by the offset synchronization.

        :param maxDeltaT: The maximum for deltaT as expression
        :type maxDeltaT: unicode
        
        """
        callResult = self._Call("SetMaxDeltaT", maxDeltaT)


    def SetOffset(self, offset):
        """
        Sets (known) offset. The offset will be added to the calculated deltaT.
        By default, it is only used for the OffsetSynchronization.

        :param offset: The (known) offset as expression
        :type offset: unicode
        
        """
        callResult = self._Call("SetOffset", offset)


    def SetOffsetUsed(self, used):
        """
        Not available. The offset will always be used by this synchronization.

        :param used: True if the offset should be used, else False.
        :type used: boolean
        
        """
        callResult = self._Call("SetOffsetUsed", used)


    def SetTimeLimit(self, timeLimit):
        """
        Not available. TimeLimit is not used by the offset synchronization.

        :param timeLimit: The relative time limit as expression
        :type timeLimit: unicode
        
        """
        callResult = self._Call("SetTimeLimit", timeLimit)



class ParameterGenerator(ProjectComponent):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ParameterGenerator, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ParameterGenerator`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GenerateProject(self, destinationPath):
        """
        Initiates the execution of the generator and stores the result as a new project file.

        :param destinationPath: Absolute destination path to store the project file
        :type destinationPath: unicode
        
        """
        callResult = self._Call("GenerateProject", destinationPath)


    def GetAttribute(self, attributeName):
        """
        Returns the value of the attribute of the given name.
        Value is returned as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributeName: Name of attribute to be returned
        :type attributeName: unicode
        :return: attribute value
        :rtype: unicode
        
        """
        callResult = self._Call("GetAttribute", attributeName)

        if callResult is None:
            return None

        return callResult

    def GetGeneratorAttributes(self):
        """
        Returns all the stored attributes of the generator.
        Values are returned as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :return: Dictionary mapping attributes names to values
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetGeneratorAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetGeneratorId(self):
        """
        Returns the unique generator id of the referenced parameter generator.

        :return: generator id
        :rtype: unicode
        
        """
        callResult = self._Call("GetGeneratorId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetAttribute(self, attributeName, value):
        """
        Sets the value of the attribute of the given name.
        Value has to be provided as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributeName: Name of attribute to be returned
        :type attributeName: unicode
        :param value: attribute value
        :type value: unicode
        
        """
        callResult = self._Call("SetAttribute", attributeName, value)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetGeneratorAttributes(self, attributesDict):
        """
        Overwrites the existing attributes of the generator with the provided ones.
        Values have to be provided as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributesDict: Dictionary mapping attribute names to values
        :type attributesDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetGeneratorAttributes", attributesDict)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class ConfigChange(ProjectComponent):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ConfigChange, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ConfigChange`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ConfigChange
        return classInstance(self._xmlRpc, objId)


    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetTestConfigurationPath(self):
        """
        Returns the path to the test configuration file, absolute or relative to the
        'Configuration' directory.

        :return: Path to the test configuration
        :rtype: str
        
        """
        callResult = self._Call("GetTestConfigurationPath", )

        if callResult is None:
            return None

        return callResult

    def GetTestbenchConfigurationPath(self):
        """
        Returns the path to the test bench configuration file, absolute or relative to the
        'Configuration' directory.

        :return: Path to the test bench configuration
        :rtype: str
        
        """
        callResult = self._Call("GetTestbenchConfigurationPath", )

        if callResult is None:
            return None

        return callResult

    def GetToolAction(self, toolAlias):
        """
        Returns the action of the specified tool or None.

        :param toolAlias: Alias of the tool
        :type toolAlias: str
        :return: Action of the specified tool
        :rtype: str
        
        """
        callResult = self._Call("GetToolAction", toolAlias)

        if callResult is None:
            return None

        return callResult

    def GetTools(self):
        """
        Returns a list of the configured tools.

        :return: Configured tools
        :rtype: list<str>
        
        """
        callResult = self._Call("GetTools", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsForcedRestart(self):
        """
        Returns if the option "forced restart" is set.

        :return: Forced restart option
        :rtype: bool
        
        """
        callResult = self._Call("IsForcedRestart", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetForcedRestart(self, forceRestart=True):
        """
        Sets the option "forced restart" to the value of forceRestart.

        :param forceRestart: Forced restart option
        :type forceRestart: bool
        
        """
        callResult = self._Call("SetForcedRestart", forceRestart)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetTestConfigurationPath(self, testConfiguration):
        """
        Sets the path to the test configuration file, absolute or relative to the 'Configuration'
        directory.

        :param testConfiguration: Path to the test configuration file
        :type testConfiguration: str
        
        """
        callResult = self._Call("SetTestConfigurationPath", testConfiguration)


    def SetTestbenchConfigurationPath(self, testbenchConfiguration):
        """
        Sets the path to the test bench configuration file, absolute or relative to
        the 'Configuration' directory.

        :param testbenchConfiguration: Path to the test bench configuration file
        :type testbenchConfiguration: str
        
        """
        callResult = self._Call("SetTestbenchConfigurationPath", testbenchConfiguration)


    def SetToolAction(self, toolAlias, action):
        """
        Sets the action of the specified tool. Has to be one of the following:

         * 'AUTO': Automatic
         * 'RE_START': Start if stopped, restart if started
         * 'NO_RESTART': Start if stopped, leave as is if started
         * 'STOP': Stop if started, leave as is if stopped
         * 'NONE': Leave as is

        :param toolAlias: Alias of the tool
        :type toolAlias: str
        :param action: The action to set the tool to
        :type action: str
        
        """
        callResult = self._Call("SetToolAction", toolAlias, action)



class StringExpectation(Expectation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(StringExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.StringExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = StringExpectation
        return classInstance(self._xmlRpc, objId)


    def GetCaseSensitive(self):
        """
        Returns whether the comparison should be case-sensitive.

        :return: True if case-sensitive, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetCaseSensitive", )

        if callResult is None:
            return None

        return callResult

    def GetDontEvalNotPresent(self):
        """
        Returns whether the option to evaluate this expectation if the expected value is NotPresent
        is set or not.

        :return: True if the described behavior is enabled otherwise False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetDontEvalNotPresent", )

        if callResult is None:
            return None

        return callResult

    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def GetExpressionType(self):
        """
        Returns how the actual value and the expression value will be compared.
        
        :return: The expression type
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpressionType", )

        if callResult is None:
            return None

        return callResult

    def SetCaseSensitive(self, caseSensitive):
        """
        Sets whether the comparison should be case-sensitive.

        :param caseSensitive: True if case-sensitive, else False.
        :type caseSensitive: boolean
        
        """
        callResult = self._Call("SetCaseSensitive", caseSensitive)


    def SetDontEvalNotPresent(self, dontEvalNotPresent):
        """
        Enables or disables the option to evaluate this expectation if the expected value is
        NotPresent.

        :param dontEvalNotPresent: True to enable the described behavior. False to disable it.
        :type dontEvalNotPresent: boolean
        
        """
        callResult = self._Call("SetDontEvalNotPresent", dontEvalNotPresent)


    def SetExpression(self, expression):
        """
        Sets the expectations expression.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)


    def SetExpressionType(self, expressionType):
        """
        Sets how the actual value and the expression value will be compared.

        :param expressionType:
          The expression type. Possible values:
          - 'identical' (default)
          - 'starts with'
          - 'ends with'
          - 'contains'
          - 'constains not'
          - 'dissimilar'
        :type expressionType: unicode
        
        """
        callResult = self._Call("SetExpressionType", expressionType)



class ExpressionExpectationBase(Expectation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ExpressionExpectationBase, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ExpressionExpectationBase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def SetExpression(self, expression):
        """
        Sets the expectations expression.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)



class StringListExpectation(Expectation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(StringListExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.StringListExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = StringListExpectation
        return classInstance(self._xmlRpc, objId)


    def GetCaseSensitive(self):
        """
        Returns whether the comparison should be case-sensitive.

        :return: True if case-sensitive, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetCaseSensitive", )

        if callResult is None:
            return None

        return callResult

    def GetStringList(self):
        """
        Returns the list of strings if set, otherwise an empty list.
        
        :return: The list of strings
        :rtype: list<unicode> 
        
        """
        callResult = self._Call("GetStringList", )

        if callResult is None:
            return None

        return callResult

    def GetStringListVariableName(self):
        """
        Returns the variable that stores the list of strings if set else None.
        
        :return: The variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetStringListVariableName", )

        if callResult is None:
            return None

        return callResult

    def SetCaseSensitive(self, caseSensitive):
        """
        Sets whether the comparison should be case-sensitive.

        :param caseSensitive: True if case-sensitive, else False.
        :type caseSensitive: boolean
        
        """
        callResult = self._Call("SetCaseSensitive", caseSensitive)


    def SetStringList(self, stringList):
        """
        Sets the list of strings the actual value has to be contained in.
        
        :param stringList: The list of strings
        :type stringList: list<unicode>
        
        """
        callResult = self._Call("SetStringList", stringList)


    def SetStringListVariableName(self, variableName):
        """
        Sets the variable that stores the list of strings the actual value has to be contained in.
        
        :param variableName: Name of the variable
        :type variableName: unicode
        
        """
        callResult = self._Call("SetStringListVariableName", variableName)



class NumericExpectation(Expectation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(NumericExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.NumericExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = NumericExpectation
        return classInstance(self._xmlRpc, objId)


    def DeactivateTolerance(self):
        """
        Deactivates the tolerance for this expectation.
        
        """
        callResult = self._Call("DeactivateTolerance", )


    def GetDontEvalNotPresent(self):
        """
        Returns whether the option to evaluate this expectation if the expected value is NotPresent
        is set or not.

        :return: True if the described behavior is enabled otherwise False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetDontEvalNotPresent", )

        if callResult is None:
            return None

        return callResult

    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def GetRelation(self):
        """
        Returns the relation for this expectation.

        :return: The relation
        :rtype: unicode
        
        """
        callResult = self._Call("GetRelation", )

        if callResult is None:
            return None

        return callResult

    def GetToleranceType(self):
        """
        Returns the type of the set tolerance. Returns 'absolute-value', 'percentage',
        'decimal-places', or 'none'.

        :return: The type of the tolerence
        :rtype: unicode
        
        """
        callResult = self._Call("GetToleranceType", )

        if callResult is None:
            return None

        return callResult

    def GetToleranceValue(self):
        """
        Returns the expression for the tolerance or None if the tolerance type is 'none'.

        :return: The expression for the tolerance
        :rtype: unicode
        
        """
        callResult = self._Call("GetToleranceValue", )

        if callResult is None:
            return None

        return callResult

    def SetDontEvalNotPresent(self, dontEvalNotPresent):
        """
        Enables or disables the option to evaluate this expectation if the expected value is
        NotPresent.

        :param dontEvalNotPresent: True to enable the described behavior. False to disable it.
        :type dontEvalNotPresent: boolean
        
        """
        callResult = self._Call("SetDontEvalNotPresent", dontEvalNotPresent)


    def SetExpression(self, expression):
        """
        Sets the expectations expression.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)


    def SetRelation(self, relation):
        """
        Sets the relation for this expectation. Allowed values are:
         - '<'
         - '<='
         - '=='
         - '>='
         - '>'
         - '!='
         - '<>' (results in '!=')

        :param relation: The relation
        :type relation: unicode
        
        """
        callResult = self._Call("SetRelation", relation)


    def SetTolerance(self, toleranceType, toleranceExpr):
        """
        Sets the type and value of the tolerance for this expectation.

        :param toleranceType:
          Possible types are:
          - 'absolute-value'
          - 'percentage'
          - 'decimal-places'
        :type toleranceType: unicode
        :param toleranceExpr: The expression for the tolerance
        :type toleranceExpr: unicode
        
        """
        callResult = self._Call("SetTolerance", toleranceType, toleranceExpr)



class MappingTestStepAlmRepresentation(AlmRepresentation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(MappingTestStepAlmRepresentation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetEnglishDescription(self):
        """
        **for internal use only**

        :return: The English description
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEnglishExpectation(self):
        """
        **for internal use only**

        :return: The English expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetGermanDescription(self):
        """
        **for internal use only**

        :return: The German description
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGermanExpectation(self):
        """
        **for internal use only**

        :return: The German expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetTestcaseLanguage(self):
        """
        **for internal use only**

        :return: The testcase language that was active when this object has been created
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestcaseLanguage", )

        if callResult is None:
            return None

        return callResult


class TsBlockAlmRepresentation(AlmRepresentation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBlockAlmRepresentation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBlockAlmRepresentation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBlockAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetEnglishDescription(self):
        """
        **for internal use only**

        :return: The English description
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEnglishExpectation(self):
        """
        **for internal use only**

        :return: The English expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetGermanDescription(self):
        """
        **for internal use only**

        :return: The German description
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGermanExpectation(self):
        """
        **for internal use only**

        :return: The German expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetTestcaseLanguage(self):
        """
        **for internal use only**

        :return: The testcase language that was active when this object has been created
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestcaseLanguage", )

        if callResult is None:
            return None

        return callResult


class TsKeywordArgument(Argument):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsKeywordArgument, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsKeywordArgument`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordArgument
        return classInstance(self._xmlRpc, objId)


    def GetIdentifier(self):
        """
        Returns the identifier of the argument.

        :return: Identifier of argument.
        :rtype: unicode
        
        """
        callResult = self._Call("GetIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the underlying argument, if the containing key word catalog ist loaded.

        :return: Name of argument.
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self):
        """
        Returns the unit of the argument.

        :return: Unit string of argument or None if no unit information is attached.
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", )

        if callResult is None:
            return None

        return callResult

    def GetValueExpression(self):
        """
        Returns the value expression of the argument.

        :return: Expression of argument.
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueExpression", )

        if callResult is None:
            return None

        return callResult

    def SetUnit(self, unit):
        """
        Sets the unit of the argument.

        :param unit: Unit string of argument. Use None to remove unit information.
        :type unit: unicode
        
        """
        callResult = self._Call("SetUnit", unit)


    def SetValueExpression(self, value):
        """
        Sets the value expression of the argument.

        :param value: Expression of argument.
        :type value: unicode
        
        """
        callResult = self._Call("SetValueExpression", value)


    def SetValueRangeExpression(self, minValue, maxValue, stepSize, includeMinValue=True, includeMaxValue=False):
        """
        Special method to define a range as value expression for the argument.

        :param minValue: Expression of the lower limit
        :type minValue: unicode
        :param maxValue: Expression of the upper limit
        :type maxValue: unicode
        :param stepSize: Expression of the step size
        :type stepSize: unicode
        :param includeMinValue: If True (default) the minimum value is a candidate for the random
                                value at runtime. If False it is not a possible candidate to pick
                                from.
        :type includeMinValue: boolean
        :param includeMaxValue: If True the maximum value is a candidate for the random value at
                                runtime; if False (default) it is not.
        :type includeMaxValue: boolean
        
        """
        callResult = self._Call("SetValueRangeExpression", minValue, maxValue, stepSize, includeMinValue, includeMaxValue)



class TsKeywordReturn(Return):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsKeywordReturn, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsKeywordReturn`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordReturn
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateSaveIn(self):
        """
        Deactivates the return's save in property, so the value will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def GetExpectation(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetIdentifier(self):
        """
        Returns the identifier of the argument.

        :return: Identifier of return.
        :rtype: unicode
        
        """
        callResult = self._Call("GetIdentifier", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the underlying return, if the containing key word catalog ist loaded.

        :return: Name of return.
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the currently selected variable to save the return value.

        :return: The variable's name or None if return value is not saved to a variable by the
            keyword test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self):
        """
        Returns the unit of the return.

        :return: Unit string of return or None if no unit information is attached.
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", )

        if callResult is None:
            return None

        return callResult

    def SetExpectation(self, expectation):
        """
        Sets the expectation in the evaluation of the test step. The expectation will be
        activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        :raise ValueError: If the expectation is not of type NumericExpectation or StringExpectation
        
        """
        callResult = self._Call("SetExpectation", expectation)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing data by the return. The variable
        will be created automatically if it does not already exist in the package where the return
        is placed in.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: unicode
        :raise ApiError: If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetUnit(self, unit):
        """
        Sets the unit of the return.

        :param unit: Unit string of return. Use None to remove unit information.
        :type unit: unicode
        
        """
        callResult = self._Call("SetUnit", unit)



class KeywordRepr(AlmRepresentation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(KeywordRepr, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.KeywordRepr`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = KeywordRepr
        return classInstance(self._xmlRpc, objId)


    def GetEnglishDescription(self):
        """
        **for internal use only**

        :return: Die englische Beschreibung
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEnglishExpectation(self):
        """
        **for internal use only**

        :return: Der Wert fÃ¼r die Expected_eng-Spalte
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetGermanDescription(self):
        """
        **for internal use only**

        :return: Die deutsche Beschreibung
        :rtype: unicode 
        
        """
        callResult = self._Call("GetGermanDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGermanExpectation(self):
        """
        **for internal use only**

        :return: Der Wert fÃ¼r die Expected-Spalte
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetTestcaseLanguage(self):
        """
        **for internal use only**

        :return: The testcase language that was active when this object has been created
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestcaseLanguage", )

        if callResult is None:
            return None

        return callResult


class TsWaitAlmRepresentation(AlmRepresentation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsWaitAlmRepresentation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsWaitAlmRepresentation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWaitAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetEnglishDescription(self):
        """
        **for internal use only**

        :return: The English description
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEnglishExpectation(self):
        """
        **for internal use only**

        :return: The English expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetGermanDescription(self):
        """
        **for internal use only**

        :return: The German description
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGermanExpectation(self):
        """
        **for internal use only**

        :return: The German expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetTestcaseLanguage(self):
        """
        **for internal use only**

        :return: The testcase language that was active when this object has been created
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestcaseLanguage", )

        if callResult is None:
            return None

        return callResult


class TsPackageAlmRepresentation(AlmRepresentation):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsPackageAlmRepresentation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsPackageAlmRepresentation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPackageAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetEnglishDescription(self):
        """
        **for internal use only**

        Returns the description
        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEnglishExpectation(self):
        """
        **for internal use only**

        Returns the expectation
        :return: The expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetEnglishExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetGermanDescription(self):
        """
        **for internal use only**

        Returns the description
        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGermanExpectation(self):
        """
        **for internal use only**

        Returns the expectation
        :return: The expectation
        :rtype: unicode
        
        """
        callResult = self._Call("GetGermanExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetTestcaseLanguage(self):
        """
        **for internal use only**

        :return: The testcase language that was active when this object has been created
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestcaseLanguage", )

        if callResult is None:
            return None

        return callResult


class ReportParameterSet(ReportPackage):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportParameterSet, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportParameterSet`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportParameterSet
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the package or an empty string if it was not aborted.

        :return: Abort code of the package
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the package or an empty string if it was not aborted.

        :return: Abort comment of the package
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetAttributes(self):
        """
        Returns all package attributes

        :return: Dictionary of package attributes
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the package.

        :return: Comment of the package
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetDuration(self):
        """
        Returns the duration of the test execution.

        :return: Execution duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetElementName(self):
        """
        Returns the project element name.

        :return: Name of the project element
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementName", )

        if callResult is None:
            return None

        return callResult

    def GetExecutionTime(self):
        """
        Returns the test execution date and time as string representation.

        :return: Execution time
        :rtype: unicode
        
        """
        callResult = self._Call("GetExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the filename of the package which corresponds to the column 'Activity'
        in the project summary.

        :return: Name of the package file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the package name.

        :return: Package name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the original total test result.

        :return: Original total test result
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetParameterDescription(self, name):
        """
        Returns the description of the parameter specified by the given name.

        :param name: Name of the parameter
        :type name: unicode
        :return: Description of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterDescription", name)

        if callResult is None:
            return None

        return callResult

    def GetParameterInitialValue(self, name):
        """
        Returns the initial value of the parameter specified by the given name.

        :param name: Name of the parameter
        :type name: unicode
        :return: Initial value of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterInitialValue", name)

        if callResult is None:
            return None

        return callResult

    def GetParameterNames(self):
        """
        Returns a list of parameter names.

        :return: List of names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetParameterNames", )

        if callResult is None:
            return None

        return callResult

    def GetParameterValue(self, name):
        """
        Returns the latest value of the parameter specified by the given name.

        :param name: Name of the parameter
        :type name: unicode
        :return: Value of the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterValue", name)

        if callResult is None:
            return None

        return callResult

    def GetProjectComponentName(self):
        """
        Returns the project element name.

        :return: Name of the project element
        :rtype: unicode
        
.. deprecated:: 6.6.0
      Use :meth:`~ReportPackage.GetElementName` instead.
        """
        callResult = self._Call("GetProjectComponentName", )

        if callResult is None:
            return None

        return callResult

    def GetProjectElements(self):
        """
        Returns a list of all direct project child elements.

        :return: List of direct project child elements
        :rtype: list <:class:`.ReportProjectElement`>
        
        """
        callResult = self._Call("GetProjectElements", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetReportItemId(self):
        """
        Returns the ReportItem Id of the package.

        :return: ReportItem Id
        :rtype: int
        
        """
        callResult = self._Call("GetReportItemId", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the package result.

        :return: Package result
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetRevalComments(self):
        """
        Returns all revalution comments of the package.

        :return: List of revaluation comments
        :rtype: list <:class:`.RevaluationComment`>
        
        """
        callResult = self._Call("GetRevalComments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RevaluationComment
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTestCase(self):
        """
        Returns the test case of the package.

        :return: Test case of the package
        :rtype: :class:`.ReportTestCase`
        
        """
        callResult = self._Call("GetTestCase", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportTestCase
        return classInstance(self._xmlRpc, objId)


    def GetTestManagementId(self):
        """
        Returns the corresponding testmanagement Id.

        :return: Testmanagement Id or an empty string if no Id defined.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestScriptId(self):
        """
        Returns the corresponding testscript-id.

        :return: Testscript-id or an empty string if no id defined.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestScriptId", )

        if callResult is None:
            return None

        return callResult

    def GetTraceAnalysisJobs(self):
        """
        Returns a list of the analysis jobs of the package.

        :return: List of analysis jobs
        :rtype: list <:class:`.ReportAnalysisJob`>
        
        """
        callResult = self._Call("GetTraceAnalysisJobs", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ReportAnalysisJob
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the project element, e.g.
         * "ReportConfigurationChange"
         * "ReportFolderElement"
         * "ReportPackage"
         * "ReportParameterizedPackage"
         * "ReportParameterSet"
         * "ReportProjectElement"
         * "ReportProject"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUserDefinedData(self):
        """
        Returns the user defined report information.

        :return: Name and value of the user defined information.
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetUserDefinedData", )

        if callResult is None:
            return None

        return callResult

    def IsSkipped(self):
        """
        Returns True if the package was skipped.

        :return: True if skipped
        :rtype: bool
        
        """
        callResult = self._Call("IsSkipped", )

        if callResult is None:
            return None

        return callResult


class ReportAnalysisEpisode(ReportAnalysisStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ReportAnalysisEpisode, self).__init__(xmlRpc, objId)



    def AddRevalComment(self, author, comment, revaluation=None):
        """
        Add a revaluation comment to the test step.
        
        :param author: author of the comment
        :type author: unicode
        :param comment: text of the comment. Must be at least 10 characters
        :type comment: unicode
        :param revaluation: "NONE", "SUCCESS", "INCONCLUSIVE", "FAILED" or "ERROR"; 
                            None to just add a comment without changing the result
        :type revaluation: unicode
        
        """
        callResult = self._Call("AddRevalComment", author, comment, revaluation)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ReportAnalysisEpisode`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportAnalysisEpisode
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the report item.

        :return: Abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the report item.

        :return: Abort comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetActivity(self):
        """
        Returns the activity part of the content of the 'Activity/Name' column.

        :return: Activity part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetActivity", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the content of the 'Description' column.

        :return: Content of the 'Description' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDuration(self):
        """
        Returns the execution duration.
        
        :return: Excecution duration in seconds
        :rtype: float
        
        """
        callResult = self._Call("GetDuration", )

        if callResult is None:
            return None

        return callResult

    def GetErrorMessage(self):
        """
        Returns the episode's error message.

        :return: The error message if existing, else an empty string
        :rtype: unicode
        
        """
        callResult = self._Call("GetErrorMessage", )

        if callResult is None:
            return None

        return callResult

    def GetId(self):
        """
        Returns the Id of the report item.

        :return: Id of the report item
        :rtype: int
        
        """
        callResult = self._Call("GetId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name part of the content of the 'Activity/Name' column.

        :return: Name part of the 'Activity/Name' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetNestingLevel(self):
        """
        Returns the nesting depth.

        :return: Nesting depth
        :rtype: int
        
        """
        callResult = self._Call("GetNestingLevel", )

        if callResult is None:
            return None

        return callResult

    def GetOriginalResult(self):
        """
        Returns the content of the 'Original evaluation' column.

        :return: Content of the 'Original evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetOriginalResult", )

        if callResult is None:
            return None

        return callResult

    def GetParameter(self):
        """
        Returns the content of the 'Parameter' column.

        :return: Content of the 'Parameter' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameter", )

        if callResult is None:
            return None

        return callResult

    def GetParentId(self):
        """
        Returns the Id of the parent report item.

        :return: Id of the parent report item
        :rtype: int
        
        """
        callResult = self._Call("GetParentId", )

        if callResult is None:
            return None

        return callResult

    def GetResult(self):
        """
        Returns the content of the 'Evaluation' column.

        :return: Content of the 'Evaluation' column
        :rtype: unicode
        
        """
        callResult = self._Call("GetResult", )

        if callResult is None:
            return None

        return callResult

    def GetResultText(self):
        """
        Returns text illustrated in the trace step's report details below 'result'.

        :return: The result text if existing, else an empty string
        :rtype: unicode
        
        """
        callResult = self._Call("GetResultText", )

        if callResult is None:
            return None

        return callResult

    def GetRevalComments(self):
        """
        Returns all revalution comments of the test step.

        :return: List of revaluation comments
        :rtype: list <:class:`.RevaluationComment`>
        
        """
        callResult = self._Call("GetRevalComments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = RevaluationComment
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTags(self):
        """
        Returns all tags associated with this report entry.
        
        :return: Tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self):
        """
        Returns all direct child trace steps of the episode.

        :return: List of trace step results
        :rtype: list <:class:`.ReportAnalysisStep`>
        
        """
        callResult = self._Call("GetTraceSteps", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def HasTag(self, tagName):
        """
        Checks whether this report item has the specified tag
        
        :param tagName: tag to check for
        :type tagName: unicode
        :return: whether this report item has the specified tag
        :rtype: bool
        
        """
        callResult = self._Call("HasTag", tagName)

        if callResult is None:
            return None

        return callResult

    def IsTemplateBasedTraceStep(self):
        """
        Returns whether the trace step is based on a template.
        
        :return: True if trace step is based on a template
        :rtype: bool
        
        """
        callResult = self._Call("IsTemplateBasedTraceStep", )

        if callResult is None:
            return None

        return callResult


class ProjectFolder(ProjectComponent):
    """

    """


    @property
    def GlobalConstants(self):
        """
        Returns access to the global constants specified on the project component.

        :return: Global constants interface of the project component
        :rtype: :class:`.GlobalConstants`
        
        """
        return self.__GlobalConstants

    @property
    def MappingFiles(self):
        """
        Returns access to the mapping file list

        :return: Mapping file list object 
        :rtype: :class:`.MappingFiles`
        
        """
        return self.__MappingFiles

    @property
    def PackageParameters(self):
        """
        Returns access to the package parameters specified on the project component.

        :return: Package parameters interface of the project component
        :rtype: :class:`.PackageParameters`
        
        """
        return self.__PackageParameters

    def __init__(self, xmlRpc=None, objId=0):
        super(ProjectFolder, self).__init__(xmlRpc, objId)

        self.__GlobalConstants = GlobalConstants(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "GlobalConstants"))
        self.__MappingFiles = MappingFiles(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "MappingFiles"))
        self.__PackageParameters = PackageParameters(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "PackageParameters"))


    def ActivateAbortOnSubprojectAbort(self):
        """
        Activates abort of whole project on abort of subprojects.
        
        """
        callResult = self._Call("ActivateAbortOnSubprojectAbort", )


    def ActivateAutomaticValueRestore(self):
        """
        Activates value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("ActivateAutomaticValueRestore", )


    def ActivateIndependentSubprojectExecution(self):
        """
        Activates independent execution of subprojects.
        
        """
        callResult = self._Call("ActivateIndependentSubprojectExecution", )


    def AppendComponent(self, component):
        """
        Adds a previously created component at the end of the folder.

        :param component: The project component to be appended
        :type component: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("AppendComponent", component)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ProjectFolder`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def DeactivateAbortOnSubprojectAbort(self):
        """
        Deactivate abort of whole project on abort of subprojects.
        
        """
        callResult = self._Call("DeactivateAbortOnSubprojectAbort", )


    def DeactivateAutomaticValueRestore(self):
        """
        Deactivate value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("DeactivateAutomaticValueRestore", )


    def DeactivateIndependentSubprojectExecution(self):
        """
        Deactivate independent execution of subprojects.
        
        """
        callResult = self._Call("DeactivateIndependentSubprojectExecution", )


    def DisablePkgExecutionOnAbort(self):
        """
        Sets that no Package should be executed in case of test abort.
        
        """
        callResult = self._Call("DisablePkgExecutionOnAbort", )


    def GetComponents(self):
        """
        Returns all direct children of the folder.

        :return: List with all children components
        :rtype: list <:class:`.ProjectComponent`>
        
        """
        callResult = self._Call("GetComponents", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetCustomPkgExecutionOnAbortPkgPath(self):
        """
        Returns the path of the custom Package to be executed upon abort of test execution

        :return: Absolute path to Package file
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomPkgExecutionOnAbortPkgPath", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCondition(self):
        """
        Returns the condition of the custom retries. Returns one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :return: The condition of the custom retry
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomRetryCondition", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCount(self):
        """
        Returns the number of the retries defined on the project component.

        :return: Number of the custom retries
        :rtype: integer
        
        """
        callResult = self._Call("GetCustomRetryCount", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetRandomExecutionOrderState(self):
        """
        Returns the random execution state of this container.

        :return: True if activated, False if deactivated or None if it is inherit from parent.
        :rtype: boolean
        
        """
        callResult = self._Call("GetRandomExecutionOrderState", )

        if callResult is None:
            return None

        return callResult

    def HasCustomPkgExecutionOnAbortSettings(self):
        """
        Returns if the Package execution settings in case of test abort of
        the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomPkgExecutionOnAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRestoreSettings(self):
        """
        Returns if the value restore settings of the parent element are used or overridden by
        custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRestoreSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRetrySettings(self):
        """
        Returns if the retry settings of the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRetrySettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomSubprojectAbortSettings(self):
        """
        Returns if the subprojects abort settings of the parent element are used or
        overridden by custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomSubprojectAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomSubprojectExecutionSettings(self):
        """
        Returns if the subprojects execution settings of the parent element are used or
        overridden by custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomSubprojectExecutionSettings", )

        if callResult is None:
            return None

        return callResult

    def InsertComponent(self, component, position):
        """
        Inserts a previously created component into the folder at the given position.

        :param component: The project component to be inserted
        :type component: :class:`.ProjectComponent`
        :param position: Position to insert the project component
        :type position: integer
        
        """
        callResult = self._Call("InsertComponent", component, position)


    def IsAbortOnSubprojectAbortActivated(self):
        """
        Returns if the abort of whole project on abort of subprojects is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortOnSubprojectAbortActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAbortOnSubprojectAbortDeactivated(self):
        """
        Returns if abort of whole project on abort of subprojects is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortOnSubprojectAbortDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreActivated(self):
        """
        Returns if the automatic value restore is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreDeactivated(self):
        """
        Returns if the automatic value restore is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsIndependentSubprojectExecutionActivated(self):
        """
        Returns if the independent execution of subprojects is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsIndependentSubprojectExecutionActivated", )

        if callResult is None:
            return None

        return callResult

    def IsIndependentSubprojectExecutionDeactivated(self):
        """
        Returns if the independent execution of subprojects is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsIndependentSubprojectExecutionDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsPkgExecutionOnAbortDisabled(self):
        """
        Returns if the Package execution on abort is disabled.

        :return: True if disabled used, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsPkgExecutionOnAbortDisabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetCustomPkgExecutionOnAbortPkgPath(self, packagePath):
        """
        Sets the path for a custom Package to be executed upon abort of test execution

        :param packagePath: Absolute path to Package file
        :type packagePath: unicode
        
        """
        callResult = self._Call("SetCustomPkgExecutionOnAbortPkgPath", packagePath)


    def SetCustomRetryCondition(self, condition):
        """
        Sets the condition of the custom retry. Must be one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :param condition: The condition of the custom retry
        :type condition: unicode
        
        """
        callResult = self._Call("SetCustomRetryCondition", condition)


    def SetCustomRetryCount(self, count):
        """
        Sets the number of the retries for all Packages within the project component.

        :param count: Number of the custom retries
        :type count: integer
        
        """
        callResult = self._Call("SetCustomRetryCount", count)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetRandomExecutionState(self, state):
        """
        Sets the random execution state of this container.
        
        :param state: True to activate, False to deactivate or None for inheritance from parent.
        :type state: boolean
        
        """
        callResult = self._Call("SetRandomExecutionState", state)


    def UseParentPkgExecutionOnAbortSettings(self):
        """
        Sets that the Package execution settings in case of test abort of
        the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentPkgExecutionOnAbortSettings", )


    def UseParentRetrySettings(self):
        """
        Sets that the retry settings of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentRetrySettings", )


    def UseParentSubprojectAbortSettings(self):
        """
        Sets that the settings whether to cancel or end the whole project execution
        on abort of a separately executed subproject of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentSubprojectAbortSettings", )


    def UseParentSubprojectExecutionSettings(self):
        """
        Sets that the settings whether to execute subprojects independently
        of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentSubprojectExecutionSettings", )


    def UseParentValueRestoreSettings(self):
        """
        Sets that the settings whether to restore the value of test quantities after the execution
        of every Package of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentValueRestoreSettings", )



class PackageCall(ProjectComponent):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PackageCall, self).__init__(xmlRpc, objId)



    def ActivateAutomaticValueRestore(self):
        """
        Activates value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("ActivateAutomaticValueRestore", )


    def AddParameterGenerator(self, name, generatorId):
        """
        Adds a parameter generator to the package call

        :param name: Name of the parameter generator
        :type name: unicode
        :param generatorId: Unique generator id of generator to be added
        :type generatorId: unicode
        :return: The parameter generator
        :rtype: :class:`.ParameterGenerator`
        
        """
        callResult = self._Call("AddParameterGenerator", name, generatorId)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def AddParameterSet(self, name, position=None):
        """
        Adds a parameter set to the package call

        :param name: Name of the parameter set
        :type name: unicode
        :param position: Position to insert the parameter set inside the package call
        :type position: integer
        :return: The parameter set
        :rtype: :class:`.ParameterSet`
        
        """
        callResult = self._Call("AddParameterSet", name, position)

        if callResult is None:
            return None


        objId = callResult
        classInstance = ParameterSet
        return classInstance(self._xmlRpc, objId)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PackageCall`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageCall
        return classInstance(self._xmlRpc, objId)


    def DeactivateAutomaticValueRestore(self):
        """
        Deactivate value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("DeactivateAutomaticValueRestore", )


    def DisablePkgExecutionOnAbort(self):
        """
        Sets that no Package should be executed in case of test abort.
        
        """
        callResult = self._Call("DisablePkgExecutionOnAbort", )


    def GetComponents(self):
        """
        Returns all direct children of the package call.

        :return: List with all children components
        :rtype: list <:class:`.ProjectComponent`>
        
        """
        callResult = self._Call("GetComponents", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetCustomPkgExecutionOnAbortPkgPath(self):
        """
        Returns the path of the custom Package to be executed upon abort of test execution

        :return: Absolute path to Package file
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomPkgExecutionOnAbortPkgPath", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCondition(self):
        """
        Returns the condition of the custom retries. Returns one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :return: The condition of the custom retry
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomRetryCondition", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCount(self):
        """
        Returns the number of the retries defined on the project component.

        :return: Number of the custom retries
        :rtype: integer
        
        """
        callResult = self._Call("GetCustomRetryCount", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPackage(self):
        """
        Returns the referenced package.

        :return: referenced package
        :rtype: :class:`.Package`
        :raise ApiError: If the referenced package file (\*.pkg) does not exist.
        
        """
        callResult = self._Call("GetPackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetPackagePath(self):
        """
        Returns the absolute path to referenced package.

        :return: absolute path to referenced package
        :rtype: unicode
        
        """
        callResult = self._Call("GetPackagePath", )

        if callResult is None:
            return None

        return callResult

    def GetParameterSets(self, skipDisabled=True):
        """
        Returns all parameter sets of package call.

        :param skipDisabled: Defines whether disabled components should be included.
        :type skipDisabled: boolean
        :return: Parameter sets
        :rtype: list<:class:`.ParameterSet`>
        
        """
        callResult = self._Call("GetParameterSets", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ParameterSet
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetTestCaseId(self):
        """
        Returns the test case id of the package test component (not for RQM).
        If no id defined, the test case id of the corresponding package will be returned.

        :return: Test case id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestCaseId", )

        if callResult is None:
            return None

        return callResult

    def GetTestScriptId(self):
        """
        Returns the test script id of the corresponding package will be returned.

        :return: Test script id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestScriptId", )

        if callResult is None:
            return None

        return callResult

    def HasCustomPkgExecutionOnAbortSettings(self):
        """
        Returns if the Package execution settings in case of test abort of
        the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomPkgExecutionOnAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRestoreSettings(self):
        """
        Returns if the value restore settings of the parent element are used or overridden by
        custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRestoreSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRetrySettings(self):
        """
        Returns if the retry settings of the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRetrySettings", )

        if callResult is None:
            return None

        return callResult

    def InsertParameterSet(self, parameterSet, position=None):
        """
        Adds a parameter set to the package call

        :param parameterSet: parameter set
        :type parameterSet: :class:`.ParameterSet`
        :param position: Position to insert the parameter set inside the package call
        :type position: integer
        
        """
        callResult = self._Call("InsertParameterSet", parameterSet, position)


    def IsAutomaticValueRestoreActivated(self):
        """
        Returns if the automatic value restore is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreDeactivated(self):
        """
        Returns if the automatic value restore is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsPkgExecutionOnAbortDisabled(self):
        """
        Returns if the Package execution on abort is disabled.

        :return: True if disabled used, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsPkgExecutionOnAbortDisabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetCustomPkgExecutionOnAbortPkgPath(self, packagePath):
        """
        Sets the path for a custom Package to be executed upon abort of test execution

        :param packagePath: Absolute path to Package file
        :type packagePath: unicode
        
        """
        callResult = self._Call("SetCustomPkgExecutionOnAbortPkgPath", packagePath)


    def SetCustomRetryCondition(self, condition):
        """
        Sets the condition of the custom retry. Must be one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :param condition: The condition of the custom retry
        :type condition: unicode
        
        """
        callResult = self._Call("SetCustomRetryCondition", condition)


    def SetCustomRetryCount(self, count):
        """
        Sets the number of the retries for all Packages within the project component.

        :param count: Number of the custom retries
        :type count: integer
        
        """
        callResult = self._Call("SetCustomRetryCount", count)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetTestCaseId(self, testCaseId):
        """
        Sets the test case id of the current package test.
        Must not be used with RQM-Adapter!

        :param testCaseId: Test case id
        :type testCaseId: unicode
        
        """
        callResult = self._Call("SetTestCaseId", testCaseId)


    def UseParentPkgExecutionOnAbortSettings(self):
        """
        Sets that the Package execution settings in case of test abort of
        the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentPkgExecutionOnAbortSettings", )


    def UseParentRetrySettings(self):
        """
        Sets that the retry settings of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentRetrySettings", )


    def UseParentValueRestoreSettings(self):
        """
        Sets that the settings whether to restore the value of test quantities after the execution
        of every Package of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentValueRestoreSettings", )



class TestStepContainer(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TestStepContainer, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TestStepContainer`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TraceStepContainer(TraceStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceStepContainer, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.TraceStepContainer`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class ProjectGenerator(ParameterGenerator):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ProjectGenerator, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ProjectGenerator`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ProjectGenerator
        return classInstance(self._xmlRpc, objId)


    def GenerateProject(self, destinationPath):
        """
        Initiates the execution of the generator and stores the result as a new project file.

        :param destinationPath: Absolute destination path to store the project file
        :type destinationPath: unicode
        
        """
        callResult = self._Call("GenerateProject", destinationPath)


    def GetAttribute(self, attributeName):
        """
        Returns the value of the attribute of the given name.
        Value is returned as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributeName: Name of attribute to be returned
        :type attributeName: unicode
        :return: attribute value
        :rtype: unicode
        
        """
        callResult = self._Call("GetAttribute", attributeName)

        if callResult is None:
            return None

        return callResult

    def GetGeneratorAttributes(self):
        """
        Returns all the stored attributes of the generator.
        Values are returned as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :return: Dictionary mapping attributes names to values
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetGeneratorAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetGeneratorId(self):
        """
        Returns the unique generator id of the referenced parameter generator.

        :return: generator id
        :rtype: unicode
        
        """
        callResult = self._Call("GetGeneratorId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetAttribute(self, attributeName, value):
        """
        Sets the value of the attribute of the given name.
        Value has to be provided as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributeName: Name of attribute to be returned
        :type attributeName: unicode
        :param value: attribute value
        :type value: unicode
        
        """
        callResult = self._Call("SetAttribute", attributeName, value)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetGeneratorAttributes(self, attributesDict):
        """
        Overwrites the existing attributes of the generator with the provided ones.
        Values have to be provided as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributesDict: Dictionary mapping attribute names to values
        :type attributesDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetGeneratorAttributes", attributesDict)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class PackageGenerator(ParameterGenerator):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(PackageGenerator, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.PackageGenerator`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PackageGenerator
        return classInstance(self._xmlRpc, objId)


    def GenerateProject(self, destinationPath):
        """
        Initiates the execution of the generator and stores the result as a new project file.

        :param destinationPath: Absolute destination path to store the project file
        :type destinationPath: unicode
        
        """
        callResult = self._Call("GenerateProject", destinationPath)


    def GetAttribute(self, attributeName):
        """
        Returns the value of the attribute of the given name.
        Value is returned as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributeName: Name of attribute to be returned
        :type attributeName: unicode
        :return: attribute value
        :rtype: unicode
        
        """
        callResult = self._Call("GetAttribute", attributeName)

        if callResult is None:
            return None

        return callResult

    def GetGeneratorAttributes(self):
        """
        Returns all the stored attributes of the generator.
        Values are returned as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :return: Dictionary mapping attributes names to values
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetGeneratorAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetGeneratorId(self):
        """
        Returns the unique generator id of the referenced parameter generator.

        :return: generator id
        :rtype: unicode
        
        """
        callResult = self._Call("GetGeneratorId", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetAttribute(self, attributeName, value):
        """
        Sets the value of the attribute of the given name.
        Value has to be provided as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributeName: Name of attribute to be returned
        :type attributeName: unicode
        :param value: attribute value
        :type value: unicode
        
        """
        callResult = self._Call("SetAttribute", attributeName, value)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetGeneratorAttributes(self, attributesDict):
        """
        Overwrites the existing attributes of the generator with the provided ones.
        Values have to be provided as unicode.
        Examples:
        int 5 --> u"5"
        string "5" --> u"'5'"
        list [1,2,3] --> u"[1,2,3]"

        :param attributesDict: Dictionary mapping attribute names to values
        :type attributesDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetGeneratorAttributes", attributesDict)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)



class ProjectCall(ProjectComponent):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ProjectCall, self).__init__(xmlRpc, objId)



    def ActivateAbortOnSubprojectAbort(self):
        """
        Activates abort of whole project on abort of subprojects.
        
        """
        callResult = self._Call("ActivateAbortOnSubprojectAbort", )


    def ActivateAutomaticValueRestore(self):
        """
        Activates value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("ActivateAutomaticValueRestore", )


    def ActivateIndependentSubprojectExecution(self):
        """
        Activates independent execution of subprojects.
        
        """
        callResult = self._Call("ActivateIndependentSubprojectExecution", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ProjectCall`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ProjectCall
        return classInstance(self._xmlRpc, objId)


    def DeactivateAbortOnSubprojectAbort(self):
        """
        Deactivate abort of whole project on abort of subprojects.
        
        """
        callResult = self._Call("DeactivateAbortOnSubprojectAbort", )


    def DeactivateAutomaticValueRestore(self):
        """
        Deactivate value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("DeactivateAutomaticValueRestore", )


    def DeactivateIndependentSubprojectExecution(self):
        """
        Deactivate independent execution of subprojects.
        
        """
        callResult = self._Call("DeactivateIndependentSubprojectExecution", )


    def DisablePkgExecutionOnAbort(self):
        """
        Sets that no Package should be executed in case of test abort.
        
        """
        callResult = self._Call("DisablePkgExecutionOnAbort", )


    def GetAlternativeReportDirectory(self):
        """
        Returns the name of the directory within the report directory, in which the results of the
        separate project execution should be saved.

        :return: name of directory to store results
        :rtype: unicode
        
        """
        callResult = self._Call("GetAlternativeReportDirectory", )

        if callResult is None:
            return None

        return callResult

    def GetCustomPkgExecutionOnAbortPkgPath(self):
        """
        Returns the path of the custom Package to be executed upon abort of test execution

        :return: Absolute path to Package file
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomPkgExecutionOnAbortPkgPath", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCondition(self):
        """
        Returns the condition of the custom retries. Returns one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :return: The condition of the custom retry
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomRetryCondition", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCount(self):
        """
        Returns the number of the retries defined on the project component.

        :return: Number of the custom retries
        :rtype: integer
        
        """
        callResult = self._Call("GetCustomRetryCount", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetProject(self):
        """
        Returns the referenced project.

        :return: Referenced project
        :rtype: :class:`.Project`
        :raise ApiError: If the referenced project file (\*.prj) does not exist.
        
        """
        callResult = self._Call("GetProject", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Project
        return classInstance(self._xmlRpc, objId)


    def GetProjectPath(self):
        """
        Returns the absolute path to referenced project.

        :return: absolute path to referenced project
        :rtype: unicode
        
        """
        callResult = self._Call("GetProjectPath", )

        if callResult is None:
            return None

        return callResult

    def HasCustomPkgExecutionOnAbortSettings(self):
        """
        Returns if the Package execution settings in case of test abort of
        the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomPkgExecutionOnAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRestoreSettings(self):
        """
        Returns if the value restore settings of the parent element are used or overridden by
        custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRestoreSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRetrySettings(self):
        """
        Returns if the retry settings of the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRetrySettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomSubprojectAbortSettings(self):
        """
        Returns if the subprojects abort settings of the parent element are used or
        overridden by custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomSubprojectAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomSubprojectExecutionSettings(self):
        """
        Returns if the subprojects execution settings of the parent element are used or
        overridden by custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomSubprojectExecutionSettings", )

        if callResult is None:
            return None

        return callResult

    def IsAbortOnSubprojectAbortActivated(self):
        """
        Returns if the abort of whole project on abort of subprojects is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortOnSubprojectAbortActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAbortOnSubprojectAbortDeactivated(self):
        """
        Returns if abort of whole project on abort of subprojects is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortOnSubprojectAbortDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreActivated(self):
        """
        Returns if the automatic value restore is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreDeactivated(self):
        """
        Returns if the automatic value restore is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsIndependentSubprojectExecutionActivated(self):
        """
        Returns if the independent execution of subprojects is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsIndependentSubprojectExecutionActivated", )

        if callResult is None:
            return None

        return callResult

    def IsIndependentSubprojectExecutionDeactivated(self):
        """
        Returns if the independent execution of subprojects is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsIndependentSubprojectExecutionDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsPkgExecutionOnAbortDisabled(self):
        """
        Returns if the Package execution on abort is disabled.

        :return: True if disabled used, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsPkgExecutionOnAbortDisabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveFromProject(self):
        """
        Removes this component from the project.

        :raise ApiError: if the component is not part of any project
        
        """
        callResult = self._Call("RemoveFromProject", )


    def SetAlternativeReportDirectory(self, dirName):
        """
        Sets the name of the directory within the report directory, in which the results of the
        separate project execution should be saved.

        :param dirName: name of directory to store results
        :type dirName: unicode
        
        """
        callResult = self._Call("SetAlternativeReportDirectory", dirName)


    def SetCustomPkgExecutionOnAbortPkgPath(self, packagePath):
        """
        Sets the path for a custom Package to be executed upon abort of test execution

        :param packagePath: Absolute path to Package file
        :type packagePath: unicode
        
        """
        callResult = self._Call("SetCustomPkgExecutionOnAbortPkgPath", packagePath)


    def SetCustomRetryCondition(self, condition):
        """
        Sets the condition of the custom retry. Must be one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :param condition: The condition of the custom retry
        :type condition: unicode
        
        """
        callResult = self._Call("SetCustomRetryCondition", condition)


    def SetCustomRetryCount(self, count):
        """
        Sets the number of the retries for all Packages within the project component.

        :param count: Number of the custom retries
        :type count: integer
        
        """
        callResult = self._Call("SetCustomRetryCount", count)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def UseParentPkgExecutionOnAbortSettings(self):
        """
        Sets that the Package execution settings in case of test abort of
        the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentPkgExecutionOnAbortSettings", )


    def UseParentRetrySettings(self):
        """
        Sets that the retry settings of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentRetrySettings", )


    def UseParentSubprojectAbortSettings(self):
        """
        Sets that the settings whether to cancel or end the whole project execution
        on abort of a separately executed subproject of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentSubprojectAbortSettings", )


    def UseParentSubprojectExecutionSettings(self):
        """
        Sets that the settings whether to execute subprojects independently
        of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentSubprojectExecutionSettings", )


    def UseParentValueRestoreSettings(self):
        """
        Sets that the settings whether to restore the value of test quantities after the execution
        of every Package of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentValueRestoreSettings", )



class Plot(TraceStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Plot, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendPlotSignal(self, plotSignal):
        """
        Adds a plot signal to the plot.

        :param plotSignal: The plot signal to be added
        :type plotSignal: :class:`.PlotSignal`
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots and call :meth:`.PlotSubPlot.AppendPlotSignal` on one of the sub plots to append a signal.
        """
        callResult = self._Call("AppendPlotSignal", plotSignal)


    def ApplySignalsFromParent(self):
        """
        Convenience method to plot all active signals of the parent.
        All generic signals are used if the parent has no special signal management.

        @note: Signals that are already defined will be overwritten.
        
        """
        callResult = self._Call("ApplySignalsFromParent", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.Plot`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Plot
        return classInstance(self._xmlRpc, objId)


    def EnablePlotTypes(self, overview=None, details=None):
        """
        Set the plot types to be created.

        :param overview: True will enable, False will disable the overview plot. Pass None to leave this setting unchanged.
        :type overview: boolean
        :param details: True will enable, False will disable the detail plots. Pass None to leave this setting unchanged.
        :type details: boolean
        
.. deprecated:: 6.4.1
      Use :meth:`.GetOverviewConfig`, :meth:`.GetTriggerRangeConfig` or :meth:`.GetDetailsConfig` instead.
        """
        callResult = self._Call("EnablePlotTypes", overview, details)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetDetailPlotsEnabled(self):
        """
        Returns whether detail plots will be created.

        :return: True if detail plots will be created
        :rtype: boolean
        
.. deprecated:: 6.4.1
      Use :meth:`.GetOverviewConfig`, :meth:`.GetTriggerRangeConfig` or :meth:`.GetDetailsConfig` instead.
        """
        callResult = self._Call("GetDetailPlotsEnabled", )

        if callResult is None:
            return None

        return callResult

    def GetDetailsConfig(self):
        """
        Returns the sub configuration for detail plots, i.e. those around spots and ranges.
        
        :return: The sub configuration for detail plots
        :rtype: :class:`.PlotSubConfig`
        
        """
        callResult = self._Call("GetDetailsConfig", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSubConfig
        return classInstance(self._xmlRpc, objId)


    def GetGrid(self):
        """
        Returns which grid lines are visible.

        :return: 'none', 'both', 'horizontal' or 'vertical'
        :rtype: unicode
        
.. deprecated:: 6.5.0
      Since sub plots are introduced call :meth:`.GetXGrid` to get whether x grid is on. Call :meth:`.GetSubPlots` to get all sub plots, and use :meth:`.PlotSubPlot.GetYRasterMode` instead to get whether y grid is on.
        """
        callResult = self._Call("GetGrid", )

        if callResult is None:
            return None

        return callResult

    def GetImageSize(self):
        """
        Returns the size of the plot in pixels.

        :return: list(width, height)
        :rtype: list<int>
        
        """
        callResult = self._Call("GetImageSize", )

        if callResult is None:
            return None

        return callResult

    def GetLegendLocation(self):
        """
        Returns the location of the legend.

        :return: Number between 0 and 10. 12 means legend is hidden.
        :rtype: int
        
        """
        callResult = self._Call("GetLegendLocation", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOverviewConfig(self):
        """
        Returns the sub configuration for the overview plot.
        
        :return: The sub configuration for the overview plot
        :rtype: :class:`.PlotSubConfig`
        
        """
        callResult = self._Call("GetOverviewConfig", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSubConfig
        return classInstance(self._xmlRpc, objId)


    def GetOverviewPlotEnabled(self):
        """
        Returns whether an overview plot will be created.

        :return: True if an overview plot will be created
        :rtype: boolean
        
.. deprecated:: 6.4.1
      Use :meth:`.GetOverviewConfig`, :meth:`.GetTriggerRangeConfig` or :meth:`.GetDetailsConfig` instead.
        """
        callResult = self._Call("GetOverviewPlotEnabled", )

        if callResult is None:
            return None

        return callResult

    def GetPlotCondition(self):
        """
        Returns the condition for which verdict the plot will be created.

        :return: '' if always otherwise 'SUCCESS' or 'FAILED'
        :rtype: unicode
        
.. deprecated:: 6.4.1
      Use :meth:`.GetOverviewConfig`, :meth:`.GetTriggerRangeConfig` or :meth:`.GetDetailsConfig` instead.
        """
        callResult = self._Call("GetPlotCondition", )

        if callResult is None:
            return None

        return callResult

    def GetPlotSignals(self):
        """
        Returns a merged list of all signals of the sub plots.

        :return: The signals of the plot
        :rtype: list<:class:`.PlotSignal`>
        
        """
        callResult = self._Call("GetPlotSignals", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PlotSignal
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetScalingMode(self):
        """
        Returns the scaling mode for the y-axis.

        :return: the scaling mode (0 for automatic, 1 for manual scaling mode)
        :rtype: int
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`.PlotSubPlot.GetAxes`, and call :meth:`-PlotAxis.GetScalingMode` for each axis instead.
        """
        callResult = self._Call("GetScalingMode", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMaxActive(self):
        """
        Returns whether the maximum value for the y-axis is active or not.

        :return: True or False
        :rtype: bool
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`.PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.GetScalingYMaxActive` for each axis instead.
        """
        callResult = self._Call("GetScalingYMaxActive", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMaxValue(self):
        """
        Returns the maximum value for the y-axis.

        :return: the maximum value
        :rtype: float
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.GetScalingYMaxValue` for each axis instead.
        """
        callResult = self._Call("GetScalingYMaxValue", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMinActive(self):
        """
        Returns whether the minimum value for the y-axis is active or not.

        :return: True or False
        :rtype: bool
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`.PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.GetScalingYMinActive` for each axis instead.
        """
        callResult = self._Call("GetScalingYMinActive", )

        if callResult is None:
            return None

        return callResult

    def GetScalingYMinValue(self):
        """
        Returns the minimum value for the y-axis.

        :return: the minimum value
        :rtype: float
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.GetScalingYMinValue` for each axis instead.
        """
        callResult = self._Call("GetScalingYMinValue", )

        if callResult is None:
            return None

        return callResult

    def GetShowUnits(self):
        """
        Returns whether the units of the signals are shown in the legend.

        :return: True or False
        :rtype: bool
        
        """
        callResult = self._Call("GetShowUnits", )

        if callResult is None:
            return None

        return callResult

    def GetShowYLabels(self):
        """
        Returns whether y labels are shown. There are three different
        values possible. For the automatic mode (value 2), an y label will be hidden
        if there is a legend, there is only one y axis for a sub plot, and
        there are multiple signals assigned to this axis.

        :return: 0 if y labels are always hidden,
                 1 if y labels are always shown,
                 2 if the visibility is automatically determined for each axis
        :rtype: int
        
        """
        callResult = self._Call("GetShowYLabels", )

        if callResult is None:
            return None

        return callResult

    def GetSignalNameType(self):
        """
        Returns which kind of name for the signal names is shown in the plot.

        :return: 'tracestep', 'generic', 'mapping' or 'file'
        :rtype: unicode

        
        """
        callResult = self._Call("GetSignalNameType", )

        if callResult is None:
            return None

        return callResult

    def GetSubPlots(self):
        """
        Returns a list of all sub plots.
        The list of sub plots can't be changed. The first and third one
        are normal sub plots of type "common". The second plot is
        of type "separate". For each signals of this sub plot there will
        be a smaller sub plot.
        
        :return: The list of all sub plots
        :rtype: list<:class:`.PlotSubPlot`>
        
        """
        callResult = self._Call("GetSubPlots", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PlotSubPlot
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTriggerRangeConfig(self):
        """
        Returns the sub configuration for the trigger range plots.
        
        :return: The sub configuration for the trigger range plots
        :rtype: :class:`.PlotSubConfig`
        
        """
        callResult = self._Call("GetTriggerRangeConfig", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = PlotSubConfig
        return classInstance(self._xmlRpc, objId)


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def GetXGrid(self):
        """
        Returns whether vertical grid lines are visible.

        :return: True if visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("GetXGrid", )

        if callResult is None:
            return None

        return callResult

    def GetXLabel(self):
        """
        Returns the label for the x-axis.
        
        :return: The label for the x-axis.
        :rtype: unicode
        
        """
        callResult = self._Call("GetXLabel", )

        if callResult is None:
            return None

        return callResult

    def GetYLabel(self):
        """
        Returns the label for the y-axis.

        :return: The label for the y-axis.
        :rtype: unicode
        
.. deprecated:: 6.5.0
      The attribute y label is removed since 6.5.0.
        """
        callResult = self._Call("GetYLabel", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetGrid(self, grid):
        """
        Sets wich grid lines are visible.

        :param grid: 'none', 'both', 'horizontal' or 'vertical'
        :type grid: unicode
        
.. deprecated:: 6.5.0
      Since sub plots are introduced use :meth:`.SetXGrid` for x grid. Call :meth:`.GetSubPlots` to get all sub plots, and use :meth:`.PlotSubPlot.SetYRasterMode` for y grid.
        """
        callResult = self._Call("SetGrid", grid)


    def SetImageSize(self, width, height):
        """
        Sets the size of the plot in pixels.

        :param width: The new width
        :type width: int
        :param height: The new height
        :type height: int
        
        """
        callResult = self._Call("SetImageSize", width, height)


    def SetLegendLocation(self, location):
        """
        Sets the location where the legend should be placed in the plot.

        :param location: Number between 0 and 11, 12 to hide legend
        :type location: int
        :raise ValueError: If location is not a valid parameter
        
        """
        callResult = self._Call("SetLegendLocation", location)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetPlotCondition(self, plotCondition):
        """
        Sets the condition for which verdict the plot will be created.

        :param plotCondition: '' if always otherwise 'SUCCESS' or 'FAILED'
        :type plotCondition: unicode
        
.. deprecated:: 6.4.1
      Use :meth:`.GetOverviewConfig`, :meth:`.GetTriggerRangeConfig` or :meth:`.GetDetailsConfig` instead.
        """
        callResult = self._Call("SetPlotCondition", plotCondition)


    def SetScalingMode(self, mode):
        """
        Sets the scaling mode for the y-axis.

        :param mode: 0 for automatic, 1 for manual scaling mode
        :type mode: int
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`.PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.SetScalingMode` for each axis instead.
        """
        callResult = self._Call("SetScalingMode", mode)


    def SetScalingYMaxActive(self, value):
        """
        Sets whether the maximum value for the y-axis should be active or not.

        :param value: True or False
        :type value: bool
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.SetScalingYMaxActive` for each axis instead.
        """
        callResult = self._Call("SetScalingYMaxActive", value)


    def SetScalingYMaxValue(self, value):
        """
        Sets the maximum value for the y-axis.

        :param value: The maximum value
        :type value: float
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`.PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.SetScalingYMaxValue` for each axis instead.
        """
        callResult = self._Call("SetScalingYMaxValue", value)


    def SetScalingYMinActive(self, value):
        """
        Sets whether the minimum value for the y-axis should be active or not.

        :param value: True or False
        :type value: bool
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`.PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.SetScalingYMinActive` for each axis instead.
        """
        callResult = self._Call("SetScalingYMinActive", value)


    def SetScalingYMinValue(self, value):
        """
        Sets the minimum value for the y-axis.

        :param value: The minimum value
        :type value: float
        
.. deprecated:: 6.5.0
      Since sub plots and separate axes are introduced use :meth:`.GetSubPlots` to get all sub plots, on each sub plot :meth:`PlotSubPlot.GetAxes`, and call :meth:`.PlotAxis.SetScalingYMinValue` for each axis instead.
        """
        callResult = self._Call("SetScalingYMinValue", value)


    def SetShowUnits(self, show):
        """
        Sets whether the units of the signals will be shown in the legend.

        :param show: True or False
        :type show: bool
        
        """
        callResult = self._Call("SetShowUnits", show)


    def SetShowYLabels(self, showYLabels):
        """
        Sets if y labels are shown.

        :param showYLabels: 0 if y labels are always hidden,
                            1 if y labels are always shown,
                            2 if the visibility is automatically determined for each axis
        :type showYLabels: int
        :raise ValueError: If showYLabels is not a valid parameter
        
        """
        callResult = self._Call("SetShowYLabels", showYLabels)


    def SetSignalNameType(self, signalNameType):
        """
        Sets which kind of names for the signals are shown in the plot.

        :param signalNameType: 'tracestep', 'generic', 'mapping' or 'file'
                                - 'generic':     name of the generic signals
                                - 'file':        name of the signal in the recording file
                                - 'mapping':     name of the signal in the mapping view
                                - 'tracestep':   name of the signal like in the trace step template
        :type signalNameType: unicode
        
        """
        callResult = self._Call("SetSignalNameType", signalNameType)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetXGrid(self, grid):
        """
        Sets whether vertical grid lines are visible.

        :param grid: True to set visible, else False.
        :type grid: boolean
        
        """
        callResult = self._Call("SetXGrid", grid)


    def SetXLabel(self, label):
        """
        Sets the label for the x-axis.

        :param label: The new label for the x-axis.
        :type label: unicode
        
        """
        callResult = self._Call("SetXLabel", label)


    def SetYLabel(self, label):
        """
        Sets the label for the y-axis.

        :param label: The new label for the y-axis.
        :type label: unicode
        
.. deprecated:: 6.5.0
      The attribute y label is removed since 6.5.0.
        """
        callResult = self._Call("SetYLabel", label)



class TraceAnalysisReference(TraceStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceAnalysisReference, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AssignGenericSignal(self, direction, sigName, genSig):
        """
        Bind a generic signal to a signal of the referenced trace analysis.
        
        :param direction: Direction of the binding. Possible values are "IN" or "OUT".
        :type direction: unicode

        :param sigName: Name of the signal in the referenced trace analysis
        :type sigName: unicode

        :param genSig: The generic signal object
        :type genSig: :class:`.GenericSignal`

        :return: An object representing the signal binding. If there is already a signal
                 binding for sigName, the signal binding object and its settings will be
                 reused; otherwise, a new signal binding object will be created.
        :rtype: :class:`.SignalBinding`
        
        """
        callResult = self._Call("AssignGenericSignal", direction, sigName, genSig)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def AssignGenericSignalByName(self, direction, sigName, genSigName):
        """
        Bind a generic signal to a signal of the referenced trace analysis.
        
        :param direction: Direction of the binding. Possible values are "IN" or "OUT".
        :type direction: unicode

        :param sigName: Name of the signal in the referenced trace analysis
        :type sigName: unicode

        :param genSigName: Name of the generic signal
        :type genSigName: unicode

        :return: An object representing the signal binding. If there is already a signal
                 binding for sigName, the signal binding object and its settings will be
                 reused; otherwise, a new signal binding object will be created.
        :rtype: :class:`.SignalBinding`
        
        """
        callResult = self._Call("AssignGenericSignalByName", direction, sigName, genSigName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def ClearSignalBinding(self, direction, sigName):
        """
        Clears the signal binding for the given signal name.
        
        :param direction: Direction of the binding. Possible values: "IN" or "OUT"
        :type direction: unicode

        :param sigName: The signal name
        :type sigName: unicode
        
        """
        callResult = self._Call("ClearSignalBinding", direction, sigName)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.TraceAnalysisReference`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceAnalysisReference
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPackagePath(self):
        """
        Returns the path to the referenced package.

        :return: The package path. Returns None if no path is set.
        :rtype: unicode
        
        """
        callResult = self._Call("GetPackagePath", )

        if callResult is None:
            return None

        return callResult

    def GetParameter(self, paramName):
        """
        Retrieves the expression assigned to a template parameter.

        :param paramName: Name of the parameter
        :type paramName: unicode
        :return: Expression assigned to the parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameter", paramName)

        if callResult is None:
            return None

        return callResult

    def GetParameterNames(self):
        """
        Returns the names of parameters that can be configured for the referenced package.
        
        :return: The list of valid parameter names
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetParameterNames", )

        if callResult is None:
            return None

        return callResult

    def GetPkgParameters(self):
        """
        Returns a list of the incoming parameter names located in the referenced package.

        :return: The parameter names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetPkgParameters", )

        if callResult is None:
            return None

        return callResult

    def GetPkgTraceAnalyses(self):
        """
        Returns a list of the trace analysis names located in the referenced package.

        :return: The names of the trace analyses
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetPkgTraceAnalyses", )

        if callResult is None:
            return None

        return callResult

    def GetSignalBinding(self, direction, sigName):
        """
        Get the signal binding for a signal.
        
        :param direction: Direction of the binding. Possible values: "IN" or "OUT"
        :type direction: unicode
        :param sigName: Name of the signal in the referenced trace analysis
        :type sigName: unicode

        :rtype: :class:`.SignalBinding`
        :return: An object representing the signal binding.
       
        """
        callResult = self._Call("GetSignalBinding", direction, sigName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceAnalysisName(self):
        """
        Returns the name of the referenced trace analysis.

        :rtype: unicode
        :return: The name of the referenced trace analysis
        
        """
        callResult = self._Call("GetTraceAnalysisName", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsRunOptimized(self):
        """
        Returns whether the episode execution is optimized based on numpy arrays.
        :return: True if optimized, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("IsRunOptimized", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetPackagePath(self, packagePath):
        """
        Sets the package path.
        
        :note: Signal bindings will be synchronized. Deprecated bindings will be deleted.
        
        :param packagePath: The package path 
        :type packagePath: unicode
        
        """
        callResult = self._Call("SetPackagePath", packagePath)


    def SetParameter(self, paramName, paramValue):
        """
        Assigns a value to a template parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :param paramValue: Value to assign to the parameter (can be an expression)
        :type paramValue: string
        
        """
        callResult = self._Call("SetParameter", paramName, paramValue)


    def SetParameters(self, paramDict):
        """
        Assigns values to template parameters.

        :param paramDict: Dictionary of parameter name -> parameter value (expression) mappings
        :type paramDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetParameters", paramDict)


    def SetRunOptimized(self, value):
        """
        Sets whether the episode is executed optimized based on numpy arrays.
        :param value: True if optimized, else False.
        :type value: boolean
        
        """
        callResult = self._Call("SetRunOptimized", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTraceAnalysisName(self, name):
        """
        Sets the name of the referenced trace analysis.
        
        :note: Signal bindings will be synchronized. Deprecated bindings will be deleted.

        :param name: The name
        :type name: unicode
        
        """
        callResult = self._Call("SetTraceAnalysisName", name)



class BooleanExpectation(ExpressionExpectationBase):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(BooleanExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.BooleanExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = BooleanExpectation
        return classInstance(self._xmlRpc, objId)


    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self):
        """
        Returns the truth value.
        
        :return: The truth value
        :rtype: boolean
        
        """
        callResult = self._Call("GetValue", )

        if callResult is None:
            return None

        return callResult

    def SetExpression(self, expression):
        """
        Sets the expectations expression. Allowed expressions: 'value' for 
        boolean True and 'not value' for boolean False.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)


    def SetValue(self, truthValue):
        """
        Sets the truth value.
        
        :param truthValue: The new truth value
        :type truthValue: boolean
        
        """
        callResult = self._Call("SetValue", truthValue)



class NumericExpressionExpectation(ExpressionExpectationBase):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(NumericExpressionExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.NumericExpressionExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = NumericExpressionExpectation
        return classInstance(self._xmlRpc, objId)


    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def SetExpression(self, expression):
        """
        Sets the expectations expression.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)



class ExpressionExpectation(ExpressionExpectationBase):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(ExpressionExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.ExpressionExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ExpressionExpectation
        return classInstance(self._xmlRpc, objId)


    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def SetExpression(self, expression):
        """
        Sets the expectations expression.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)



class StringExpressionExpectation(ExpressionExpectationBase):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(StringExpressionExpectation, self).__init__(xmlRpc, objId)



    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.StringExpressionExpectation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = StringExpressionExpectation
        return classInstance(self._xmlRpc, objId)


    def GetCaseSensitive(self):
        """
        Returns whether the comparison should be case-sensitive.

        :return: True if case-sensitive, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("GetCaseSensitive", )

        if callResult is None:
            return None

        return callResult

    def GetExpression(self):
        """
        Returns the expectations expression.
        
        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def SetCaseSensitive(self, caseSensitive):
        """
        Sets whether the comparison should be case-sensitive.

        :param caseSensitive: True if case-sensitive, else False.
        :type caseSensitive: boolean
        
        """
        callResult = self._Call("SetCaseSensitive", caseSensitive)


    def SetExpression(self, expression):
        """
        Sets the expectations expression.
        
        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)



class TsBreak(TestStep):
    """

    Api- of the break utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBreak, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBreak`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBreak
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class MappingTestStep(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(MappingTestStep, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.MappingTestStep`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsUserInterface(TestStep):
    """

    Basis-API-Fassade aller User Interface Utility Testschritte.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsUserInterface, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsUserInterface`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def DeactivateSaveInVariable(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveInVariable", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDialogDescriptionExpression(self):
        """
        Returns the dialog description expression.

        :return: Dialog description expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogDescriptionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDialogTitleExpression(self):
        """
        Returns the dialog title expression.

        :return: Dialog title expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogTitleExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Save in variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaximizeEnabled(self):
        """
        Returns whether the window will be maximized or not.

        :return: Whether the window will be maximized
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaximizeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDialogDescriptionExpression(self, descrExpr):
        """
        Sets the dialog description expression.

        :param descrExpr: Dialog description expression
        :type descrExpr: unicode
        
        """
        callResult = self._Call("SetDialogDescriptionExpression", descrExpr)


    def SetDialogTitleExpression(self, titleExpression):
        """
        Sets the dialog title expression.

        :param titleExpression: Dialog title expression
        :type titleExpression: unicode
        
        """
        callResult = self._Call("SetDialogTitleExpression", titleExpression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetMaximize(self, maximize=True):
        """
        Sets whether the window will be maximized or not.

        :param maximize: Whether the window will be maximized
        :type maximize: boolean
        
        """
        callResult = self._Call("SetMaximize", maximize)


    def SetSaveInVariableName(self, varName):
        """
        Sets the save in variable name.

        :param varName: Variable name
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsStartStimulus(TestStep):
    """

     of the start stimulus utility.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsStartStimulus, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsStartStimulus`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStartStimulus
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetInstanceName(self):
        """
        Returns the instance name of the stimulus.

        :return: Instance name of the stimulus
        :rtype: unicode
        
        """
        callResult = self._Call("GetInstanceName", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPathExpression(self):
        """
        Returns the path to the source stimulation file.

        :return: Path to the source stimulation file
        :rtype: unicode
        
        """
        callResult = self._Call("GetPathExpression", )

        if callResult is None:
            return None

        return callResult

    def GetStimuliAssignments(self):
        """
        Returns the stimulus assignments.

        :return: Assignment (1:n) of STI signals to test quantities (list of mapping references 
                 as strings). E.g. {'stiSignal': ['mappingRef1', 'mappingRef2']}
        :rtype: dict<unicode:list<unicode>>
        
        """
        callResult = self._Call("GetStimuliAssignments", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def LoadSignalNames(self):
        """
        Returns a list of all signal names of the previously set \*.sti file.
        If no path is set an empty list will be returned.

        :return: list of signal names
        :rtype: list<unicode>
        
        """
        callResult = self._Call("LoadSignalNames", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetInstanceName(self, instanceName):
        """
        Sets the instance name of the stimulus.

        :param instanceName: Instance name of the stimulus
        :type instanceName: unicode
        
        """
        callResult = self._Call("SetInstanceName", instanceName)


    def SetPathExpression(self, path):
        """
        Sets the path to the source stimulation file.

        :param path: Path to the source stimulation file
        :type path: unicode
        
        """
        callResult = self._Call("SetPathExpression", path)


    def SetStimuliAssignments(self, stimuliAssignment):
        """
        Sets the stimulus assignments.

        :param stimuliAssignment: Assignment (1:n) of STI signals to test quantities (list of 
                                  mapping references as strings). E.g. {'stiSignal': 
                                  ['mappingRef1', 'mappingRef2']}
        :type stimuliAssignment: dict<unicode:list<unicode>>
        
        """
        callResult = self._Call("SetStimuliAssignments", stimuliAssignment)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsExit(TestStep):
    """

    Api- of the exit utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsExit, self).__init__(xmlRpc, objId)



    def ActivateModeAbortTest(self):
        """
        Activates the mode "abort test"
        
        """
        callResult = self._Call("ActivateModeAbortTest", )


    def ActivateModeEndTest(self):
        """
        Activates the mode "end test".
        
        """
        callResult = self._Call("ActivateModeEndTest", )


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsExit`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsExit
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the test step's abort code.

        :return: The abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExitResult(self):
        """
        Gets the result the test step will be evaluated to.

        :return: The exit result
        :rtype: unicode
        
        """
        callResult = self._Call("GetExitResult", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsAbortProjectEnabled(self):
        """
        Returns True if the checkbox for "Quit whole project" is activated else False.

        :return: True if the checkbox for "Quit whole project" is activated else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortProjectEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsModeAbortTestActivated(self):
        """
        Returns True when the mode "abort test" is activated else False.

        :return: True when the mode "abort test" is activated else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsModeAbortTestActivated", )

        if callResult is None:
            return None

        return callResult

    def IsModeEndTestActivated(self):
        """
        Returns True when the mode "end test" is activated else False.

        :return: True when the mode "end test" is activated else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsModeEndTestActivated", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAbortCode(self, code):
        """
        Sets the test step's abort code.

        :param code: The abort code
        :type code: unicode
        
        """
        callResult = self._Call("SetAbortCode", code)


    def SetAbortProject(self, abortProject=True):
        """
        Sets or removes the flag on "Quit whole project".

        :param abortProject: True, if the checkbox for should be activated else False
        :type abortProject: boolean
        
        """
        callResult = self._Call("SetAbortProject", abortProject)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExitResult(self, result):
        """
        Sets the result the test step is evaluated to.
        Must be one of ['NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED', 'ERROR'],
        otherwise the command raises an error.

        :param result: Abort condition
        :type result: unicode
        
        """
        callResult = self._Call("SetExitResult", result)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsSetTraceComment(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsSetTraceComment, self).__init__(xmlRpc, objId)



    def AddEntry(self, name, value):
        """
        Adds a new entry to the comment data dictionary, which will be created with the given
        name and value.

        :param name: The name of the new entry
        :type name: unicode
        :param value: The value expression of the new entry
        :type value: unicode
        
        """
        callResult = self._Call("AddEntry", name, value)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsSetTraceComment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSetTraceComment
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetEntries(self):
        """
        Returns all entries of the comment data in form of a dictionary.

        :return: A dictionary of all entries in the Form {entryName: entryValue}
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetEntries", )

        if callResult is None:
            return None

        return callResult

    def GetEntryValue(self, name):
        """
        Returns the value of an entry with the given name in the comment data dictionary. If no
        entry with the given name was found, an error will be raised instead.

        :param name: The name of the new entry
        :type name: unicode
        :return: The value for the given entry name
        :rtype: unicode
        :raises: ApiError
        
        """
        callResult = self._Call("GetEntryValue", name)

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def HasEntry(self, name):
        """
        Returns whether an entry with the given name exists in the comment data
        dictionary.

        :param name: The name of the new entry
        :type name: unicode
        :return: True, if an entry with the given name exists, otherwise False
        :rtype: boolean
        
        """
        callResult = self._Call("HasEntry", name)

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveEntry(self, name):
        """
        Removes an entry from the comment data dictionary by the given name. If no
        entry with the given name was found, an error will be raised instead.

        :param name: The name of the new entry
        :type name: unicode
        :raises: ApiError
        
        """
        callResult = self._Call("RemoveEntry", name)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetEntry(self, name, value):
        """
        Sets the value of the entry with the given name. If no entry with this name exists in
        the comment data dictionary, a new one will be created.

        :param name: The name of the entry
        :type name: unicode
        :param value: The value expression of the entry
        :type value: unicode
        
        """
        callResult = self._Call("SetEntry", name, value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsSwitchBase(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsSwitchBase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def ClearNodes(self):
        """
        Removes all nodes.
        
        """
        callResult = self._Call("ClearNodes", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsSwitchBase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSwitchValue(self):
        """
        Returns the switch value.

        :return: Switch value
        :rtype: unicode
        
        """
        callResult = self._Call("GetSwitchValue", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.

        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>

        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetSwitchValue(self, switchValue='0'):
        """
        Sets the switch value.

        :param switchValue: Switch value
        :type switchValue: unicode
        
        """
        callResult = self._Call("SetSwitchValue", switchValue)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsReport(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsReport, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def ClearTableValues(self):
        """
        Clears all table values.
        
        """
        callResult = self._Call("ClearTableValues", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsReport`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReport
        return classInstance(self._xmlRpc, objId)


    def DeactivateTableVariable(self):
        """
        Deactivates the table variable.
        
        """
        callResult = self._Call("DeactivateTableVariable", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActionExpression(self):
        """
        Returns the action column expression.

        :return: Action column expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetNameExpression(self):
        """
        Returns the name column expression.

        :return: Name column expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetNameExpression", )

        if callResult is None:
            return None

        return callResult

    def GetNoteExpression(self):
        """
        Returns the note column expression.

        :return: Note column expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetNoteExpression", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReportVerdict(self):
        """
        Returns the report verdict.

        :return: Report verdict (One of ['NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED', 'ERROR'])
        :rtype: unicode
        
        """
        callResult = self._Call("GetReportVerdict", )

        if callResult is None:
            return None

        return callResult

    def GetTableValue(self, x, y):
        """
        Returns the value of the cell specified by x and y.

        :param x: X-Index (column count) of the table
        :type x: integer
        :param y: Y-Index (row count) of the table
        :type y: integer
        :return: Value Expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTableValue", x, y)

        if callResult is None:
            return None

        return callResult

    def GetTableVariable(self):
        """
        Returns the name of the variable or None, if no variable is set.

        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetTableVariable", )

        if callResult is None:
            return None

        return callResult

    def GetTableXDimension(self):
        """
        Returns the X-Dimension (column count) of the table.

        :return: X-Dimension (column count) of the table
        :rtype: integer
        
        """
        callResult = self._Call("GetTableXDimension", )

        if callResult is None:
            return None

        return callResult

    def GetTableYDimension(self):
        """
        Returns the Y-Dimension (row count) of the table.

        :return: Y-Dimension (row count) of the table
        :rtype: integer
        
        """
        callResult = self._Call("GetTableYDimension", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetValueExpression(self):
        """
        Returns the value column expression.

        :return: Value column expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueExpression", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetActionExpression(self, expr):
        """
        Sets the action column expression.

        :param expr: Action column expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetActionExpression", expr)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetNameExpression(self, expr):
        """
        Sets the name column expression.

        :param expr: Name column expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetNameExpression", expr)


    def SetNoteExpression(self, expr):
        """
        Sets the note column expression.

        :param expr: Note column expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetNoteExpression", expr)


    def SetReportVerdict(self, verdict):
        """
        Sets the report verdict.

        :param verdict: The verdict of the report test step (Must be one of ['NONE', 'SUCCESS',
            'INCONCLUSIVE', 'FAILED', 'ERROR'])
        :type verdict: unicode
        
        """
        callResult = self._Call("SetReportVerdict", verdict)


    def SetTableValue(self, x, y, value):
        """
        Sets the value of the cell specified by x and y.

        :param x: X-Index (column count) of the table
        :type x: integer
        :param y: Y-Index (row count) of the table
        :type y: integer
        :param value: Value Expression
        :type value: unicode
        
        """
        callResult = self._Call("SetTableValue", x, y, value)


    def SetTableVariable(self, variable):
        """
        Sets the name of the variable of which the value will be displayed in the report. Must be
            of type 'Matrix'.

        :param variable: Name of the variable
        :type variable: unicode
        
        """
        callResult = self._Call("SetTableVariable", variable)


    def SetTableXDimension(self, xDimension):
        """
        Sets the X-Dimension (column count) of the table. The existing table will be extended or
        shrinked accordingly. Values that are out of range of the new dimension will be lost.

        :param xDimension: X-Dimension (column count) of the table
        :type xDimension: integer
        
        """
        callResult = self._Call("SetTableXDimension", xDimension)


    def SetTableYDimension(self, yDimension):
        """
        Sets the Y-Dimension (row count) of the table. The existing table will be extended or
        shrinked accordingly. Values that are out of range of the new dimension will be lost.

        :param yDimension: Y-Dimension (row count) of the table
        :type yDimension: integer
        
        """
        callResult = self._Call("SetTableYDimension", yDimension)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetValueExpression(self, expr):
        """
        Sets the value column expression.

        :param expr: Value column expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetValueExpression", expr)



class TsIfThenElse(TestStep):
    """

    Api- of the if then else utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsIfThenElse, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsIfThenElse`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsIfThenElse
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCondition(self):
        """
        Returns the condition upon which is decided which branch to execute.

        :return: Condition expression to decide which branch to execute
        :rtype: unicode
        
        """
        callResult = self._Call("GetCondition", )

        if callResult is None:
            return None

        return callResult

    def GetElseNode(self):
        """
        Returns the test step's else block

        :return: the else block
        :rtype: :class:`.Node`
        
        """
        callResult = self._Call("GetElseNode", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Node
        return classInstance(self._xmlRpc, objId)


    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.

        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>

        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetThenNode(self):
        """
        Returns the test step's then block

        :return: the then block
        :rtype: :class:`.Node`
        
        """
        callResult = self._Call("GetThenNode", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Node
        return classInstance(self._xmlRpc, objId)


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetCondition(self, condition):
        """
        Sets the condition upon which is decided which branch to execute. If the condition
        is fulfilled the then branch is executed, else the test steps of the else branch
        are executed.

        :param condition: Condition expression to decide which branch to execute
        :type condition: unicode
        
        """
        callResult = self._Call("SetCondition", condition)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsComment(TestStep):
    """

    Api- of the comment structure test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsComment, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsComment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsComment
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCommentExpression(self):
        """
        Returns the comment expression of the test step.

        :return: Comment expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetRating(self):
        """
        Returns the rating defined in the test step.

        :return: Rating (NONE, SUCCESS, INCONCLUSIVE, FAILED, ERROR)
        :rtype: unicode
        
        """
        callResult = self._Call("GetRating", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetCommentExpression(self, expr):
        """
        Sets the comment expression of the test step

        :param expr: Comment expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetCommentExpression", expr)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetRating(self, rating):
        """
        Sets the rating for the test step.

        :param rating: Rating (NONE, SUCCESS, INCONCLUSIVE, FAILED, ERROR)
        :type rating: unicode
        
        """
        callResult = self._Call("SetRating", rating)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsWait(TestStep):
    """

    Api- of the wait utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsWait, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsWait`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWait
        return classInstance(self._xmlRpc, objId)


    def DeactivateSaveIn(self):
        """
        Deactivates the test step's save in property, so the value will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM Representation of the test step
        :return: The ALM Representation of the test step
        :rtype: :class:`.TsWaitAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWaitAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDelayExpression(self):
        """
        Returns the delays period expression.

        :return: Expression as period of time to be delayed
        :rtype: unicode
        
        """
        callResult = self._Call("GetDelayExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMaxRangeValue(self):
        """
        Returns the maximal value of the range.

        :return: Maximal value of range.
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxRangeValue", )

        if callResult is None:
            return None

        return callResult

    def GetMinRangeValue(self):
        """
        Returns the minimal value of the range.

        :return: Minimal value of range.
        :rtype: unicode
        
        """
        callResult = self._Call("GetMinRangeValue", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetRangeStepSize(self):
        """
        Returns the step size of the range.

        :return: Step size of range.
        :rtype: unicode
        
        """
        callResult = self._Call("GetRangeStepSize", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the currently selected variable to save the return value.

        :return: The variable's name or None if return value is not saved to a variable by the
            keyword test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self):
        """
        Returns the delays unit.

        :return: Unit of time (min, s, ms)
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaxValueIncludedInRange(self):
        """
        Returns whether the maximal value is included in the range.

        :return: True if maximal value is included (<=), else False (<)
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaxValueIncludedInRange", )

        if callResult is None:
            return None

        return callResult

    def IsMinValueIncludedInRange(self):
        """
        Returns whether the minimal value is included in the range.

        :return: True if minimal value is included (>=), else False (>)
        :rtype: boolean
        
        """
        callResult = self._Call("IsMinValueIncludedInRange", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDelay(self, delay, timeUnit):
        """
        Sets the delay and its unit. The test execution is stopped for the specified time span.

        :param delay: Expression as period of time to be delayed
        :type delay: unicode
        :param timeUnit: Unit of time (d, h, min, s, ms)
        :type timeUnit: unicode
        
        """
        callResult = self._Call("SetDelay", delay, timeUnit)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetRange(self, minValue, maxValue, stepSize, includeMinValue=True, includeMaxValue=False):
        """
        Special method to define a range as value for the argument.

        :param minValue: Expression of the lower limit
        :type minValue: unicode
        :param maxValue: Expression of the upper limit
        :type maxValue: unicode
        :param stepSize: Expression of the step size
        :type stepSize: unicode
        :param includeMinValue: If True (default) the minimum value is a candidate for the random
                                value at runtime. If False it is not a possible candidate to pick
                                from.
        :type includeMinValue: boolean
        :param includeMaxValue: If True the maximum value is a candidate for the random value at
                                runtime; if False (default) it is not.
        :type includeMaxValue: boolean
        
        """
        callResult = self._Call("SetRange", minValue, maxValue, stepSize, includeMinValue, includeMaxValue)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing data by the return. The variable
        will be created automatically if it does not already exist in the package where the return
        is placed in.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: unicode
        :raise ApiError: If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUnit(self, timeUnit):
        """
        Sets the time unit of the delay or value range expression

        :param timeUnit: Unit of time (d, h, min, s, ms)
        :type timeUnit: unicode
        
        """
        callResult = self._Call("SetUnit", timeUnit)



class TsTodo(TestStep):
    """

    Api- of the todo structure test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsTodo, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsTodo`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsTodo
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment expression of the test step that describes what is to do here.

        :return: Comment expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, text):
        """
        Sets the comment expression for the test step to describe what is to do here.

        :param text: Comment expression
        :type text: unicode
        
        """
        callResult = self._Call("SetComment", text)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsTraceStepResult(TestStep):
    """

    Api- of the trace step result traceanalysis test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsTraceStepResult, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsTraceStepResult`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsTraceStepResult
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTraceStepUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTraceStepUuid", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTraceStepUuid(self, tsUuid):
        """
        Sets the reference to a trace step or trace analysis.

        :param tsUuid: UUID of the element
        :type tsUuid: unicode
        
        """
        callResult = self._Call("SetTraceStepUuid", tsUuid)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsWaitForUser(TestStep):
    """

    Api- of the wait for user utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsWaitForUser, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsWaitForUser`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWaitForUser
        return classInstance(self._xmlRpc, objId)


    def DeactivateResultVar(self):
        """
        Deactivates save result in variable.
        
        """
        callResult = self._Call("DeactivateResultVar", )


    def DeactivateTimeOut(self):
        """
        Deactivates the time out option.
        
        """
        callResult = self._Call("DeactivateTimeOut", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActionDescription(self):
        """
        Returns the action description of the wait for user test step.

        :return: Action description
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionDescription", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetResultVar(self):
        """
        Returns the variable to save the result in.

        :return: Result variable name or None, if the option is disabled
        :rtype: unicode
        
        """
        callResult = self._Call("GetResultVar", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeOut(self):
        """
        Returns the time out.

        :return: Time out in milliseconds
        :rtype: integer
        
        """
        callResult = self._Call("GetTimeOut", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsEvaluationEnabled(self):
        """
        Returns whether the user has to evaluate the test step (SUCCESS/FAILED) or not.

        :return: Truth value whether the user has to evaluate the test step or not.
        :rtype: boolean
        
        """
        callResult = self._Call("IsEvaluationEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetActionDescription(self, descr):
        """
        Sets the action description of the wait for user test step.

        :param descr: Action description
        :type descr: unicode
        
        """
        callResult = self._Call("SetActionDescription", descr)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetEvaluationEnabled(self, evaluate):
        """
        Sets whether the user has to evaluate the test step (SUCCESS/FAILED) or not.

        :param evaluate: If True, the user has to evaluate the test step.
        :type evaluate: boolean
        
        """
        callResult = self._Call("SetEvaluationEnabled", evaluate)


    def SetResultVar(self, var):
        """
        Sets the variable to save the result in. The option will be activated if it was not
        enabled previously.

        :param var: Result variable name.
        :type var: unicode
        
        """
        callResult = self._Call("SetResultVar", var)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOut(self, timeout):
        """
        Sets the time out. The time out will be activated if it was not enabled previously.

        :param timeout: Time out in milliseconds.
        :type timeout: integer
        
        """
        callResult = self._Call("SetTimeOut", timeout)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsContinue(TestStep):
    """

    Api- of the continue utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsContinue, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsContinue`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsContinue
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsBitExtract(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBitExtract, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBitExtract`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBitExtract
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetBitLength(self):
        """
        Returns the bit length.

        :return: Number of bits that will be taken in account
        :rtype: integer
        
        """
        callResult = self._Call("GetBitLength", )

        if callResult is None:
            return None

        return callResult

    def GetByteOrder(self):
        """
        Returns the byte order.

        :return: Byte order
        :rtype: unicode
        
        """
        callResult = self._Call("GetByteOrder", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpression(self):
        """
        Returns the expression.

        :return: Expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self):
        """
        Returns the name of the variable in which the value will be saved.

        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetStartBit(self):
        """
        Returns the start bit position.

        :return: Start bit position
        :rtype: integer
        
        """
        callResult = self._Call("GetStartBit", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBitLength(self, bitLength):
        """
        Sets how many bits, beginning at the start bit, will be taken in account.

        :param bitLength: Bit length
        :type bitLength: integer
        
        """
        callResult = self._Call("SetBitLength", bitLength)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetByteOrder(self, byteOrder):
        """
        Sets the byte order which will be applied to the data.

        :param byteOrder: Byte order. Must be one of [u'Intel', u'Motorola'].
        :type byteOrder: unicode
        
        """
        callResult = self._Call("SetByteOrder", byteOrder)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpression(self, expr):
        """
        Sets the expression that will be interpreted as bit sequence.

        :param expr: Expression
        :type expr: unicode
        
        """
        callResult = self._Call("SetExpression", expr)


    def SetSaveInVariableName(self, varName):
        """
        Sets the name of the variable in which the value will be saved.

        :param varName: Name of the variable
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetStartBit(self, startBit):
        """
        Sets the start bit position.

        :param startBit: Start bit position
        :type startBit: integer
        
        """
        callResult = self._Call("SetStartBit", startBit)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsEesError(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsEesError, self).__init__(xmlRpc, objId)



    def AddEesPinVariableMappingItem(self, mappingItem):
        """
        Adds a mapping item to the test case and adds the associated pin configuration.

        :param mappingItem: Ees pin mapping item
        :type mappingItem: :class:`.EesPinVariableMappingItem`
        
        """
        callResult = self._Call("AddEesPinVariableMappingItem", mappingItem)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsEesError`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEesError
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDurationExpression(self):
        """
        Returns the duration expression of the test step in milliseconds.

        :return: Duration expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDurationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDutyCycleExpression(self):
        """
        Returns the duty cycle expression of the test step.

        :return: Duty cycle expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDutyCycleExpression", )

        if callResult is None:
            return None

        return callResult

    def GetEesPinVariableMappingItems(self):
        """
        Returns all ees pin mapping items as list.

        :return: List of ees pin mapping items
        :rtype: list<:class:`.EesPinVariableMappingItem`>
        
        """
        callResult = self._Call("GetEesPinVariableMappingItems", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = EesPinVariableMappingItem
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetErrorType(self):
        """
        Returns the type of the error.

        :return: Type of the error. One of [u'SIMPLE', u'RESISTOR']
        :rtype: unicode
        
        """
        callResult = self._Call("GetErrorType", )

        if callResult is None:
            return None

        return callResult

    def GetFrequencyExpression(self):
        """
        Returns the frequency expression of the test step in hertz.

        :return: Frequency expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetFrequencyExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetLoad(self, mappingItem):
        """
        Returns the load of the pin associated with the mapping item.

        :param mappingItem: Ees pin mapping item
        :type mappingItem: :class:`.EesPinVariableMappingItem`
        :return: Whether the pin has a load or not
        :rtype: boolean
        
        """
        callResult = self._Call("GetLoad", mappingItem)

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPotential(self):
        """
        Returns the potential of the test step.

        :return: Potential
        :rtype: unicode
        
        """
        callResult = self._Call("GetPotential", )

        if callResult is None:
            return None

        return callResult

    def GetResistorExpression(self):
        """
        Returns the resistor expression in ohm.

        :return: Resistor expression or None
        :rtype: unicode
        
        """
        callResult = self._Call("GetResistorExpression", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeOption(self):
        """
        Returns the time option of the test step.

        :return: Time option. One of [u'STATIC', u'DURATION', u'LOSE_CONTACT']
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeOption", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUserPotentialExpression(self):
        """
        Returns the user potential expression of the test step.

        :return: User potential expression or None
        :rtype: unicode
        
        """
        callResult = self._Call("GetUserPotentialExpression", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveEesPinVariableMapping(self, mappingItem):
        """
        Removes a mapping item from the test case and deletes the associated pin configuration.

        :param mappingItem: Ees pin mapping item
        :type mappingItem: :class:`.EesPinVariableMappingItem`
        
        """
        callResult = self._Call("RemoveEesPinVariableMapping", mappingItem)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDurationExpression(self, durationExpr):
        """
        Sets the duration expression of the test step in milliseconds. By setting the duration
        expression the time option will be set to 'DURATION' if it was set to 'STATIC' before.

        :param durationExpr: Duration expression
        :type durationExpr: unicode
        
        """
        callResult = self._Call("SetDurationExpression", durationExpr)


    def SetDutyCycleExpression(self, dutyCycleExpr):
        """
        Sets the duty cycle expression of the test step. By setting the duty cycle expression the
        time option will be set to 'LOSE_CONTACT'.

        :param dutyCycleExpr: Duty cycle expression
        :type dutyCycleExpr: unicode
        
        """
        callResult = self._Call("SetDutyCycleExpression", dutyCycleExpr)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetErrorType(self, errorType):
        """
        Sets the type of the error.

        :param errorType: The type of the error. Must be one of [u'SIMPLE', u'RESISTOR']
        :type errorType: unicode
        :raise ApiError: If errorType is in [u'SIMPLE', u'RESISTOR']
        
        """
        callResult = self._Call("SetErrorType", errorType)


    def SetFrequencyExpression(self, freqExpr):
        """
        Sets the frequency expression of the test step in hertz. By setting the duty cycle
        expression the time option will be set to 'LOSE_CONTACT'.

        :param freqExpr: Frequency expression
        :type freqExpr: unicode
        
        """
        callResult = self._Call("SetFrequencyExpression", freqExpr)


    def SetLoad(self, mappingItem, load):
        """
        Sets the load of the pin associated with the mapping item.

        :param mappingItem: Ees pin mapping item
        :type mappingItem: :class:`.EesPinVariableMappingItem`
        :param load: Whether the pin has a load or not
        :type load: boolean
        
        """
        callResult = self._Call("SetLoad", mappingItem, load)


    def SetPotential(self, potential):
        """
        Sets the potential of the test step.
        If the potential is one of u'NONE', u'GROUND' or u'UBATT', the user defined potential will 
        be set to None.

        :param potential: Potential. Must be one of [u'NONE', u'GROUND', u'UBATT', u'USER_DEFINED'].
        :type potential: unicode
        :raise ApiError: If potential is not in [u'NONE', u'GROUND', u'UBATT', u'USER_DEFINED']
        
        """
        callResult = self._Call("SetPotential", potential)


    def SetResistorExpression(self, resistorExpr):
        """
        Sets the resistor expression in ohm. By setting the resistor expression the error type will
        be set to 'RESISTOR' if it was set to 'SIMPLE' before.

        :param resistorExpr: Resistor expression
        :type resistorExpr: unicode
        
        """
        callResult = self._Call("SetResistorExpression", resistorExpr)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOption(self, timeOption):
        """
        Sets the time option of the test step.
        When setting to 'STATIC', the properties duration, duty cycle and frequency will be set to
        None. Choosing 'DURATION' will only reset the properties duty cycle and frequency.

        :param timeOption: Time option. Must be one of [u'STATIC', u'DURATION', u'LOSE_CONTACT']
        :type timeOption: unicode
        
        """
        callResult = self._Call("SetTimeOption", timeOption)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUserPotentialExpression(self, userPotential):
        """
        Sets the user potential expression of the test step. By setting the user potential
        expression the potential will be set to 'USER_DEFINED'.

        :param userPotential: User potential expression
        :type userPotential: unicode
        
        """
        callResult = self._Call("SetUserPotentialExpression", userPotential)



class TsPackage(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsPackage, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsPackage`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAbsolutePackagePath(self):
        """
        Returns the absolute file path of the referenced package from a package call test step.

        :return: Absolute file path of the package to be called.
        :rtype: string
        
        """
        callResult = self._Call("GetAbsolutePackagePath", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM Representation of this test step
        :return: The ALM representation
        :rtype: :class:`.TsPackageAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPackageAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the referenced package in a package call test step.

        If this method returns a relative path, its base is the folder where the calling package
        is located, just like the path is shown in the package call test step's dialog.

        :return: File name with relative path of the package to be called.
        :rtype: string
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the line number of the test step inside the test case.

        :return: Line number of the test step
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetPackageParameter(self, paramName):
        """
        Retrieves the expression assigned to a package parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :return: Expression assigned to the parameter
        :rtype: string
        
        """
        callResult = self._Call("GetPackageParameter", paramName)

        if callResult is None:
            return None

        return callResult

    def GetPackageParameters(self):
        """
        Retrieves all package parameter with its expressions.

        :return: Expression assigned to the parameter
        :rtype: dict<string: string>
        
        """
        callResult = self._Call("GetPackageParameters", )

        if callResult is None:
            return None

        return callResult

    def GetPackageReturn(self, varInternal):
        """
        Retrieves the variable name assigned to a package return value.

        :param varInternal: Name of the return variable in the called package
        :type varInternal: string
        :return: assigned variable of the calling package
        :rtype: string
        
        """
        callResult = self._Call("GetPackageReturn", varInternal)

        if callResult is None:
            return None

        return callResult

    def GetPackageReturns(self):
        """
        Retrieves the return value assignments

        :return: assigned variables of the calling package
        :rtype: dict<string: string>
        
        """
        callResult = self._Call("GetPackageReturns", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReferencedPackage(self):
        """
        Returns the referenced package.
        If the path contains global constants, their current values are used.

        :return: the referenced Package
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("GetReferencedPackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetPackageParameter(self, paramName, paramValue):
        """
        Assigns a value to a package parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :param paramValue: Value to assign to the parameter (can be an expression)
        :type paramValue: string
        
        """
        callResult = self._Call("SetPackageParameter", paramName, paramValue)


    def SetPackageParameters(self, paramDict):
        """
        Assigns values to package parameters.

        :param paramDict: Dictionary of parameter name -> parameter value (expression) mappings
        :type paramDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetPackageParameters", paramDict)


    def SetPackageReturn(self, varInternal, varExternal):
        """
        Assigns a package return value to a variable.

        :param varInternal: Return variable of the called package
        :type varInternal: string
        :param varExternal: Variable of the calling package to assign the return value to
        :type varExternal: string
        
        """
        callResult = self._Call("SetPackageReturn", varInternal, varExternal)


    def SetPackageReturns(self, returnDict):
        """
        Assigns package return values to variables.

        :param returnDict: Dictionary of return variable -> variable of the calling package mappings
        :type returnDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetPackageReturns", returnDict)


    def SetPath(self, path, packageLibraryAlias=None):
        """
        Sets the path of the referenced package in a package call test step.

        :type path: string
        :param path: Relative path of the package to be called.
        :type packageLibraryAlias: string
        :param packageLibraryAlias: Package library alias, if the package is part of a library
        
        """
        callResult = self._Call("SetPath", path, packageLibraryAlias)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsLogFile(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsLogFile, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsLogFile`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsLogFile
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetLogFileExpression(self):
        """
        Returns the file name expression.

        :return: File name expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetLogFileExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLogTextExpression(self):
        """
        Returns the text expression.

        :return: Text expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetLogTextExpression", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetLogFileExpression(self, fileName):
        """
        Sets the file name expression that specifies the log file.

        :param fileName: File name expression
        :type fileName: unicode
        
        """
        callResult = self._Call("SetLogFileExpression", fileName)


    def SetLogTextExpression(self, logText):
        """
        Sets the text expression that will be written into the log file.

        :param logText: Log text expression
        :type logText: unicode
        
        """
        callResult = self._Call("SetLogTextExpression", logText)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsAddTrace(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsAddTrace, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsAddTrace`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAddTrace
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCopyTraceFile(self):
        """
        Returns whether the trace file should be copied into the report directory.
        
        :return: True (default) if the trace file should be copied else False
        :rtype: boolean
        
        """
        callResult = self._Call("GetCopyTraceFile", )

        if callResult is None:
            return None

        return callResult

    def GetDeviceExpression(self):
        """
        Returns the device that should be used from the file.
        
        :return: The device expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDeviceExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetFormatDetailsExpression(self):
        """
        Returns the format details expression.

        :return: The format details expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetFormatDetailsExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPathExpression(self):
        """
        Returns the path expression of the trace file.

        :return: The path expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetPathExpression", )

        if callResult is None:
            return None

        return callResult

    def GetRecordingGroup(self):
        """
        Returns the recording group set for this test step.

        :return: The recording group. Returns None if no recording group is assigned.
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetRecordingGroup", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDeviceRegularExpression(self):
        """
        Returns whether the device expression will be interpreted as regular expression.

        :return: True if it is interpreted as regular expression else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsDeviceRegularExpression", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetCopyTraceFile(self, value):
        """
        Sets whether the trace file should be copied into the report directory.
        
        :param value: True if the trace file should be copied else False.
        :type value: boolean
        
        """
        callResult = self._Call("SetCopyTraceFile", value)


    def SetDeviceAsRegularExpression(self, expression):
        """
        Set the device that should be used from the file.
        
        :param expression: The device expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetDeviceAsRegularExpression", expression)


    def SetDeviceExpression(self, expression):
        """
        Set the device that should be used from the file.
        
        :param expression: The device expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetDeviceExpression", expression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetFormatDetailsExpression(self, expression):
        """
        Sets the format details expression.
        
        :param expression: The format details expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetFormatDetailsExpression", expression)


    def SetPathExpression(self, expression):
        """
        Sets the path expression of the trace file.
        
        :param expression: The path expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetPathExpression", expression)


    def SetRecordingGroup(self, recordingGroup):
        """
        Sets the recording group that will be started by this test step.

        :param recordingGroup: The recording group
        :type recordingGroup: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("SetRecordingGroup", recordingGroup)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsAnalysisJob(TestStep):
    """

    Api- of the analysis job traceanalysis test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsAnalysisJob, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsAnalysisJob`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAnalysisJob
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTraceAnalysis(self):
        """
        Returns the name of the trace analysis.

        :return: Name of the trace analysis
        :rtype: unicode
        
        """
        callResult = self._Call("GetTraceAnalysis", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsUpdateFromAnalysisResultEnabled(self):
        """
        Returns the truth value of the carry over result flag.

        :return: Carry over result flag
        :rtype: boolean
        
        """
        callResult = self._Call("IsUpdateFromAnalysisResultEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTraceAnalysis(self, traceAnalysis):
        """
        Sets the name trace analysis.

        :param traceAnalysis: Name of the trace analysis
        :type traceAnalysis: unicode
        
        """
        callResult = self._Call("SetTraceAnalysis", traceAnalysis)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUpdateFromAnalysisResult(self, update):
        """
        Sets the carry over result flag. If set to True, the result of this test step will be
        updated after executing the analysis.

        :param update: Carry over result flag
        :type update: boolean
        
        """
        callResult = self._Call("SetUpdateFromAnalysisResult", update)



class TsStopStimulus(TestStep):
    """

     of the stop stimulus utility.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsStopStimulus, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsStopStimulus`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStopStimulus
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetInstanceName(self):
        """
        Returns the instance name of the stimulus.

        :return: Instance name of the stimulus
        :rtype: unicode
        
        """
        callResult = self._Call("GetInstanceName", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetInstanceName(self, instanceName):
        """
        Sets the instance name of the stimulus.

        :param instanceName: Instance name of the stimulus
        :type instanceName: unicode
        
        """
        callResult = self._Call("SetInstanceName", instanceName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsOutboxPost(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsOutboxPost, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsOutboxPost`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsOutboxPost
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMessageExpression(self):
        """
        Returns the message expression.

        :return: Message expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMessageExpression", )

        if callResult is None:
            return None

        return callResult

    def GetOutboxName(self):
        """
        Returns the outbox variable name.

        :return: Name of the outbox variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetOutboxName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetMessageExpression(self, msgExpr):
        """
        Sets the message expression that will be written to the outbox.

        :param msgExpr: Message expression
        :type msgExpr: unicode
        
        """
        callResult = self._Call("SetMessageExpression", msgExpr)


    def SetOutboxName(self, outboxName):
        """
        Sets the outbox variable name. The test step must be inserted into a package prior to
        calling this method.

        :param outboxName: Name of the outbox variable
        :type outboxName: unicode
        
        """
        callResult = self._Call("SetOutboxName", outboxName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsReturn(TestStep):
    """

    Api- of the returning utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsReturn, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsReturn`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReturn
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReturnResult(self):
        """
        Returns the result of the return test step.

        :return: Result of the return test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetReturnResult", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetReturnResult(self, result):
        """
        Sets the result of the return test step.
        Must be one of ['NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED', 'ERROR'],
        otherwise the command is ignored.

        :param result: Result of the return test step
        :type result: unicode
        
        """
        callResult = self._Call("SetReturnResult", result)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsChangeReportFolder(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsChangeReportFolder, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsChangeReportFolder`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsChangeReportFolder
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReportFolderExpression(self):
        """
        Returns the report folder expression.

        :return: Report folder expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetReportFolderExpression", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetReportFolderExpression(self, folder):
        """
        Sets the report folder expression.

        :param folder: Report folder expression
        :type folder: unicode
        
        """
        callResult = self._Call("SetReportFolderExpression", folder)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class Testcase(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Testcase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Testcase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Testcase
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPostconditionBlock(self):
        """
        Returns the postcondition block.

        :return: Postcondition block or None, if none existing
        :rtype: :class:`.TsPostconditionBlock`
        
        """
        callResult = self._Call("GetPostconditionBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPostconditionBlock
        return classInstance(self._xmlRpc, objId)


    def GetPreconditionBlock(self):
        """
        Returns the precondition block.

        :return: Precondition block or None, if none existing
        :rtype: :class:`.TsPreconditionBlock`
        
        """
        callResult = self._Call("GetPreconditionBlock", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPreconditionBlock
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepByLineNo(self, lineNo):
        """
        Searches for the line number and returns the test step, if existing.

        :param lineNo: Line number of the test step to be retrieved
        :type lineNo: integer
        :return: Test step at the current line number or None if no test step exists
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetTestStepByLineNo", lineNo)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TraceAnalysis(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TraceAnalysis, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendGenericSignal(self, genericSignal):
        """
        Adds a generic signal to the trace analysis.
        The name must be python-conform!

        :param genericSignal: The name of the generic signal
        :type genericSignal: :class:`.GenericSignal`
        
        """
        callResult = self._Call("AppendGenericSignal", genericSignal)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.TraceAnalysis`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TraceAnalysis
        return classInstance(self._xmlRpc, objId)


    def GetConditionalGenericSignals(self):
        """
        Returns the list of signals that can be optional or mandatory for running
        the trace analysis depending on the values of global constants.

        :return: The list of undetermined signals.
        :rtype: list<:class:`.GenericSignal`>
        
        """
        callResult = self._Call("GetConditionalGenericSignals", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = GenericSignal
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetGenericSignal(self, name):
        """
        Returns the generic signal of given name.

        :param name: The name of the generic signal
        :type name: unicode
        :return: A generic signal
        :rtype: :class:`.GenericSignal`
        
        """
        callResult = self._Call("GetGenericSignal", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = GenericSignal
        return classInstance(self._xmlRpc, objId)


    def GetGenericSignals(self):
        """
        Returns all generic signal.

        :return: The list of generic signals
        :rtype: list<:class:`.GenericSignal`>
        
        """
        callResult = self._Call("GetGenericSignals", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = GenericSignal
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetMandatoryGenericSignals(self):
        """
        Returns the list of signals that are mandatory for running the trace analysis.

        :return: The list of mandatory signals.
        :rtype: list<:class:`.GenericSignal`>
        
        """
        callResult = self._Call("GetMandatoryGenericSignals", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = GenericSignal
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetOptionalGenericSignals(self):
        """
        Returns the list of signals that are optional for running the trace analysis.

        :return: The list of optional signals.
        :rtype: list<:class:`.GenericSignal`>
        
        """
        callResult = self._Call("GetOptionalGenericSignals", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = GenericSignal
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetReferencedTraceStepTemplates(self):
        """
        Returns a list with all referenced trace step templates.

        :return: A list with paths of the referenced trace step templates
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetReferencedTraceStepTemplates", )

        if callResult is None:
            return None

        return callResult

    def GetSyncConfig(self):
        """
        Returns the synchronization configuration.

        :return: The synchronization configuration
        :rtype: :class:`.SyncConfig`
        
        """
        callResult = self._Call("GetSyncConfig", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SyncConfig
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceMergeFilePathExpression(self):
        """
        Returns the path expression of the file where the traces are merged into.

        :return: The path expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTraceMergeFilePathExpression", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsTraceMergeActive(self):
        """
        Returns whether the merging of traces is activated.

        :return: Activation status of trace merge
        :rtype: boolean
        
        """
        callResult = self._Call("IsTraceMergeActive", )

        if callResult is None:
            return None

        return callResult

    def RemoveGenericSignal(self, name):
        """
        Removes a generic signal from the trace analysis.

        :param name: The name of the generic signal
        :type name: unicode
        
        """
        callResult = self._Call("RemoveGenericSignal", name)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTraceMergeActive(self, active=True):
        """
        Enables or Disables the merging of traces.

        :param active: If set to False, trace merge will be deactivated. Otherwise trace merge will
            be activated.
        :type active: boolean
        
        """
        callResult = self._Call("SetTraceMergeActive", active)


    def SetTraceMergeFilePathExpression(self, expression):
        """
        Sets the path expression of the file where the traces are merged into.

        :param expression: The path expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetTraceMergeFilePathExpression", expression)



class Project(ProjectFolder):
    """

    """


    @property
    def GlobalConstants(self):
        """
        Returns access to the global constants specified on the project component.

        :return: Global constants interface of the project component
        :rtype: :class:`.GlobalConstants`
        
        """
        return self.__GlobalConstants

    @property
    def MappingFiles(self):
        """
        Returns access to the mapping file list

        :return: Mapping file list object 
        :rtype: :class:`.MappingFiles`
        
        """
        return self.__MappingFiles

    @property
    def PackageParameters(self):
        """
        Returns access to the package parameters specified on the project component.

        :return: Package parameters interface of the project component
        :rtype: :class:`.PackageParameters`
        
        """
        return self.__PackageParameters

    def __init__(self, xmlRpc=None, objId=0):
        super(Project, self).__init__(xmlRpc, objId)

        self.__GlobalConstants = GlobalConstants(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "GlobalConstants"))
        self.__MappingFiles = MappingFiles(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "MappingFiles"))
        self.__PackageParameters = PackageParameters(self._xmlRpc, self._xmlRpc.ObjectApi.GetAttr(self._objId, "PackageParameters"))


    def ActivateAbortOnSubprojectAbort(self):
        """
        Activates abort of whole project on abort of subprojects.
        
        """
        callResult = self._Call("ActivateAbortOnSubprojectAbort", )


    def ActivateAutomaticValueRestore(self):
        """
        Activates value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("ActivateAutomaticValueRestore", )


    def ActivateIndependentSubprojectExecution(self):
        """
        Activates independent execution of subprojects.
        
        """
        callResult = self._Call("ActivateIndependentSubprojectExecution", )


    def AppendComponent(self, component):
        """
        Adds a previously created component at the end of the project.

        :param component: The project component to be appended
        :type component: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("AppendComponent", component)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Project`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Project
        return classInstance(self._xmlRpc, objId)


    def Close(self):
        """
        Closes the project. After closing the project it can not be modified/accessed anymore.
        
        """
        callResult = self._Call("Close", )


    def DeactivateAbortOnSubprojectAbort(self):
        """
        Deactivate abort of whole project on abort of subprojects.
        
        """
        callResult = self._Call("DeactivateAbortOnSubprojectAbort", )


    def DeactivateAutomaticValueRestore(self):
        """
        Deactivate value restore of test quantities after the execution of
        every Package.
        
        """
        callResult = self._Call("DeactivateAutomaticValueRestore", )


    def DeactivateIndependentSubprojectExecution(self):
        """
        Deactivate independent execution of subprojects.
        
        """
        callResult = self._Call("DeactivateIndependentSubprojectExecution", )


    def DisablePkgExecutionOnAbort(self):
        """
        Sets that no Package should be executed in case of test abort.
        
        """
        callResult = self._Call("DisablePkgExecutionOnAbort", )


    def GetAllAttributeNames(self):
        """
        Returns the names of all attributes available on the project

        :return: List of attribute names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetAllAttributeNames", )

        if callResult is None:
            return None

        return callResult

    def GetAllComponents(self, skipDisabled=True):
        """
        Returns all components of the project

        :param skipDisabled: Defines whether disabled components should be excluded.
        :type skipDisabled: boolean
        :return: Project components
        :rtype: list<:class:`.ProjectComponent`>
        
        """
        callResult = self._Call("GetAllComponents", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetAttribute(self, name):
        """
        Returns the value of the attribute of the provided name

        :param name: Name of attribute
        :type name: unicode
        :return: Value of attribute
        :rtype: unicode
        
        """
        callResult = self._Call("GetAttribute", name)

        if callResult is None:
            return None

        return callResult

    def GetAttributes(self):
        """
        Returns all attributes of the project with their values.

        :return: Dictionary of attributes with values
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetAttributes", )

        if callResult is None:
            return None

        return callResult

    def GetComponentByPosition(self, position):
        """
        Returns the component at a given position of the project

        :param position: Position of component to be returned
        :type position: integer
        :return: Project component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetComponentByPosition", position)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetComponents(self):
        """
        Returns all direct children of the folder.

        :return: List with all children components
        :rtype: list <:class:`.ProjectComponent`>
        
        """
        callResult = self._Call("GetComponents", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetConfigChanges(self, skipDisabled=True):
        """
        Returns all config changes of the project.

        :param skipDisabled: Defines whether disabled config changes should be excluded.
        :type skipDisabled: boolean
        :return: Config changes
        :rtype: list<:class:`.ConfigChange`>
        
        """
        callResult = self._Call("GetConfigChanges", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ConfigChange
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetCustomPkgExecutionOnAbortPkgPath(self):
        """
        Returns the path of the custom Package to be executed upon abort of test execution

        :return: Absolute path to Package file
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomPkgExecutionOnAbortPkgPath", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCondition(self):
        """
        Returns the condition of the custom retries. Returns one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :return: The condition of the custom retry
        :rtype: unicode
        
        """
        callResult = self._Call("GetCustomRetryCondition", )

        if callResult is None:
            return None

        return callResult

    def GetCustomRetryCount(self):
        """
        Returns the number of the retries defined on the project component.

        :return: Number of the custom retries
        :rtype: integer
        
        """
        callResult = self._Call("GetCustomRetryCount", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description of the project.

        :return: description text
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the project file as absolute path, if this is a file.
        If not it may be unsaved.

        :return: The file name of the saved file or None, if not a file
        :rtype: unicode
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetFolders(self, skipDisabled=True):
        """
        Returns all folders of the project.

        :param skipDisabled: Defines whether disabled folders should be excluded.
        :type skipDisabled: boolean
        :return: Folders
        :rtype: list<:class:`.ProjectFolder`>
        
        """
        callResult = self._Call("GetFolders", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetName(self):
        """
        Returns the name of the project component.

        :return: Name of the component
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetPackageCalls(self, skipDisabled=True, noParameterSets=False):
        """
        Returns all package calls of the project.

        :param skipDisabled: Defines whether disabled package calls should be excluded.
        :type skipDisabled: boolean
        :param noParameterSets: Defines whether package calls with parameter
                                sets should be excluded.
        :type noParameterSets: boolean
        :return: Package calls
        :rtype: list<:class:`.PackageCall`>
        
        """
        callResult = self._Call("GetPackageCalls", skipDisabled, noParameterSets)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PackageCall
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetPackageGenerators(self, skipDisabled=True):
        """
        Returns all package generators of the project.

        :param skipDisabled: Defines whether disabled generators should be excluded.
        :type skipDisabled: boolean
        :return: PackageGenerator
        :rtype: list<:class:`.PackageGenerator`>
        
        """
        callResult = self._Call("GetPackageGenerators", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = PackageGenerator
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetParameterGenerators(self, skipDisabled=True):
        """
        Returns all parameter generators of the project.

        :param skipDisabled: Defines whether disabled generators should be excluded.
        :type skipDisabled: boolean
        :return: ParameterGenerator
        :rtype: list<:class:`.ParameterGenerator`>
        
        """
        callResult = self._Call("GetParameterGenerators", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetParameterSets(self, skipDisabled=True):
        """
        Returns all parameter sets of the project.

        :param skipDisabled: Defines whether disabled parameter sets should be excluded.
        :type skipDisabled: boolean
        :return: Parameter records
        :rtype: list<:class:`.ParameterSet`>
        
        """
        callResult = self._Call("GetParameterSets", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ParameterSet
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetParent(self):
        """
        Returns the parent project component.

        :return: Parent component
        :rtype: :class:`.ProjectComponent`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPosition(self):
        """
        Returns the position in the parent project.

        :return: parent position
        :rtype: integer
        
        """
        callResult = self._Call("GetPosition", )

        if callResult is None:
            return None

        return callResult

    def GetProjectCalls(self, skipDisabled=True):
        """
        Returns all project calls of the project.

        :param skipDisabled: Defines whether disabled project calls should be excluded.
        :type skipDisabled: boolean
        :return: Project calls
        :rtype: list<:class:`.ProjectCall`>
        
        """
        callResult = self._Call("GetProjectCalls", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ProjectCall
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetProjectGenerators(self, skipDisabled=True):
        """
        Returns all project generators of the project.

        :param skipDisabled: Defines whether disabled generators should be excluded.
        :type skipDisabled: boolean
        :return: ProjectGenerator
        :rtype: list<:class:`.ProjectGenerator`>
        
        """
        callResult = self._Call("GetProjectGenerators", skipDisabled)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = ProjectGenerator
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetRandomExecutionOrderState(self):
        """
        Returns the random execution state of this container.

        :return: True if activated, False if deactivated or None if it is inherit from parent.
        :rtype: boolean
        
        """
        callResult = self._Call("GetRandomExecutionOrderState", )

        if callResult is None:
            return None

        return callResult

    def GetTestSuiteId(self):
        """
        Returns the test suite id of the project, if defined.

        :return: Test suite id
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestSuiteId", )

        if callResult is None:
            return None

        return callResult

    def HasCustomPkgExecutionOnAbortSettings(self):
        """
        Returns if the Package execution settings in case of test abort of
        the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomPkgExecutionOnAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRestoreSettings(self):
        """
        Returns if the value restore settings of the parent element are used or overridden by
        custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRestoreSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomRetrySettings(self):
        """
        Returns if the retry settings of the parent element are used

        :return: True if parent settings used, False if custom settings defined
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomRetrySettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomSubprojectAbortSettings(self):
        """
        Returns if the subprojects abort settings of the parent element are used or
        overridden by custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomSubprojectAbortSettings", )

        if callResult is None:
            return None

        return callResult

    def HasCustomSubprojectExecutionSettings(self):
        """
        Returns if the subprojects execution settings of the parent element are used or
        overridden by custom settings

        :return: True if custom settings used, False if parent settings used
        :rtype: boolean
        
        """
        callResult = self._Call("HasCustomSubprojectExecutionSettings", )

        if callResult is None:
            return None

        return callResult

    def InsertComponent(self, component, position):
        """
        Inserts a previously created component into the project at the given position.

        :param component: The project component to be inserted
        :type component: :class:`.ProjectComponent`
        :param position: Position to insert the project component
        :type position: integer
        
        """
        callResult = self._Call("InsertComponent", component, position)


    def IsAbortOnSubprojectAbortActivated(self):
        """
        Returns if the abort of whole project on abort of subprojects is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortOnSubprojectAbortActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAbortOnSubprojectAbortDeactivated(self):
        """
        Returns if abort of whole project on abort of subprojects is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAbortOnSubprojectAbortDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreActivated(self):
        """
        Returns if the automatic value restore is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreActivated", )

        if callResult is None:
            return None

        return callResult

    def IsAutomaticValueRestoreDeactivated(self):
        """
        Returns if the automatic value restore is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsAutomaticValueRestoreDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsIndependentSubprojectExecutionActivated(self):
        """
        Returns if the independent execution of subprojects is activated

        :return: True if activated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsIndependentSubprojectExecutionActivated", )

        if callResult is None:
            return None

        return callResult

    def IsIndependentSubprojectExecutionDeactivated(self):
        """
        Returns if the independent execution of subprojects is deactivated

        :return: True if deactivated, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsIndependentSubprojectExecutionDeactivated", )

        if callResult is None:
            return None

        return callResult

    def IsPkgExecutionOnAbortDisabled(self):
        """
        Returns if the Package execution on abort is disabled.

        :return: True if disabled used, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsPkgExecutionOnAbortDisabled", )

        if callResult is None:
            return None

        return callResult

    def RemoveAttribute(self, attributeName):
        """
        Removes an attribute.

        :param attributeName: Name of the attribute to be removed
        :type attributeName: unicode
        :raises: ApiError: When the specified attribute does not exist.
        
        """
        callResult = self._Call("RemoveAttribute", attributeName)


    def Save(self, filename=None):
        """
        Saves the project. Appends file ending if needed.

        :param filename: File name of the project; Either absolute or relative to the 'Packages'
                         directory. If left out, use the existing file name and path (from a
                         previous call of :meth:`Save()<.Project.Save>` or
                         :meth:`.ProjectApi.OpenProject`)
        :type filename: unicode
        
        """
        callResult = self._Call("Save", filename)


    def SetAttribute(self, name, value):
        """
        Sets the value of the attribute of the provided name

        :param name: Name of attribute
        :type name: unicode
        :param value: Value of attribute
        :type value: unicode
        
        """
        callResult = self._Call("SetAttribute", name, value)


    def SetCustomPkgExecutionOnAbortPkgPath(self, packagePath):
        """
        Sets the path for a custom Package to be executed upon abort of test execution

        :param packagePath: Absolute path to Package file
        :type packagePath: unicode
        
        """
        callResult = self._Call("SetCustomPkgExecutionOnAbortPkgPath", packagePath)


    def SetCustomRetryCondition(self, condition):
        """
        Sets the condition of the custom retry. Must be one of the following:

        - 'ERROR'
        - 'FAILED'
        - 'ERROR/FAILED'

        :param condition: The condition of the custom retry
        :type condition: unicode
        
        """
        callResult = self._Call("SetCustomRetryCondition", condition)


    def SetCustomRetryCount(self, count):
        """
        Sets the number of the retries for all Packages within the project component.

        :param count: Number of the custom retries
        :type count: integer
        
        """
        callResult = self._Call("SetCustomRetryCount", count)


    def SetDescription(self, description):
        """
        Sets the description of the project.

        :param description: description text
        :type description: unicode
        
        """
        callResult = self._Call("SetDescription", description)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (=Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, name):
        """
        Sets the name of the project component.

        :param name: Name of the component
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetRandomExecutionState(self, state):
        """
        Sets the random execution state of this container.
        
        :param state: True to activate, False to deactivate or None for inheritance from parent.
        :type state: boolean
        
        """
        callResult = self._Call("SetRandomExecutionState", state)


    def SetTestSuiteId(self, tmId):
        """
        Sets the test suite id of the project.

        :param tmId: Test suite id
        :type tmId: unicode
        
        """
        callResult = self._Call("SetTestSuiteId", tmId)


    def UseParentPkgExecutionOnAbortSettings(self):
        """
        Sets that the Package execution settings in case of test abort of
        the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentPkgExecutionOnAbortSettings", )


    def UseParentRetrySettings(self):
        """
        Sets that the retry settings of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentRetrySettings", )


    def UseParentSubprojectAbortSettings(self):
        """
        Sets that the settings whether to cancel or end the whole project execution
        on abort of a separately executed subproject of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentSubprojectAbortSettings", )


    def UseParentSubprojectExecutionSettings(self):
        """
        Sets that the settings whether to execute subprojects independently
        of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentSubprojectExecutionSettings", )


    def UseParentValueRestoreSettings(self):
        """
        Sets that the settings whether to restore the value of test quantities after the execution
        of every Package of the parent element are used.
        Existing custom settings are deleted.
        
        """
        callResult = self._Call("UseParentValueRestoreSettings", )



class Episode(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Episode, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.Episode`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Episode
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsRunOptimized(self):
        """
        Returns whether the episode execution is optimized based on numpy arrays.
        :return: True if optimized, else False.
        :rtype: boolean
        
        """
        callResult = self._Call("IsRunOptimized", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetRunOptimized(self, value):
        """
        Sets whether the episode is executed optimized based on numpy arrays.
        :param value: True if optimized, else False.
        :type value: boolean
        
        """
        callResult = self._Call("SetRunOptimized", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class Assertion(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Assertion, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.Assertion`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Assertion
        return classInstance(self._xmlRpc, objId)


    def GetCheckErrorMessage(self):
        """
        Returns whether the error messages are checked for an expression.

        :return: The error messages are checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckErrorMessage", )

        if callResult is None:
            return None

        return callResult

    def GetCheckExpectedVerdict(self):
        """
        Returns whether the verdict is checked for an expected value.

        :return: The verdict is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckExpectedVerdict", )

        if callResult is None:
            return None

        return callResult

    def GetCheckMaxExecutionTime(self):
        """
        Returns whether the execution time is checked against a max value.

        :return: The max execution time is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckMaxExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetCheckMinExecutionTime(self):
        """
        Returns whether the execution time is checked against a min value.

        :return: The min execution time is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckMinExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetErrorMessageExpr(self):
        """
        Returns the expression for the expected error message.

        :return: The error message expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetErrorMessageExpr", )

        if callResult is None:
            return None

        return callResult

    def GetExpectedVerdict(self):
        """
        Returns the expected verdict. Possible values are:
            - 'NONE'
            - 'SUCCESS'
            - 'INCONCLUSIVE'
            - 'FAILED'
            - 'ERROR'

        A list of these values is also possible.

        :return: The expected verdict
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectedVerdict", )

        if callResult is None:
            return None

        return callResult

    def GetMaxExecutionTimeExpr(self):
        """
        Returns the max value the execution time is checked against.

        :return: The max execution time expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxExecutionTimeExpr", )

        if callResult is None:
            return None

        return callResult

    def GetMaxExecutionTimeUnit(self):
        """
        Returns the unit for the max execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :return: The max execution time unit
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxExecutionTimeUnit", )

        if callResult is None:
            return None

        return callResult

    def GetMinExecutionTimeExpr(self):
        """
        Returns the min value the execution time is checked against.

        :return: The min execution time expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMinExecutionTimeExpr", )

        if callResult is None:
            return None

        return callResult

    def GetMinExecutionTimeUnit(self):
        """
        Returns the unit for the min execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :return: The min execution time unit
        :rtype: unicode
        
        """
        callResult = self._Call("GetMinExecutionTimeUnit", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetCheckErrorMessage(self, checkErrorMessage):
        """
        Sets whether the error messages are checked for an expression.

        :param checkErrorMessage: The error messages are checked
        :type checkErrorMessage: boolean
        
        """
        callResult = self._Call("SetCheckErrorMessage", checkErrorMessage)


    def SetCheckExpectedVerdict(self, checkVerdict):
        """
        Sets whether the verdict is checked for an expected value.

        :param checkVerdict: The verdict is checked
        :type checkVerdict: boolean
        
        """
        callResult = self._Call("SetCheckExpectedVerdict", checkVerdict)


    def SetCheckMaxExecutionTime(self, checkMaxExecutionTime):
        """
        Sets whether the execution time is checked against a max value.

        :param checkMaxExecutionTime: The max execution time is checked
        :type checkMaxExecutionTime: boolean
        
        """
        callResult = self._Call("SetCheckMaxExecutionTime", checkMaxExecutionTime)


    def SetCheckMinExecutionTime(self, checkMinExecutionTime):
        """
        Sets whether the execution time is checked against a min value.

        :param checkMinExecutionTime: The min execution time is checked
        :type checkMinExecutionTime: boolean
        
        """
        callResult = self._Call("SetCheckMinExecutionTime", checkMinExecutionTime)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetErrorMessageExpr(self, errorMessageExpr):
        """
        Sets an expression for an expected error message.

        :param errorMessageExpr: The error message expression
        :type errorMessageExpr: unicode
        
        """
        callResult = self._Call("SetErrorMessageExpr", errorMessageExpr)


    def SetExpectedVerdict(self, verdict):
        """
        Sets the expected verdict. Possible values are:
            - 'NONE'
            - 'SUCCESS'
            - 'INCONCLUSIVE'
            - 'FAILED'
            - 'ERROR'

        A list of these values is also valid.

        :param verdict: The expected verdict
        :type verdict: unicode
        
        """
        callResult = self._Call("SetExpectedVerdict", verdict)


    def SetMaxExecutionTimeExpr(self, maxExecutionTimeExpr):
        """
        Sets the max value the execution time is checked against.

        :param maxExecutionTimeExpr: The max execution time expression
        :type maxExecutionTimeExpr: unicode
        
        """
        callResult = self._Call("SetMaxExecutionTimeExpr", maxExecutionTimeExpr)


    def SetMaxExecutionTimeUnit(self, maxExecutionTimeUnit):
        """
        Sets the unit for the max execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :param maxExecutionTimeUnit: The max execution time unit
        :type maxExecutionTimeUnit: unicode
        :raise ApiError: If maxExecutionTimeUnit is not a valid unit
        
        """
        callResult = self._Call("SetMaxExecutionTimeUnit", maxExecutionTimeUnit)


    def SetMinExecutionTimeExpr(self, minExecutionTimeExpr):
        """
        Sets the min value the execution time is checked against.

        :param minExecutionTimeExpr: The min execution time expression
        :type minExecutionTimeExpr: unicode
        
        """
        callResult = self._Call("SetMinExecutionTimeExpr", minExecutionTimeExpr)


    def SetMinExecutionTimeUnit(self, minExecutionTimeUnit):
        """
        Sets the unit for the min execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :param minExecutionTimeUnit: The min execution time unit
        :type minExecutionTimeUnit: unicode
        :raise ApiError: If minExecutionTimeUnit is not a valid unit
        
        """
        callResult = self._Call("SetMinExecutionTimeUnit", minExecutionTimeUnit)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class SwitchDefCase(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SwitchDefCase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.SwitchDefCase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SwitchDefCase
        return classInstance(self._xmlRpc, objId)


    def CreateCaseNode(self, insertPosition=None):
        """
        Creates and returns a newly created case node.

        :param insertPosition: Specifies the insert position of the new case node.
                               If unspecified or too large the new case node will be inserted
                               before the default node.
        :type insertPosition: int
        :return: The specified case node
        :rtype: :class:`.CaseDefNode`
        
        """
        callResult = self._Call("CreateCaseNode", insertPosition)

        if callResult is None:
            return None


        objId = callResult
        classInstance = CaseDefNode
        return classInstance(self._xmlRpc, objId)


    def GetCaseNode(self, index):
        """
        Returns the specified case node.

        :param index: Specifies the index of the case node to return
        :type index: int
        :return: The specified case node
        :rtype: :class:`.CaseDefNode`
        
        """
        callResult = self._Call("GetCaseNode", index)

        if callResult is None:
            return None


        objId = callResult
        classInstance = CaseDefNode
        return classInstance(self._xmlRpc, objId)


    def GetCaseNodes(self):
        """
        Returns the list of the case nodes.

        :return: List of case nodes
        :rtype: list<:class:`.CaseDefNode`>
        
        """
        callResult = self._Call("GetCaseNodes", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = CaseDefNode
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetDescription(self):
        """
        Returns an empty text. A SwitchDef does not have a description.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetSwitchValue(self):
        """
        Returns the constant expression examined in the SwitchDef.

        :return: Constant expression of the SwitchDef
        :rtype: unicode
        
        """
        callResult = self._Call("GetSwitchValue", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False):
        """
        Returns the direct children of all case nodes if skipDisabledSteps is False (default).
        If skipDisabledSteps is True only the trace steps of the currently active case node
        will be returned.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded, defaults to False.
        :type skipDisabledSteps: boolean
        :return: The top-level trace steps
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDefaultError(self):
        """
        Returns the behavior of the default case. If set to True and the constant expression 
        does not match with any of the expected cases the analysis will result in an 'ERROR'.
        
        :return: Truth value of the current state
        :rtype: boolean
        
        """
        callResult = self._Call("IsDefaultError", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDefaultError(self, defaultError):
        """
        Sets the state of the default case behavior. If set to True and the constant expression 
        does not match with any of the expected cases the analysis will result in an 'ERROR'.
        
        :param defaultError: If set to True, enter the default case will result in an error at runtime.
        :type defaultError: boolean
        
        """
        callResult = self._Call("SetDefaultError", defaultError)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetSwitchValue(self, switchValue):
        """
        Sets the constant expression examined in the SwitchDef.

        :param switchValue: Constant expression of the SwitchDef
        :type switchValue: unicode
        
        """
        callResult = self._Call("SetSwitchValue", switchValue)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class CaseDefNode(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(CaseDefNode, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.CaseDefNode`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = CaseDefNode
        return classInstance(self._xmlRpc, objId)


    def GetCaseValue(self):
        """
        Returns the constant expression used in the case node.

        :return: Constant expression of the case node
        :rtype: unicode
        
        """
        callResult = self._Call("GetCaseValue", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Not available. A case node does not have a description.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDefaultNode(self):
        """
        Returns True if this is the default node.

        :return: If default node
        :rtype: bool
        
        """
        callResult = self._Call("IsDefaultNode", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetCaseValue(self, caseValue):
        """
        Sets the constant expression used in the case node.

        :param caseValue: Constant expression of the caseDefNode block
        :type caseValue: unicode
        
        """
        callResult = self._Call("SetCaseValue", caseValue)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class TemplateBasedTraceStep(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TemplateBasedTraceStep, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def AssignGenericSignal(self, sigName, genSig):
        """
        Bind a generic signal to a signal of the trace step.

        :note: It is not valid to assign a generic signal to multiple trace step signals!

        :param sigName: Name if trace step signal
        :type sigName: unicode

        :param genSig: The generic signal object
        :type genSig: :class:`.GenericSignal`

        :return: An object representing the signal binding. If a there is already a signal
                 binding for sigName, the signal binding object an its settings will be
                 reused; otherwise, a new signal binding object will be created.
        :rtype: :class:`.SignalBinding`
        
        """
        callResult = self._Call("AssignGenericSignal", sigName, genSig)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def AssignGenericSignalByName(self, sigName, genSigName):
        """
        Bind a generic signal to a signal of the trace step.

        :note: It is not valid to assign a generic signal to multiple trace step signals!

        :param sigName: Name of trace step signal
        :type sigName: unicode

        :param genSigName: Name of the generic signal
        :type genSigName: unicode

        :return: An object representing the signal binding. If there is already a signal
                 binding for sigName, the signal binding object and its settings will be
                 reused; otherwise, a new signal binding object will be created.
        :rtype: :class:`.SignalBinding`
        
        """
        callResult = self._Call("AssignGenericSignalByName", sigName, genSigName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def ClearSignalBinding(self, sigName):
        """
        Clears the signal binding for the given signal name.

        :param sigName: The signal name
        :type sigName: unicode
        
        """
        callResult = self._Call("ClearSignalBinding", sigName)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.TemplateBasedTraceStep`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TemplateBasedTraceStep
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameter(self, paramName):
        """
        Retrieves the expression assigned to a template parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :return: Expression assigned to the parameter
        :rtype: string
        
        """
        callResult = self._Call("GetParameter", paramName)

        if callResult is None:
            return None

        return callResult

    def GetReportConfig(self):
        """
        Returns the report config for this trace step.

        :return: The report config object
        :rtype: :class:`.ReportConfig`
        
        """
        callResult = self._Call("GetReportConfig", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportConfig
        return classInstance(self._xmlRpc, objId)


    def GetSignalBinding(self, sigName):
        """
        Get the signal binding for a signal.

        :param sigName: Name if trace step signal
        :type sigName: unicode

        :rtype: :class:`.SignalBinding`
        :return: An object representing the signal binding.
                 None if there is no generic signal bound.
       
        """
        callResult = self._Call("GetSignalBinding", sigName)

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalBinding
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTemplate(self):
        """
        Returns the assigned trace step template.

        :note: Use :meth:`.TraceStepTemplate.IsMissing` to check whether
               the trace step template file was found and loaded.

        :return: A trace step template object.
        :rtype: :class:`.TraceStepTemplate`
        
        """
        callResult = self._Call("GetTemplate", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetParameter(self, paramName, paramValue):
        """
        Assigns a value to a template parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :param paramValue: Value to assign to the parameter (can be an expression)
        :type paramValue: string
        
        """
        callResult = self._Call("SetParameter", paramName, paramValue)


    def SetParameters(self, paramDict):
        """
        Assigns values to template parameters.

        :param paramDict: Dictionary of parameter name -> parameter value (expression) mappings
        :type paramDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetParameters", paramDict)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTemplate(self, template):
        """
        Sets the referenced trace step template via object.

        :type template: :class:`.TraceStepTemplate`
        :param template: The trace step template object to reference
        
        """
        callResult = self._Call("SetTemplate", template)


    def SetTemplateById(self, templateId):
        """
        Sets the referenced trace step template by template id.

        :note: The template id is an absolute path to the file or a path to
               relative to the trace step template directory without the file extension.
               Standard trace step templates are addressed like templates in the
               trace step template directory.

        :type templateId: unicode
        :param templateId: The trace step template id
        
        """
        callResult = self._Call("SetTemplateById", templateId)



class IfDef(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(IfDef, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.IfDef`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = IfDef
        return classInstance(self._xmlRpc, objId)


    def GetCondition(self):
        """
        Returns the condition of IfDef block.

        :return: Condition of IfDef block
        :rtype: unicode
        
        """
        callResult = self._Call("GetCondition", )

        if callResult is None:
            return None

        return callResult

    def GetDescription(self):
        """
        Returns always an empty string, because IfDef blocks currently have no description.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetCondition(self, condition):
        """
        Sets the condition of IfDef block.

        :param condition: Condition of IfDef block
        :type condition: unicode
        
        """
        callResult = self._Call("SetCondition", condition)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class AnalysisBlock(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(AnalysisBlock, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.AnalysisBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = AnalysisBlock
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class SignalRecording(TraceStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(SignalRecording, self).__init__(xmlRpc, objId)



    def AddGenericSignal(self, genSig):
        """
        Adds a generic signal to this signal recording.
        :param genSig: A generic signal
        :type genSig: :class:`.GenericSignal`
        
        """
        callResult = self._Call("AddGenericSignal", genSig)


    def AddGenericSignalByName(self, name):
        """
        Adds a generic signal by name to this signal recording.

        :param name: The name of the generic signal
        :type name: unicode
        
        """
        callResult = self._Call("AddGenericSignalByName", name)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.SignalRecording`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = SignalRecording
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetFileExpression(self):
        """
        Returns the file expression of the trace file.

        :return: The path expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetFileExpression", )

        if callResult is None:
            return None

        return callResult

    def GetGenericSignalNames(self):
        """
        Return the names of the generic signals that are registered for signal recording.

        :return: List of generic signal names
        :rtype: list <unicode>
        
        """
        callResult = self._Call("GetGenericSignalNames", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetSignalNameType(self):
        """
        Returns which kind of name for the signal names is used  in the signal recording.

        :return: 'generic' or 'file'
        :rtype: unicode

        
        """
        callResult = self._Call("GetSignalNameType", )

        if callResult is None:
            return None

        return callResult

    def GetStoreType(self):
        """
        Returns the type of the file format.

        :return: The type of the file format. 'CSV' or 'MDF'.
        :rtype: unicode
        
        """
        callResult = self._Call("GetStoreType", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetFileExpression(self, expression):
        """
        Sets the file expression of the trace file.

        :param expression: The path expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetFileExpression", expression)


    def SetGenericSignalNames(self, genericSignalNames):
        """
        Sets the names of the generic signals to be recorded in this signal recording.

        :param genericSignalNames:
        :type genericSignalNames: list <unicode>
        
        """
        callResult = self._Call("SetGenericSignalNames", genericSignalNames)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetSignalNameType(self, signalNameType):
        """
        Sets which kind of names for the signals are used in the signal recording.

        :param signalNameType: 'generic' or 'file'
                                - 'generic':     name of the generic signals
                                - 'file':        name of the signal in the recording file
        :type signalNameType: unicode
        
        """
        callResult = self._Call("SetSignalNameType", signalNameType)


    def SetStoreType(self, storeType):
        """
        Sets the type of the file format.
        Possible values: 'CSV', 'MDF'.

        :param storeType: The new type of the file format.
        :type storeType: unicode
        
        """
        callResult = self._Call("SetStoreType", storeType)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)



class TriggerBlock(TraceStepContainer):
    """

    """


    @property
    def MODE_STARTTRIGGER_TO_NEXT_STOPTRIGGER(self):
        """
        Returns the constant used to specify the expectation mode
        'from start trigger until next time stop trigger is fulfilled'.

        :return: The constant
        :rtype: unicode
        
        """
        return self.__MODE_STARTTRIGGER_TO_NEXT_STOPTRIGGER

    @property
    def MODE_STARTTRIGGER_WHILE_NOT_STOPTRIGGER(self):
        """
        Returns the constant used to specify the expectation mode
        'from start trigger as long as stop trigger is not fulfilled'.

        :return: The constant
        :rtype: unicode
        
        """
        return self.__MODE_STARTTRIGGER_WHILE_NOT_STOPTRIGGER

    @property
    def MODE_WHILE_STARTTRIGGER(self):
        """
        Returns the constant used to specify the expectation mode
        'as long as start trigger is fulfilled'.

        :return: The constant
        :rtype: unicode
        
        """
        return self.__MODE_WHILE_STARTTRIGGER

    def __init__(self, xmlRpc=None, objId=0):
        super(TriggerBlock, self).__init__(xmlRpc, objId)

        self.__MODE_STARTTRIGGER_TO_NEXT_STOPTRIGGER = self._xmlRpc.ObjectApi.GetAttr(self._objId, "MODE_STARTTRIGGER_TO_NEXT_STOPTRIGGER")
        self.__MODE_STARTTRIGGER_WHILE_NOT_STOPTRIGGER = self._xmlRpc.ObjectApi.GetAttr(self._objId, "MODE_STARTTRIGGER_WHILE_NOT_STOPTRIGGER")
        self.__MODE_WHILE_STARTTRIGGER = self._xmlRpc.ObjectApi.GetAttr(self._objId, "MODE_WHILE_STARTTRIGGER")


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.TriggerBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TriggerBlock
        return classInstance(self._xmlRpc, objId)


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetEndOfTraceAsStopTrigger(self):
        """
        Returns whether the end of trace shall be handled as a stop trigger.

        :return: The setting for the treatment of unfinished ranges at the end of trace
        :rtype: bool
        
        """
        callResult = self._Call("GetEndOfTraceAsStopTrigger", )

        if callResult is None:
            return None

        return callResult

    def GetIgnoreFirstMode(self):
        """
        Returns the ignore first mode.

        :return: The mode: 'manual', 'firstsample' or 'disabled'
        :rtype: unicode
        
        """
        callResult = self._Call("GetIgnoreFirstMode", )

        if callResult is None:
            return None

        return callResult

    def GetIgnoreFirstTime(self):
        """
        Returns the ignore first time if set. Otherwise None is returned.

        :return: The expression value (only for manual mode)
        :rtype: unicode
        
        """
        callResult = self._Call("GetIgnoreFirstTime", )

        if callResult is None:
            return None

        return callResult

    def GetIgnoreLastMode(self):
        """
        Returns the ignore last mode.

        :return: The mode: 'manual' or 'disabled'
        :rtype: unicode
        
        """
        callResult = self._Call("GetIgnoreLastMode", )

        if callResult is None:
            return None

        return callResult

    def GetIgnoreLastTime(self):
        """
        Returns the ignore last time if set. Otherwise None is returned.

        :return: The expression value (only for manual mode)
        :rtype: unicode
        
        """
        callResult = self._Call("GetIgnoreLastTime", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetReportIgnoredRanges(self):
        """
        Returns whether ranges without a sample after consideration of the ignore times
        should be reported.

        :return: The setting whether ignored ranges will be reported
        :rtype: bool
        
        """
        callResult = self._Call("GetReportIgnoredRanges", )

        if callResult is None:
            return None

        return callResult

    def GetReportOmittedStartTrigger(self):
        """
        Returns whether omitted start triggers will be reported.

        :return: The setting whether omitted start triggers will be reported
        :rtype: bool
        
        """
        callResult = self._Call("GetReportOmittedStartTrigger", )

        if callResult is None:
            return None

        return callResult

    def GetResultNoMatch(self):
        """
        Returns the verdict of a trigger block that does not open any trigger range.

        :return: The verdict of a trigger block without a trigger range
        :rtype: unicode
        
        """
        callResult = self._Call("GetResultNoMatch", )

        if callResult is None:
            return None

        return callResult

    def GetStartTrigger(self):
        """
        Returns the start trigger expression.

        :return: The start trigger expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetStartTrigger", )

        if callResult is None:
            return None

        return callResult

    def GetStopTrigger(self):
        """
        Returns the stop trigger expression or None if no stop trigger is defined.

        :return: The stop trigger expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetStopTrigger", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTriggerMode(self):
        """
        Returns the trigger mode.

        :return: The trigger mode
        :rtype: unicode
        
        """
        callResult = self._Call("GetTriggerMode", )

        if callResult is None:
            return None

        return callResult

    def GetTriggerOnce(self):
        """
        Returns whether the trigger block should trigger only once.

        :return: The setting for restricting the number of trigger ranges to one
        :rtype: bool
        
        """
        callResult = self._Call("GetTriggerOnce", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetEndOfTraceAsStopTrigger(self, mode):
        """
        Sets whether the end of trace shall be handled as a stop trigger.

        :param mode: If True, unfinished ranges will be completed as if 
           an ordinary stop trigger occurred. Otherwise such ranges will be rated 
           INCONCLUSIVE.
        :type mode: bool
        
        """
        callResult = self._Call("SetEndOfTraceAsStopTrigger", mode)


    def SetIgnoreFirst(self, mode, ignoreTime=None):
        """
        Sets whether at the start of each trigger range a quantity of samples should be
        excluded. Possible values for mode are: 'disabled', 'manual' or
        'firstsample'. In the latter mode the parameter ignoreTime will have no impact.

        :param mode: The mode for ignore first
        :type mode: unicode
        :param ignoreTime: The expression value for the ignored time (only for manual mode)
        :type ignoreTime: unicode
        
        """
        callResult = self._Call("SetIgnoreFirst", mode, ignoreTime)


    def SetIgnoreLast(self, mode, ignoreTime=None):
        """
        Sets whether at the end of each trigger range a certain time span parameterized 
        by ignoreTime should be excluded. Possible values for mode are: 'disabled' 
        or 'manual'.

        :param mode: The mode for ignore last
        :type mode: unicode
        :param ignoreTime: The expression value for the ignored time (only for manual mode)
        :type ignoreTime: unicode
        
        """
        callResult = self._Call("SetIgnoreLast", mode, ignoreTime)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetReportIgnoredRanges(self, reportRanges):
        """
        Sets whether ranges without a sample after consideration of the ignore times
        should be reported.

        :param reportRanges: If true, a range whose samples are completely left out 
           due to the ignore times will be reported as NONE range. Otherwise it will not be reported.
        :type reportRanges: bool
        
        """
        callResult = self._Call("SetReportIgnoredRanges", reportRanges)


    def SetReportOmittedStartTrigger(self, reportTrigger):
        """
        Sets whether omitted start triggers will be reported.

        :param reportTrigger: If true, for every omitted start trigger of the mode
           'start trigger while not stop trigger' a spot will be generated.
        :type reportTrigger: bool
        
        """
        callResult = self._Call("SetReportOmittedStartTrigger", reportTrigger)


    def SetResultNoMatch(self, resultNoMatch):
        """
        Sets the verdict of a trigger block that does not open any trigger range.
        Possible values: 'NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED' or 'ERROR'.

        :param resultNoMatch: The verdict of a trigger block without a trigger range
        :type resultNoMatch: unicode
        
        """
        callResult = self._Call("SetResultNoMatch", resultNoMatch)


    def SetStartTrigger(self, startTrigger):
        """
        Sets the start trigger expression.

        :param startTrigger: The start trigger expression
        :type startTrigger: unicode
        
        """
        callResult = self._Call("SetStartTrigger", startTrigger)


    def SetStopTrigger(self, stopTrigger):
        """
        Sets the stop trigger expression.

        :param stopTrigger: The stop trigger expression
        :type stopTrigger: unicode
        
        """
        callResult = self._Call("SetStopTrigger", stopTrigger)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTriggerMode(self, triggerMode):
        """
        Sets the trigger mode. Possible values for mode can be obtained
        by either of the constants:

         * :py:attr:`TriggerBlock.MODE_WHILE_STARTTRIGGER`
         * :py:attr:`TriggerBlock.MODE_STARTTRIGGER_WHILE_NOT_STOPTRIGGER`
         * :py:attr:`TriggerBlock.MODE_STARTTRIGGER_TO_NEXT_STOPTRIGGER`

        :param triggerMode: The stop trigger expression
        :type triggerMode: unicode
        
        """
        callResult = self._Call("SetTriggerMode", triggerMode)


    def SetTriggerOnce(self, triggerOnce):
        """
        Sets whether the trigger block should trigger once or repeatedly.

        :param triggerOnce: If true, only the very first trigger range that is found
           will be analyzed. Further ranges will be ignored.
        :type triggerOnce: bool
        
        """
        callResult = self._Call("SetTriggerOnce", triggerOnce)



class TsIfDef(TestStepContainer):
    """

    Api- of the if def utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsIfDef, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsIfDef`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsIfDef
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCondition(self):
        """
        Returns the condition of the IfDef test step.

        :return: Condition of the IfDef test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetCondition", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. For IfDef test steps this depends both on whether
        the condition is fulfilled and whether a parent test step is disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetCondition(self, condition):
        """
        Sets the condition of the IfDef test step.

        :param condition: Condition of the IfDef test step
        :type condition: unicode
        
        """
        callResult = self._Call("SetCondition", condition)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TestStepRWBase(MappingTestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TestStepRWBase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TestStepRWBase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetRepresentation(self, axis='z'):
        """
        Returns the representation of a certain axis of the accessed test quantity.

        :param axis: Axis to set representation for (x, y, z)
        :type axis: unicode
        :return: Representation for axis (PHYS, TEXT, RAW, BITS)
        :rtype: unicode
        
        """
        callResult = self._Call("GetRepresentation", axis)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self, axis='z'):
        """
        Returns the unit of a certain axis of the accessed test quantity.

        :param axis: Axis to set unit for (x, y, z)
        :type axis: unicode
        :return: Unit for axis
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", axis)

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetRepresentation(self, representation='PHYS', axis='z'):
        """
        Sets the representation of a certain axis of the accessed test quantity.

        :param representation: Representation for axis (PHYS, TEXT, RAW, BITS)
        :type representation: unicode
        :param axis: Axis to set representation for (x, y, z)
        :type axis: unicode
        
        """
        callResult = self._Call("SetRepresentation", representation, axis)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUnit(self, unit, axis='z'):
        """
        Sets the unit of a certain axis of the accessed test quantity.

        :param unit: Unit for axis
        :type unit: unicode
        :param axis: Axis to set unit for (x, y, z)
        :type axis: unicode
        
        """
        callResult = self._Call("SetUnit", unit, axis)



class TsBlockBase(TestStepContainer):
    """

    Basic Api- of the block structure test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBlockBase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBlockBase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column in your current test case language.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedActionColumnText(self, language):
        """
        Returns the text value of the "action" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedActionColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedParameterColumnText(self, language):
        """
        Returns the text value of the "parameter" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedParameterColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedValueColumnText(self, language):
        """
        Returns the text value of the "value" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedValueColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetParameterColumnText(self, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetParameterColumnText", text)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetTranslatedParameterColumnText(self, language, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedParameterColumnText", language, text)


    def SetTranslatedValueColumnText(self, language, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedValueColumnText", language, text)


    def SetValueColumnText(self, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in
        your current test case language.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetValueColumnText", text)



class TsEdiabas(MappingTestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsEdiabas, self).__init__(xmlRpc, objId)



    def AddResult(self, name):
        """
        Adds a self defined result to the result list.

        :param name: Name of the result
        :type name: unicode
        :return: Self defined result
        :rtype: :class:`.EdiabasResult`
        :raises: ApiError: When the name of the result is already defined.
        
        """
        callResult = self._Call("AddResult", name)

        if callResult is None:
            return None


        objId = callResult
        classInstance = EdiabasResult
        return classInstance(self._xmlRpc, objId)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsEdiabas`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEdiabas
        return classInstance(self._xmlRpc, objId)


    def DeactivateSaveAllIn(self):
        """
        Deactivated the save all in variable option.
        
        """
        callResult = self._Call("DeactivateSaveAllIn", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetArguments(self):
        """
        Returns the argument list.

        :return: List of Ediabas arguments
        :rtype: list<:class:`.EdiabasArgument`>
        :raises: ApiError: If the initialization EDIABAS data object fails.
        
        """
        callResult = self._Call("GetArguments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = EdiabasArgument
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetResponseExpectation(self):
        """
        Returns the expected response from the ECU.

        :return: Expected response. One of [u'EXPECTED', u'OPTIONAL', u'NOT_EXPECTED']
        :rtype: unicode
        
        """
        callResult = self._Call("GetResponseExpectation", )

        if callResult is None:
            return None

        return callResult

    def GetResults(self):
        """
        Returns the result list.

        :return: List of results
        :rtype: list<:class:`.EdiabasResult`>
        
        """
        callResult = self._Call("GetResults", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = EdiabasResult
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetSaveAllInVariableName(self):
        """
        Returns the save all in variable name.

        :return: Variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveAllInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsReportAllEnabled(self):
        """
        Returns whether the report all option is enabled.

        :return: Whether report all is enabled or not.
        :rtype: boolean
        
        """
        callResult = self._Call("IsReportAllEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveResult(self, name):
        """
        Removes a self defined result from the result list.

        :param name: Name of the result
        :type name: unicode
        :raise ApiError: If the test step has no self defined result with the given name
        
        """
        callResult = self._Call("RemoveResult", name)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetReportAll(self, reportAll=True):
        """
        Sets whether the report all option is enabled.

        :param reportAll: Whether report all is enabled or not. (optional, defaults to True)
        :type reportAll: boolean
        :raises: ApiError: Is the parameter reportAll is not of type boolean.
        
        """
        callResult = self._Call("SetReportAll", reportAll)


    def SetResponseExpectation(self, respExp):
        """
        Sets the expected response from the ECU.

        :param respExp: Expected response. Must be one of [u'EXPECTED', u'OPTIONAL',
            u'NOT_EXPECTED']
        :type respExp: unicode
        :raises: ApiError: When the expected response parameter is invalid.
        
        """
        callResult = self._Call("SetResponseExpectation", respExp)


    def SetSaveAllInVariableName(self, varName):
        """
        Sets the save all in variable name.

        :param varName: Variable name
        :type varName: unicode
        :raises: ApiError: - If the parameter varName is not of type unicode
                           - The test step is not added to a package
        
        """
        callResult = self._Call("SetSaveAllInVariableName", varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsLoop(TestStepContainer):
    """

    Api- of the loop utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsLoop, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsLoop`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsLoop
        return classInstance(self._xmlRpc, objId)


    def DeactivateSaveIn(self):
        """
        Deactivates the test step's save in property, so the loop counter will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetLoopCountExpression(self):
        """
        Returns the loop count expression of the loop test step.

        :return: Count expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetLoopCountExpression", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self):
        """
        Returns the name of the loop counter variable. If the counter is not stored, an empty
        string will be returned.

        :return: The name of the loop counter variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetStartCondition(self):
        """
        Returns the start condition of the loop test step.

        :return: Start condition
        :rtype: unicode
        
        """
        callResult = self._Call("GetStartCondition", )

        if callResult is None:
            return None

        return callResult

    def GetStopCondition(self):
        """
        Returns the stop condition of the loop test step.

        :return: Stop condition
        :rtype: unicode
        
        """
        callResult = self._Call("GetStopCondition", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetLoopCountExpression(self, expression):
        """
        Sets the count expression of the loop test step.

        :param expression: Count expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetLoopCountExpression", expression)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing the current loop counter value. The variable
        will be created automatically if it does not already exist in the package where the test
        step is placed in.
        This method must not be called, if the test step has not been added to a package previously.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: string
        :raise ApiError: - If SaveIn was called before the test step was added to a package.
                         - If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetStartCondition(self, condition):
        """
        Sets the start condition of the loop test step.
        deletes a potentially existing stop condition.

        :param condition: Start condition
        :type condition: unicode
        
        """
        callResult = self._Call("SetStartCondition", condition)


    def SetStopCondition(self, condition):
        """
        Sets the stop condition of the loop test step.
        deletes a potentially existing start condition.

        :param condition: Stop condition
        :type condition: unicode
        
        """
        callResult = self._Call("SetStopCondition", condition)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsBusMonitoring(MappingTestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBusMonitoring, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBusMonitoring`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetAction(self):
        """
        Returns the action of the test step.

        :return: The action of the test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAction", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationDescriptor(self):
        """
        Returns list of all expectation types.

        :return: List of expectation types
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetExpectationDescriptor", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self, idx):
        """
        Returns the expectation expression specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :return: Expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", idx)

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self, idx):
        """
        Returns the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", idx)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAction(self, action):
        """
        Sets which action the test step will perform.

        :param action: The action of the test step. Must be one of [u'START', u'CHECK']
        :type action: unicode
        
        """
        callResult = self._Call("SetAction", action)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectationExpression(self, idx, exp):
        """
        Sets an expectation for the type specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :param exp: Expectation expression
        :type exp: unicode
        
        """
        callResult = self._Call("SetExpectationExpression", idx, exp)


    def SetSaveInVariableName(self, idx, varName):
        """
        Sets the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :param varName: Name of the variable
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", idx, varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsBusFirstSignalCheck(MappingTestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBusFirstSignalCheck, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBusFirstSignalCheck`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusFirstSignalCheck
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivated the expectation option.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateSaveInVariable(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveInVariable", )


    def GetAction(self):
        """
        Returns the action of the test step.

        :return: The action of the test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAction", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self):
        """
        Returns the expectation expression as string.

        :return: Expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self):
        """
        Returns the name of the variable in which the value will be saved.

        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAction(self, action):
        """
        Sets which action the test step will perform.

        :param action: The action of the test step. Must be one of [u'RESET', u'READ']
        :type action: unicode
        
        """
        callResult = self._Call("SetAction", action)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectationExpression(self, expectation):
        """
        Sets the expectation expression.

        :param expectation: Expectation expression as string
        :type expectation: unicode
        
        """
        callResult = self._Call("SetExpectationExpression", expectation)


    def SetSaveInVariableName(self, name):
        """
        Sets the name of the variable in which the value will be saved.

        :param name: Name of the variable
        :type name: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", name)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsStopTrace(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsStopTrace, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsStopTrace`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStopTrace
        return classInstance(self._xmlRpc, objId)


    def DeactivateUseCondition(self):
        """
        Deactivate the use condition.
        
        """
        callResult = self._Call("DeactivateUseCondition", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetRecordingGroup(self):
        """
        Returns the recording group set for this test step.

        :return: The recording group. Returns None if no recording group is assigned.
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetRecordingGroup", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetTriggerName(self):
        """
        Returns the trigger name.

        :return: The trigger name
        :rtype: unicode
        
        """
        callResult = self._Call("GetTriggerName", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUseConditionExpression(self):
        """
        Returns the condition that will be evaluated to determine whether the recording should
        be used.
        
        :return: The condition as expression. Will be None if the use condition is deactivated.
        :rtype: unicode
        
        """
        callResult = self._Call("GetUseConditionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetRecordingGroup(self, recordingGroup):
        """
        Sets the recording group that will be started by this test step.

        :param recordingGroup: The recording group
        :type recordingGroup: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("SetRecordingGroup", recordingGroup)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetTriggerName(self, triggerName):
        """
        Sets the trigger name.

        :param triggerName: The trigger name
        :type triggerName: unicode
        
        """
        callResult = self._Call("SetTriggerName", triggerName)


    def SetUseConditionExpression(self, expression):
        """
        Sets the condition that will be evaluated to determine whether the recording should
        be used.
        
        :param expression: The condition as expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetUseConditionExpression", expression)



class TsSwitchDefCase(TsSwitchBase):
    """

    Api- of the switch def case utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsSwitchDefCase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def ClearNodes(self):
        """
        Removes all nodes.
        
        """
        callResult = self._Call("ClearNodes", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsSwitchDefCase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSwitchDefCase
        return classInstance(self._xmlRpc, objId)


    def CreateCaseNode(self, caseValue='0', insPos=None):
        """
        Creates a new case node and adds it to the switch def case test step.
        Switch test step has prior to be added to package.

        :param caseValue: Case value of the case node
        :type caseValue: unicode
        :param insPos: Position to insert case node
            (if None, it is inserted before the default node)
        :type insPos: integer
        :return: New case node
        :rtype: :class:`.TsCaseDefNode`
        
        """
        callResult = self._Call("CreateCaseNode", caseValue, insPos)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCaseDefNode
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCaseNode(self, index):
        """
        Returns the specified case node

        :param index: Specifies the index of the case node to return
        :type index: integer
        :return: The specified case node
        :rtype: :class:`.TsCaseDefNode`
        
        """
        callResult = self._Call("GetCaseNode", index)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCaseDefNode
        return classInstance(self._xmlRpc, objId)


    def GetCaseNodes(self):
        """
        Returns the list of the case nodes.

        :return: list of case nodes
        :rtype: list<:class:`.TsCaseDefNode`>
        
        """
        callResult = self._Call("GetCaseNodes", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = TsCaseDefNode
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSwitchValue(self):
        """
        Returns the switch value.

        :return: Switch value
        :rtype: unicode
        
        """
        callResult = self._Call("GetSwitchValue", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.

        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>

        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDefaultError(self):
        """
        Returns the behavior of the default case.

        :return: truth value of the current state
        :rtype: boolean
        
        """
        callResult = self._Call("IsDefaultError", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveCaseNode(self, node):
        """
        Removes one node.

        :param node: The note to be removed
        :type node: :class:`.TsCaseDefNode`
        
        """
        callResult = self._Call("RemoveCaseNode", node)


    def RemoveCaseNodeByIndex(self, idx):
        """
        Removes one node by index.

        :param idx: Index of the node
        :type idx: integer
        
        """
        callResult = self._Call("RemoveCaseNodeByIndex", idx)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDefaultError(self, defaultError):
        """
        Sets state of the default case behavior.

        :param defaultError: If set to True, entering the default case will result in an error at
            runtime.
        :type defaultError: boolean
        
        """
        callResult = self._Call("SetDefaultError", defaultError)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetSwitchValue(self, switchValue='0'):
        """
        Sets the switch value.

        :param switchValue: Switch value
        :type switchValue: unicode
        
        """
        callResult = self._Call("SetSwitchValue", switchValue)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsCaseNodeBase(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsCaseNodeBase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsCaseNodeBase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCaseValue(self):
        """
        Returns the value of the case node.

        :return: Case value
        :rtype: unicode
        
        """
        callResult = self._Call("GetCaseValue", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDefaultNode(self):
        """
        Returns True if this is the default node.

        :return: If default node
        :rtype: bool
        
        """
        callResult = self._Call("IsDefaultNode", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetCaseValue(self, caseValue='0'):
        """
        Sets the value of the case node.

        :param caseValue: Case value
        :type caseValue: unicode
        
        """
        callResult = self._Call("SetCaseValue", caseValue)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsStopSimulation(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsStopSimulation, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsStopSimulation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStopSimulation
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMode(self):
        """
        Returns the mode used to stop the simulation.

        Possible return values:
         * IMMEDIATELY
         * WAIT

        :return: The stop mode
        :rtype: unicode
        
        """
        callResult = self._Call("GetMode", )

        if callResult is None:
            return None

        return callResult

    def GetModelKey(self):
        """
        Returns the model system identifier from which the element is loaded.

        :return: The model system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetModelKey", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetStopAfterValue(self):
        """
        Returns the value in seconds for the 'stop after' time as an expression, after which the 
        simulation is stopped automatically.

        :return: The value in seconds for the 'stop after' time as an expression.
        :rtype: unicode
        
        """
        callResult = self._Call("GetStopAfterValue", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsStopAfterEnabled(self):
        """
        Returns whether the 'stop after' function is enabled, which automatically stops the 
        simulation after the specified time.

        :return: True if 'stop after' function is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsStopAfterEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetMode(self, mode):
        """
        Sets the mode used to stop the simulation.
        
        Valid values:
         * IMMEDIATELY
         * WAIT

        :param mode: The stop mode
        :type mode: unicode
        
        """
        callResult = self._Call("SetMode", mode)


    def SetModelKey(self, modelKey):
        """
        Sets the model system identifier from which the element is loaded.

        :param modelKey: The model system identifier
        :type modelKey: unicode
        
        """
        callResult = self._Call("SetModelKey", modelKey)


    def SetStopAfterEnabled(self, enabled=True):
        """
        Enable or disable the 'stop after' function, which automatically stops the simulation after
        the specified time.

        :param enabled: True (Default) to enable, False to disable the 'stop after' function
        :type enabled: boolean
        
        """
        callResult = self._Call("SetStopAfterEnabled", enabled)


    def SetStopAfterValue(self, expression):
        """
        Sets the value in seconds for the 'stop after' time as an expression, after which the 
        simulation is stopped automatically.

        :param expression: The value in seconds for the 'stop after' time as an expression.
        :type expression: unicode
        
        
        """
        callResult = self._Call("SetStopAfterValue", expression)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsEdiabasLockBlock(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsEdiabasLockBlock, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsEdiabasLockBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEdiabasLockBlock
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetControlUnitName(self):
        """
        Returns the control unit name.

        :return: Name of the control unit
        :rtype: unicode
        
        """
        callResult = self._Call("GetControlUnitName", )

        if callResult is None:
            return None

        return callResult

    def GetControlUnitNames(self):
        """
        Returns a list of all control units that are available with the current configuration.

        :return: List of control unit names
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetControlUnitNames", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetControlUnitName(self, name, check=True):
        """
        Sets the control unit name.

        :param name: Name of the control unit
        :type name: unicode
        :param check: Whether the availability of the control unit will be checked (optional,
            defaults to True)
        :type check: boolean
        
        """
        callResult = self._Call("SetControlUnitName", name, check)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsEesErrorSet(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsEesErrorSet, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :raise ApiError: If the passed testStep is not of type TsEesError 
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsEesErrorSet`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsEesErrorSet
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the error set.

        :return: Name of the error set
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        :raise ApiError: If the passed testStep is not of type TsEesError
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetName(self, setName):
        """
        Sets the name of the error set.

        :param setName: Name of the error set
        :type setName: unicode
        
        """
        callResult = self._Call("SetName", setName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class Node(TestStepContainer):
    """

    Api- of an if then else node.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(Node, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.Node`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Node
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsClearFrameAndSignalBuffers(MappingTestStep):
    """

    API-Fassade des 'Puffer fÃ¼r Frame und Signale leeren' Testschritts.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsClearFrameAndSignalBuffers, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsClearFrameAndSignalBuffers`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsClearFrameAndSignalBuffers
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsReactOn(TestStepContainer):
    """

    Api- of the react on utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsReactOn, self).__init__(xmlRpc, objId)



    def AddNode(self, node):
        """
        Adds a Node to the test step
    
        :param node: The node to be inserted
        :type node: :class:`.TsReactOnNode`
        
        """
        callResult = self._Call("AddNode", node)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def ClearNodes(self):
        """
        Removes all nodes.
        
        """
        callResult = self._Call("ClearNodes", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsReactOn`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReactOn
        return classInstance(self._xmlRpc, objId)


    def CreateNode(self, conditionType, conditionStr=None, insPos=None):
        """
        Creates a new node.

        :param conditionType: Must be one of ['After', 'OnVar', 'OnInbox']
        :type conditionType: unicode
        :param conditionStr: condition expression (Default: None)
        :type conditionStr: unicode
        :param insPos: Position to insert node 
                (if None, it is inserted before the default node)
        :type insPos: int
        :return: New node
        :rtype: :class:`.TsReactOnNode`
        
        """
        callResult = self._Call("CreateNode", conditionType, conditionStr, insPos)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReactOnNode
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetNode(self, idx):
        """
        Returns the node corresponding to the index.

        :param idx: Index of the node to be returned
        :type idx: integer
        :return: node
        :rtype: :class:`.TsReactOnNode`
        
        """
        callResult = self._Call("GetNode", idx)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReactOnNode
        return classInstance(self._xmlRpc, objId)


    def GetNodes(self):
        """
        Returns all nodes of the react-on test step.

        :return: all nodes of the test step
        :rtype: list<:class:`.TsReactOnNode`>
        
        """
        callResult = self._Call("GetNodes", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = TsReactOnNode
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveNode(self, node):
        """
        Removes one node.

        :param node: The note to be removed
        :type node: :class:`.TsReactOnNode`
        
        """
        callResult = self._Call("RemoveNode", node)


    def RemoveNodeByIndex(self, idx):
        """
        Removes one node by index.

        :param idx: Index of the node
        :type idx: int
        
        """
        callResult = self._Call("RemoveNodeByIndex", idx)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsReactOnNode(TestStepContainer):
    """

    Api- of a react-on-node.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsReactOnNode, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsReactOnNode`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsReactOnNode
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLabel(self):
        """
        Returns the label of the node.

        :return: label
        :rtype: unicode
        
        """
        callResult = self._Call("GetLabel", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the node.

        :return: the name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValue(self):
        """
        Returns the value of the node.

        :return: the value
        :rtype: unicode
        
        """
        callResult = self._Call("GetValue", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsStartTrace(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsStartTrace, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsStartTrace`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStartTrace
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetRecordingGroup(self):
        """
        Returns the recording group set for this test step.

        :return: The recording group. Returns None if no recording group is assigned.
        :rtype: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("GetRecordingGroup", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetTriggerName(self):
        """
        Returns the trigger name.

        :return: The trigger name
        :rtype: unicode
        
        """
        callResult = self._Call("GetTriggerName", )

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetRecordingGroup(self, recordingGroup):
        """
        Sets the recording group that will be started by this test step.

        :param recordingGroup: The recording group
        :type recordingGroup: :class:`.RecordingGroup`
        
        """
        callResult = self._Call("SetRecordingGroup", recordingGroup)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetTriggerName(self, triggerName):
        """
        Sets the trigger name.

        :param triggerName: The trigger name
        :type triggerName: unicode
        
        """
        callResult = self._Call("SetTriggerName", triggerName)



class TsAlterPDUTiming(MappingTestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsAlterPDUTiming, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsAlterPDUTiming`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAlterPDUTiming
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActivationStatus(self):
        """
        Returns the activation status.

        :return: Activation status
        :rtype: unicode
        
        """
        callResult = self._Call("GetActivationStatus", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetCalculationExpression(self):
        """
        Returns the frame calculation expression.

        :return: Frame calculation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetCalculationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCycleTimeExpression(self):
        """
        Returns the PDU cycle time expression.

        :return: PDU cycle time expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetCycleTimeExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetActivationSatus(self, status):
        """
        Sets the activation status.

        :param status: Activation status. Must be one of [u'UNCHANGED', u'OFF', u'ON']
        :type status: unicode
        
        """
        callResult = self._Call("SetActivationSatus", status)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetCalculationExpression(self, expr):
        """
        Sets the frame calculation expression.

        :param expr: Expression that defines the frame calculation
        :type expr: unicode
        
        """
        callResult = self._Call("SetCalculationExpression", expr)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetCycleTimeExpression(self, expr):
        """
        Sets the PDU cycle time expression.

        :param expr: Expression that defines the pdu cycle time. None for "unchanged"
        :type expr: unicode
        
        """
        callResult = self._Call("SetCycleTimeExpression", expr)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsSwitchCase(TsSwitchBase):
    """

    Api- of the switch case utility test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsSwitchCase, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def ClearNodes(self):
        """
        Removes all nodes.
        
        """
        callResult = self._Call("ClearNodes", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsSwitchCase`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSwitchCase
        return classInstance(self._xmlRpc, objId)


    def CreateCaseNode(self, caseValue='0', insPos=None):
        """
        Creates a new case node and adds it to the switch-case test step.
        Switch test step has prior to be added to package.

        :param caseValue: Case value of the case node
        :type caseValue: unicode
        :param insPos: Position to insert case node
            (if None, it is inserted before the default node)
        :type insPos: int
        :return: New case node
        :rtype: :class:`.TsCaseNode`
        
        """
        callResult = self._Call("CreateCaseNode", caseValue, insPos)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCaseNode
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCaseNode(self, index):
        """
        Returns the specified case node.

        :param index: Specifies the index of the case node to return
        :type index: int
        :return: The specified case node
        :rtype: :class:`.TsCaseNode`
        
        """
        callResult = self._Call("GetCaseNode", index)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCaseNode
        return classInstance(self._xmlRpc, objId)


    def GetCaseNodes(self):
        """
        Returns the list of the nodes.

        :return: list of case nodes
        :rtype: list<:class:`.TsCaseNode`>
        
        """
        callResult = self._Call("GetCaseNodes", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = TsCaseNode
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSwitchValue(self):
        """
        Returns the switch value.

        :return: Switch value
        :rtype: unicode
        
        """
        callResult = self._Call("GetSwitchValue", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.

        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>

        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveCaseNode(self, node):
        """
        Removes one case node.

        :param node: The note to be removed
        :type node: :class:`.TsCaseNode`
        
        """
        callResult = self._Call("RemoveCaseNode", node)


    def RemoveCaseNodeByIndex(self, idx):
        """
        Removes one case node by index.

        :param idx: Index of the node
        :type idx: int
        
        """
        callResult = self._Call("RemoveCaseNodeByIndex", idx)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetSwitchValue(self, switchValue='0'):
        """
        Sets the switch value.

        :param switchValue: Switch value
        :type switchValue: unicode
        
        """
        callResult = self._Call("SetSwitchValue", switchValue)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsInputDialog(TsUserInterface):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsInputDialog, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsInputDialog`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsInputDialog
        return classInstance(self._xmlRpc, objId)


    def CreateCheckBox(self, identExpr=None, defaultExpr=None, toolTipExpr=None, varName=None, insPos=None):
        """
        Creates a new checkbox control.

        :param identExpr: Identifier expression of the text control
        :type identExpr: unicode
        :param defaultExpr: Value expression that specifies whether the checkbox is ticked initially
        :type defaultExpr: unicode
        :param toolTipExpr: Tool tip expression
        :type toolTipExpr: unicode
        :param varName: Variable name in which the value will be stored
        :type varName: unicode
        :param insPos: Insert position of the control. Control will be appended if None.
        :type insPos: integer
        
        """
        callResult = self._Call("CreateCheckBox", identExpr, defaultExpr, toolTipExpr, varName, insPos)


    def CreateComboBox(self, identExpr=None, elementExpr=None, preselectExpr=None, toolTipExpr=None, varName=None, insPos=None):
        """
        Creates a new combobox control.

        :param identExpr: Identifier expression of the text control
        :type identExpr: unicode
        :param elementExpr: Expression containing a list that specifies all possible values.
            E.g. u"['choice1', 'choice2']"
        :type elementExpr: unicode
        :param preselectExpr: Preselection expression
        :type preselectExpr: unicode
        :param toolTipExpr: Tool tip expression
        :type toolTipExpr: unicode
        :param varName: Variable name in which the value will be stored
        :type varName: unicode
        :param insPos: Insert position of the control. Control will be appended if None.
        :type insPos: integer
        
        """
        callResult = self._Call("CreateComboBox", identExpr, elementExpr, preselectExpr, toolTipExpr, varName, insPos)


    def CreateFileList(self, identExpr=None, pathExpr=None, filterExpr=None, toolTipExpr=None, varName=None, insPos=None):
        """
        Creates a new file list control.

        :param identExpr: Identifier expression of the text control
        :type identExpr: unicode
        :param pathExpr: Path expression
        :type pathExpr: unicode
        :param filterExpr: Filer expression
        :type filterExpr: unicode
        :param toolTipExpr: Tool tip expression
        :type toolTipExpr: unicode
        :param varName: Variable name in which the value will be stored
        :type varName: unicode
        :param insPos: Insert position of the control. Control will be appended if None.
        :type insPos: integer
        
        """
        callResult = self._Call("CreateFileList", identExpr, pathExpr, filterExpr, toolTipExpr, varName, insPos)


    def CreateRadioButton(self, identExpr=None, defaultExpr=None, toolTipExpr=None, varName=None, insPos=None):
        """
        Creates a new radio button control.

        :param identExpr: Identifier expression of the text control
        :type identExpr: unicode
        :param defaultExpr: Value expression that specifies whether the radiobutton is ticked
            initially
        :type defaultExpr: unicode
        :param toolTipExpr: Tool tip expression
        :type toolTipExpr: unicode
        :param varName: Variable name in which the value will be stored
        :type varName: unicode
        :param insPos: Insert position of the control. Control will be appended if None.
        :type insPos: integer
        
        """
        callResult = self._Call("CreateRadioButton", identExpr, defaultExpr, toolTipExpr, varName, insPos)


    def CreateTextCtrl(self, identExpr=None, defaultExpr=None, toolTipExpr=None, varName=None, insPos=None):
        """
        Creates a new text control.

        :param identExpr: Indentifier expression of the text control
        :type identExpr: unicode
        :param defaultExpr: Default value expression of the text control
        :type defaultExpr: unicode
        :param toolTipExpr: Tool tip expression
        :type toolTipExpr: unicode
        :param varName: Variable name in which the value will be stored
        :type varName: unicode
        :param insPos: Insert position of the control. Control will be appended if None.
        :type insPos: integer
        
        """
        callResult = self._Call("CreateTextCtrl", identExpr, defaultExpr, toolTipExpr, varName, insPos)


    def CreateTextCtrlMultiline(self, identExpr=None, defaultExpr=None, toolTipExpr=None, varName=None, insPos=None):
        """
        Creates a new multiline text control.

        :param identExpr: Identifier expression of the text control
        :type identExpr: unicode
        :param defaultExpr: Default value expression of the text control. Lines that are too long
            will be broken down automatically. A linebreak can be forced using '\\n'.
        :type defaultExpr: unicode
        :param toolTipExpr: Tool tip expression
        :type toolTipExpr: unicode
        :param varName: Variable name in which the value will be stored
        :type varName: unicode
        :param insPos: Insert position of the control. Control will be appended if None.
        :type insPos: integer
        
        """
        callResult = self._Call("CreateTextCtrlMultiline", identExpr, defaultExpr, toolTipExpr, varName, insPos)


    def DeactivateSaveInVariable(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveInVariable", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDialogDescriptionExpression(self):
        """
        Returns the dialog description expression.

        :return: Dialog description expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogDescriptionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDialogTitleExpression(self):
        """
        Returns the dialog title expression.

        :return: Dialog title expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogTitleExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetIdentifierExpressionByIndex(self, index):
        """
        Returns the identifier expression of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :return: Identifier expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetIdentifierExpressionByIndex", index)

        if callResult is None:
            return None

        return callResult

    def GetInputCount(self):
        """
        Returns the number of input controls.

        :return: Number of input controls
        :rtype: integer
        
        """
        callResult = self._Call("GetInputCount", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPropertyExpressionByIndex(self, index, key):
        """
        Returns the property expression of the input control specified by index and property key.

        :param index: Index of the input control
        :type index: integer
        :param key: Property key. Available property keys can be queried using
            GetPropertyKeysByIndex.
        :type key: unicode
        :return: Property expression of the input control
        :rtype: unicode
        
        """
        callResult = self._Call("GetPropertyExpressionByIndex", index, key)

        if callResult is None:
            return None

        return callResult

    def GetPropertyKeysByIndex(self, index):
        """
        Returns all property keys of the input control specified by index. Property keys are used
        to access and manipulate properties of inputs. Use it as parameter for
        GetPropertyExpressionByIndex and SetPropertyExpressionByIndex.

        :param index: Index of the input control
        :type index: integer
        :return: List of property keys
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetPropertyKeysByIndex", index)

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Save in variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetToolTipExpressionByIndex(self, index):
        """
        Returns the tooltip expression of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :return: Tooltip expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetToolTipExpressionByIndex", index)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetTypeByIndex(self, index):
        """
        Returns the type of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :return: Type of the input control. One of [u'TEXTCTRL', u'TEXTCTRLMULTI', u'COMBOBOX',
            u'CHECKBOX', u'RADIOBUTTON', u'FILELIST']
        :rtype: unicode
        
        """
        callResult = self._Call("GetTypeByIndex", index)

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetVariableNameByIndex(self, index):
        """
        Returns variable name of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :return: Variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetVariableNameByIndex", index)

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaximizeEnabled(self):
        """
        Returns whether the window will be maximized or not.

        :return: Whether the window will be maximized
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaximizeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveInput(self, index):
        """
        Removes the input specified by index.

        :param index: Index of the input control
        :type index: integer
        
        """
        callResult = self._Call("RemoveInput", index)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDialogDescriptionExpression(self, descrExpr):
        """
        Sets the dialog description expression.

        :param descrExpr: Dialog description expression
        :type descrExpr: unicode
        
        """
        callResult = self._Call("SetDialogDescriptionExpression", descrExpr)


    def SetDialogTitleExpression(self, titleExpression):
        """
        Sets the dialog title expression.

        :param titleExpression: Dialog title expression
        :type titleExpression: unicode
        
        """
        callResult = self._Call("SetDialogTitleExpression", titleExpression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetIdentifierExpressionByIndex(self, index, identExpr):
        """
        Sets the identifier expression of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :param identExpr: Identifier expression of the input control
        :type identExpr: unicode
        
        """
        callResult = self._Call("SetIdentifierExpressionByIndex", index, identExpr)


    def SetMaximize(self, maximize=True):
        """
        Sets whether the window will be maximized or not.

        :param maximize: Whether the window will be maximized
        :type maximize: boolean
        
        """
        callResult = self._Call("SetMaximize", maximize)


    def SetPropertyExpressionByIndex(self, index, key, valueExpr):
        """
        Sets the property expression of the input control specified by index and property key.

        :param index: Index of the input control
        :type index: integer
        :param key: Property key. Available property keys can be queried using
            GetPropertyKeysByIndex.
        :type key: unicode
        :param valueExpr: Index of the input control
        :type valueExpr: unicode
        
        """
        callResult = self._Call("SetPropertyExpressionByIndex", index, key, valueExpr)


    def SetSaveInVariableName(self, varName):
        """
        Sets the save in variable name.

        :param varName: Variable name
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetToolTipExpressionByIndex(self, index, toolTipExpression):
        """
        Sets the tooltip expression of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :param toolTipExpression: Tooltop expression of the input control
        :type toolTipExpression: unicode
        
        """
        callResult = self._Call("SetToolTipExpressionByIndex", index, toolTipExpression)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetVariableNameByIndex(self, index, varName):
        """
        Sets the variable name of the input control specified by index.

        :param index: Index of the input control
        :type index: integer
        :param varName: Variable name of the input control
        :type varName: unicode
        
        """
        callResult = self._Call("SetVariableNameByIndex", index, varName)



class TsInfoBlock(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsInfoBlock, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AllowBlockAbort(self, allow=True):
        """
        Sets whether the block can be aborted. If True, the dialog will contain a button to abort
        the block.

        :param allow: Whether a block can be aborted
        :type allow: boolean
        
        """
        callResult = self._Call("AllowBlockAbort", allow)


    def AllowTestAbort(self, allow=True):
        """
        Sets whether the whole test can be aborted. If True, the dialog will contain a button to
        abort the test.

        :param allow: Whether the whole test can be aborted
        :type allow: boolean
        
        """
        callResult = self._Call("AllowTestAbort", allow)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsInfoBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsInfoBlock
        return classInstance(self._xmlRpc, objId)


    def DeactivateTimeOutExpression(self):
        """
        Deactivates the time out option.
        
        """
        callResult = self._Call("DeactivateTimeOutExpression", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetBlockAbortTimeOutExpression(self):
        """
        Returns the time out expression that defines that maximum user input time in seconds. If
        the user exceeds this time the test step will be aborted.

        :return: Time out expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetBlockAbortTimeOutExpression", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDialogHeightExpression(self):
        """
        Returns the height expression of the dialog which defines the height.

        :return: Height expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogHeightExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDialogWidthExpression(self):
        """
        Returns the width expression of the dialog.

        :return: Width expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogWidthExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDisplayTextExpression(self):
        """
        Returns the display text expression of the dialog.

        :return: Display text expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDisplayTextExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the info block dialog.

        :return: Name of the dialog
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBlockAbortAllowed(self):
        """
        Returns whether the block can be aborted. If True, the dialog will contain a button to abort
        the block.

        :return: Whether a block can be aborted.
        :rtype: boolean
        
        """
        callResult = self._Call("IsBlockAbortAllowed", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaximizeEnabled(self):
        """
        Returns whether the dialog will be maximized or not.

        :return: Whether the dialog is maximized or not
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaximizeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsTestAbortAllowed(self):
        """
        Returns whether the whole test can be aborted.If True, the dialog will contain a button to
        abort the test.

        :return: Whether the whole test can be aborted
        :rtype: boolean
        
        """
        callResult = self._Call("IsTestAbortAllowed", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBlockAbortTimeOutExpression(self, timeoutExpr):
        """
        Sets the time out expression that defines the maximum user input time in seconds. If the
        user exceeds this time the test step will be aborted.
        This option will not have any effect if block abort is not allowed.

        :param timeoutExpr: Time out expression
        :type timeoutExpr: unicode
        
        """
        callResult = self._Call("SetBlockAbortTimeOutExpression", timeoutExpr)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDialogHeightExpression(self, newHeightExpr):
        """
        Sets the height expression of the dialog.

        :param newHeightExpr: Height expression
        :type newHeightExpr: unicode
        
        """
        callResult = self._Call("SetDialogHeightExpression", newHeightExpr)


    def SetDialogWidthExpression(self, newWidthExpr):
        """
        Sets the width expression of the dialog.

        :param newWidthExpr: Width expression
        :type newWidthExpr: unicode
        
        """
        callResult = self._Call("SetDialogWidthExpression", newWidthExpr)


    def SetDisplayTextExpression(self, textExpr):
        """
        Sets the display text expression of the dialog.

        :param textExpr: Display text expression
        :type textExpr: unicode
        
        """
        callResult = self._Call("SetDisplayTextExpression", textExpr)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetMaximize(self, maximize=True):
        """
        Sets whether the dialog will be maximized or not. If True, the values set with
        SetDialogWidthExpression and SetDialogHeightExpression won't have any effect.

        :param maximize: Whether the dialog is maximized (Default = True)
        :type maximize: boolean
        
        """
        callResult = self._Call("SetMaximize", maximize)


    def SetName(self, name):
        """
        Sets the name of the info block dialog.

        :param name: Name of the dialog
        :type name: unicode
        
        """
        callResult = self._Call("SetName", name)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsParallelRttPackage(TsPackage):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsParallelRttPackage, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsParallelRttPackage`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsParallelRttPackage
        return classInstance(self._xmlRpc, objId)


    def GetAbsolutePackagePath(self):
        """
        Returns the absolute file path of the referenced package from a package call test step.

        :return: Absolute file path of the package to be called.
        :rtype: string
        
        """
        callResult = self._Call("GetAbsolutePackagePath", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM Representation of this test step
        :return: The ALM representation
        :rtype: :class:`.TsPackageAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPackageAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the referenced package in a package call test step.

        If this method returns a relative path, its base is the folder where the calling package
        is located, just like the path is shown in the package call test step's dialog.

        :return: File name with relative path of the package to be called.
        :rtype: string
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the line number of the test step inside the test case.

        :return: Line number of the test step
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetPackageParameter(self, paramName):
        """
        Retrieves the expression assigned to a package parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :return: Expression assigned to the parameter
        :rtype: string
        
        """
        callResult = self._Call("GetPackageParameter", paramName)

        if callResult is None:
            return None

        return callResult

    def GetPackageParameters(self):
        """
        Retrieves all package parameter with its expressions.

        :return: Expression assigned to the parameter
        :rtype: dict<string: string>
        
        """
        callResult = self._Call("GetPackageParameters", )

        if callResult is None:
            return None

        return callResult

    def GetPackageReturn(self, varInternal):
        """
        Retrieves the variable name assigned to a package return value.

        :param varInternal: Name of the return variable in the called package
        :type varInternal: string
        :return: assigned variable of the calling package
        :rtype: string
        
        """
        callResult = self._Call("GetPackageReturn", varInternal)

        if callResult is None:
            return None

        return callResult

    def GetPackageReturns(self):
        """
        Retrieves the return value assignments

        :return: assigned variables of the calling package
        :rtype: dict<string: string>
        
        """
        callResult = self._Call("GetPackageReturns", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReferencedPackage(self):
        """
        Returns the referenced package.
        If the path contains global constants, their current values are used.

        :return: the referenced Package
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("GetReferencedPackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetPackageParameter(self, paramName, paramValue):
        """
        Assigns a value to a package parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :param paramValue: Value to assign to the parameter (can be an expression)
        :type paramValue: string
        
        """
        callResult = self._Call("SetPackageParameter", paramName, paramValue)


    def SetPackageParameters(self, paramDict):
        """
        Assigns values to package parameters.

        :param paramDict: Dictionary of parameter name -> parameter value (expression) mappings
        :type paramDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetPackageParameters", paramDict)


    def SetPackageReturn(self, varInternal, varExternal):
        """
        Assigns a package return value to a variable.

        :param varInternal: Return variable of the called package
        :type varInternal: string
        :param varExternal: Variable of the calling package to assign the return value to
        :type varExternal: string
        
        """
        callResult = self._Call("SetPackageReturn", varInternal, varExternal)


    def SetPackageReturns(self, returnDict):
        """
        Assigns package return values to variables.

        :param returnDict: Dictionary of return variable -> variable of the calling package mappings
        :type returnDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetPackageReturns", returnDict)


    def SetPath(self, path, packageLibraryAlias=None):
        """
        Sets the path of the referenced package in a package call test step.

        :type path: string
        :param path: Relative path of the package to be called.
        :type packageLibraryAlias: string
        :param packageLibraryAlias: Package library alias, if the package is part of a library
        
        """
        callResult = self._Call("SetPath", path, packageLibraryAlias)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsParallelPackage(TsPackage):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsParallelPackage, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsParallelPackage`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsParallelPackage
        return classInstance(self._xmlRpc, objId)


    def GetAbsolutePackagePath(self):
        """
        Returns the absolute file path of the referenced package from a package call test step.

        :return: Absolute file path of the package to be called.
        :rtype: string
        
        """
        callResult = self._Call("GetAbsolutePackagePath", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM Representation of this test step
        :return: The ALM representation
        :rtype: :class:`.TsPackageAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPackageAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetFilename(self):
        """
        Returns the file name of the referenced package in a package call test step.

        If this method returns a relative path, its base is the folder where the calling package
        is located, just like the path is shown in the package call test step's dialog.

        :return: File name with relative path of the package to be called.
        :rtype: string
        
        """
        callResult = self._Call("GetFilename", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the line number of the test step inside the test case.

        :return: Line number of the test step
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetPackageParameter(self, paramName):
        """
        Retrieves the expression assigned to a package parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :return: Expression assigned to the parameter
        :rtype: string
        
        """
        callResult = self._Call("GetPackageParameter", paramName)

        if callResult is None:
            return None

        return callResult

    def GetPackageParameters(self):
        """
        Retrieves all package parameter with its expressions.

        :return: Expression assigned to the parameter
        :rtype: dict<string: string>
        
        """
        callResult = self._Call("GetPackageParameters", )

        if callResult is None:
            return None

        return callResult

    def GetPackageReturn(self, varInternal):
        """
        Retrieves the variable name assigned to a package return value.

        :param varInternal: Name of the return variable in the called package
        :type varInternal: string
        :return: assigned variable of the calling package
        :rtype: string
        
        """
        callResult = self._Call("GetPackageReturn", varInternal)

        if callResult is None:
            return None

        return callResult

    def GetPackageReturns(self):
        """
        Retrieves the return value assignments

        :return: assigned variables of the calling package
        :rtype: dict<string: string>
        
        """
        callResult = self._Call("GetPackageReturns", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReferencedPackage(self):
        """
        Returns the referenced package.
        If the path contains global constants, their current values are used.

        :return: the referenced Package
        :rtype: :class:`.Package`
        
        """
        callResult = self._Call("GetReferencedPackage", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Package
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetPackageParameter(self, paramName, paramValue):
        """
        Assigns a value to a package parameter.

        :param paramName: Name of the parameter
        :type paramName: string
        :param paramValue: Value to assign to the parameter (can be an expression)
        :type paramValue: string
        
        """
        callResult = self._Call("SetPackageParameter", paramName, paramValue)


    def SetPackageParameters(self, paramDict):
        """
        Assigns values to package parameters.

        :param paramDict: Dictionary of parameter name -> parameter value (expression) mappings
        :type paramDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetPackageParameters", paramDict)


    def SetPackageReturn(self, varInternal, varExternal):
        """
        Assigns a package return value to a variable.

        :param varInternal: Return variable of the called package
        :type varInternal: string
        :param varExternal: Variable of the calling package to assign the return value to
        :type varExternal: string
        
        """
        callResult = self._Call("SetPackageReturn", varInternal, varExternal)


    def SetPackageReturns(self, returnDict):
        """
        Assigns package return values to variables.

        :param returnDict: Dictionary of return variable -> variable of the calling package mappings
        :type returnDict: dict<unicode:unicode>
        
        """
        callResult = self._Call("SetPackageReturns", returnDict)


    def SetPath(self, path, packageLibraryAlias=None):
        """
        Sets the path of the referenced package in a package call test step.

        :type path: string
        :param path: Relative path of the package to be called.
        :type packageLibraryAlias: string
        :param packageLibraryAlias: Package library alias, if the package is part of a library
        
        """
        callResult = self._Call("SetPath", path, packageLibraryAlias)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsRestore(MappingTestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsRestore, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsRestore`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsRestore
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsAssertion(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsAssertion, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsAssertion`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsAssertion
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCheckErrorLog(self):
        """
        Returns whether the ERROR-Log is checked for an expression.

        :return: The ERROR-Log is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckErrorLog", )

        if callResult is None:
            return None

        return callResult

    def GetCheckErrorMessage(self):
        """
        Returns whether the error messages are checked for an expression.

        :return: The error messages are checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckErrorMessage", )

        if callResult is None:
            return None

        return callResult

    def GetCheckExpectedVerdict(self):
        """
        Returns whether the verdict is checked for an expected value.

        :return: The verdict is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckExpectedVerdict", )

        if callResult is None:
            return None

        return callResult

    def GetCheckMaxExecutionTime(self):
        """
        Returns whether the execution time is checked against a max value.

        :return: The max execution time is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckMaxExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetCheckMinExecutionTime(self):
        """
        Returns whether the execution time is checked against a min value.

        :return: The min execution time is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckMinExecutionTime", )

        if callResult is None:
            return None

        return callResult

    def GetCheckOutLog(self):
        """
        Returns whether the OUT-Log is checked for an expression.

        :return: The OUT-Log is checked
        :rtype: boolean
        
        """
        callResult = self._Call("GetCheckOutLog", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetErrorLogExpr(self):
        """
        Returns the expression the ERROR-Log is checked against.

        :return: The log expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetErrorLogExpr", )

        if callResult is None:
            return None

        return callResult

    def GetErrorMessageExpr(self):
        """
        Returns the expression for the expected error message.

        :return: The error message expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetErrorMessageExpr", )

        if callResult is None:
            return None

        return callResult

    def GetExpectedVerdict(self):
        """
        Returns the expected verdict. Possible values are:
            - 'NONE'
            - 'SUCCESS'
            - 'INCONCLUSIVE'
            - 'FAILED'
            - 'ERROR'

        A list of these values is also possible.

        :return: The expected verdict
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectedVerdict", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMaxExecutionTimeExpr(self):
        """
        Returns the max value the execution time is checked against.

        :return: The max execution time expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxExecutionTimeExpr", )

        if callResult is None:
            return None

        return callResult

    def GetMaxExecutionTimeUnit(self):
        """
        Returns the unit for the max execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :return: The max execution time unit
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxExecutionTimeUnit", )

        if callResult is None:
            return None

        return callResult

    def GetMinExecutionTimeExpr(self):
        """
        Returns the min value the execution time is checked against.

        :return: The min execution time expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMinExecutionTimeExpr", )

        if callResult is None:
            return None

        return callResult

    def GetMinExecutionTimeUnit(self):
        """
        Returns the unit for the min execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :return: The min execution time unit
        :rtype: unicode
        
        """
        callResult = self._Call("GetMinExecutionTimeUnit", )

        if callResult is None:
            return None

        return callResult

    def GetOutLogExpr(self):
        """
        Returns the expression the OUT-Log is checked against.

        :return: The log expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetOutLogExpr", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetCheckErrorLog(self, checkErrorLog):
        """
        Sets whether the ERROR-Log is checked for an expression.

        :param checkErrorLog: The ERROR-Log is checked
        :type checkErrorLog: boolean
        
        """
        callResult = self._Call("SetCheckErrorLog", checkErrorLog)


    def SetCheckErrorMessage(self, checkErrorMessage):
        """
        Sets whether the error messages are checked for an expression.

        :param checkErrorMessage: The error messages are checked
        :type checkErrorMessage: boolean
        
        """
        callResult = self._Call("SetCheckErrorMessage", checkErrorMessage)


    def SetCheckExpectedVerdict(self, checkVerdict):
        """
        Sets whether the verdict is checked for an expected value.

        :param checkVerdict: The verdict is checked
        :type checkVerdict: boolean
        
        """
        callResult = self._Call("SetCheckExpectedVerdict", checkVerdict)


    def SetCheckMaxExecutionTime(self, checkMaxExecutionTime):
        """
        Sets whether the execution time is checked against a max value.

        :param checkMaxExecutionTime: The max execution time is checked
        :type checkMaxExecutionTime: boolean
        
        """
        callResult = self._Call("SetCheckMaxExecutionTime", checkMaxExecutionTime)


    def SetCheckMinExecutionTime(self, checkMinExecutionTime):
        """
        Sets whether the execution time is checked against a min value.

        :param checkMinExecutionTime: The min execution time is checked
        :type checkMinExecutionTime: boolean
        
        """
        callResult = self._Call("SetCheckMinExecutionTime", checkMinExecutionTime)


    def SetCheckOutLog(self, checkOutLog):
        """
        Sets whether the OUT-Log is checked for an expression.

        :param checkOutLog: The OUT-Log is checked
        :type checkOutLog: boolean
        
        """
        callResult = self._Call("SetCheckOutLog", checkOutLog)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetErrorLogExpr(self, errorLogExpr):
        """
        Sets the expression the ERROR-Log is checked against.

        :param errorLogExpr: The log expression
        :type errorLogExpr: unicode
        
        """
        callResult = self._Call("SetErrorLogExpr", errorLogExpr)


    def SetErrorMessageExpr(self, errorMessageExpr):
        """
        Sets an expression for an expected error message.

        :param errorMessageExpr: The error message expression
        :type errorMessageExpr: unicode
        
        """
        callResult = self._Call("SetErrorMessageExpr", errorMessageExpr)


    def SetExpectedVerdict(self, verdict):
        """
        Sets the expected verdict. Possible values are:
            - 'NONE'
            - 'SUCCESS'
            - 'INCONCLUSIVE'
            - 'FAILED'
            - 'ERROR'

        A list of these values is also valid.

        :param verdict: The expected verdict
        :type verdict: unicode
        
        """
        callResult = self._Call("SetExpectedVerdict", verdict)


    def SetMaxExecutionTimeExpr(self, maxExecutionTimeExpr):
        """
        Sets the max value the execution time is checked against.

        :param maxExecutionTimeExpr: The max execution time expression
        :type maxExecutionTimeExpr: unicode
        
        """
        callResult = self._Call("SetMaxExecutionTimeExpr", maxExecutionTimeExpr)


    def SetMaxExecutionTimeUnit(self, maxExecutionTimeUnit):
        """
        Sets the unit for the max execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :param maxExecutionTimeUnit: The max execution time unit
        :type maxExecutionTimeUnit: unicode
        :raise ApiError: If maxExecutionTimeUnit is not a valid unit
        
        """
        callResult = self._Call("SetMaxExecutionTimeUnit", maxExecutionTimeUnit)


    def SetMinExecutionTimeExpr(self, minExecutionTimeExpr):
        """
        Sets the min value the execution time is checked against.

        :param minExecutionTimeExpr: The min execution time expression
        :type minExecutionTimeExpr: unicode
        
        """
        callResult = self._Call("SetMinExecutionTimeExpr", minExecutionTimeExpr)


    def SetMinExecutionTimeUnit(self, minExecutionTimeUnit):
        """
        Sets the unit for the min execution time. Possible values are:
            - 'min'
            - 's'
            - 'ms'
            - 'h'
            - 'd'

        :param minExecutionTimeUnit: The min execution time unit
        :type minExecutionTimeUnit: unicode
        :raise ApiError: If minExecutionTimeUnit is not a valid unit
        
        """
        callResult = self._Call("SetMinExecutionTimeUnit", minExecutionTimeUnit)


    def SetOutLogExpr(self, outLogExpr):
        """
        Sets the expression the OUT-Log is checked against.

        :param outLogExpr: The log expression
        :type outLogExpr: unicode
        
        """
        callResult = self._Call("SetOutLogExpr", outLogExpr)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsStartSimulation(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsStartSimulation, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsStartSimulation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsStartSimulation
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetModelKey(self):
        """
        Returns the model system identifier from which the element is loaded.

        :return: The model system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetModelKey", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetModelKey(self, modelKey):
        """
        Sets the model system identifier from which the element is loaded.

        :param modelKey: The model system identifier
        :type modelKey: unicode
        
        """
        callResult = self._Call("SetModelKey", modelKey)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsSelectList(TsUserInterface):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsSelectList, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendChoiceItem(self, itemExpr):
        """
        Appends a choice item to the list of items.

        :param itemExpr: Choice item expression
        :type itemExpr: unicode
        
        """
        callResult = self._Call("AppendChoiceItem", itemExpr)


    def AppendSeparatorItem(self):
        """
        Appends a non selectable separator item to the list of items.
        
        """
        callResult = self._Call("AppendSeparatorItem", )


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsSelectList`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsSelectList
        return classInstance(self._xmlRpc, objId)


    def DeactivateItemVariable(self):
        """
        Deactivates the read items from variable option.
        
        """
        callResult = self._Call("DeactivateItemVariable", )


    def DeactivateSaveInVariable(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveInVariable", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDialogDescriptionExpression(self):
        """
        Returns the dialog description expression.

        :return: Dialog description expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogDescriptionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDialogTitleExpression(self):
        """
        Returns the dialog title expression.

        :return: Dialog title expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogTitleExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetItemVariableNameExpression(self):
        """
        Returns the item variable name expression. The variable specified by this name expression
        is supposed to be a vector that contains all choices as expressions.

        :return: Item variable name expression. None if the item variable option is disabled.
        :rtype: unicode
        
        """
        callResult = self._Call("GetItemVariableNameExpression", )

        if callResult is None:
            return None

        return callResult

    def GetItems(self, includeSeparators=False):
        """
        Returns all items as list of strings.

        :param includeSeparators: Whether to include separators or not (optional, defaults to False)
        :type includeSeparators: boolean
        :return: List of item expressions
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetItems", includeSeparators)

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMaxSelectionExpression(self):
        """
        Returns the expression that defines the maxmimum selection count.

        :return: Maxmimum selection expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMaxSelectionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetMinSelectionExpression(self):
        """
        Returns the expression that defines the minimum selection count.

        :return: Minimum selection expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetMinSelectionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPreselectionExpression(self):
        """
        Returns the preselection expression.

        :return: Preselection expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetPreselectionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Save in variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaximizeEnabled(self):
        """
        Returns whether the window will be maximized or not.

        :return: Whether the window will be maximized
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaximizeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveItem(self, idx):
        """
        Removes the item at the given index. Use GetItems(includeSeperators=True) to determine
        which item has which index.

        :param idx: Index of the item to be removed
        :type idx: integer
        
        """
        callResult = self._Call("RemoveItem", idx)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDialogDescriptionExpression(self, descrExpr):
        """
        Sets the dialog description expression.

        :param descrExpr: Dialog description expression
        :type descrExpr: unicode
        
        """
        callResult = self._Call("SetDialogDescriptionExpression", descrExpr)


    def SetDialogTitleExpression(self, titleExpression):
        """
        Sets the dialog title expression.

        :param titleExpression: Dialog title expression
        :type titleExpression: unicode
        
        """
        callResult = self._Call("SetDialogTitleExpression", titleExpression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetItemVariableNameExpression(self, nameExpr):
        """
        Sets the item variable name expression. The variable specified by this name expression
        is supposed to be a vector that contains all choices as expressions.

        :param nameExpr: Item variable name expression.
        :type nameExpr: unicode
        
        """
        callResult = self._Call("SetItemVariableNameExpression", nameExpr)


    def SetMaxSelectionExpression(self, maxSelect):
        """
        Sets the expression that defines the maxmimum selection count.

        :param maxSelect: Maxmimum selection expression
        :type maxSelect: unicode
        
        """
        callResult = self._Call("SetMaxSelectionExpression", maxSelect)


    def SetMaximize(self, maximize=True):
        """
        Sets whether the window will be maximized or not.

        :param maximize: Whether the window will be maximized
        :type maximize: boolean
        
        """
        callResult = self._Call("SetMaximize", maximize)


    def SetMinSelectionExpression(self, minSelect):
        """
        Sets the expression that defines the minimum selection count.

        :param minSelect: Minimum selection expression
        :type minSelect: unicode
        
        """
        callResult = self._Call("SetMinSelectionExpression", minSelect)


    def SetPreselectionExpression(self, preSelect):
        """
        Sets the preselection expression. This expression specifies which choices are pre selected.
        This expression must contain a list of pre selected items as unicode.
        E.g. u"[u'selection1', u'selection2']"

        :param preSelect: Preselection expression
        :type preSelect: unicode
        
        """
        callResult = self._Call("SetPreselectionExpression", preSelect)


    def SetSaveInVariableName(self, varName):
        """
        Sets the save in variable name.

        :param varName: Variable name
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class Calculation(TraceStepContainer):
    """

    """


    @property
    def EXPECTATION_MODE_ALWAYS(self):
        """
        Returns the constant used to specify the expectation mode 'Fulfilled everywhere'.

        :return: The constant
        :rtype: unicode
        
        """
        return self.__EXPECTATION_MODE_ALWAYS

    @property
    def EXPECTATION_MODE_DURATION(self):
        """
        Returns the constant used to specify the expectation mode 'Fulfilled for at least'.

        :return: The constant
        :rtype: unicode
        
        """
        return self.__EXPECTATION_MODE_DURATION

    @property
    def EXPECTATION_MODE_ONCE(self):
        """
        Returns the constant used to specify the expectation mode 'Fulfilled at least once'.

        :return: The constant
        :rtype: unicode
        
        """
        return self.__EXPECTATION_MODE_ONCE

    def __init__(self, xmlRpc=None, objId=0):
        super(Calculation, self).__init__(xmlRpc, objId)

        self.__EXPECTATION_MODE_ALWAYS = self._xmlRpc.ObjectApi.GetAttr(self._objId, "EXPECTATION_MODE_ALWAYS")
        self.__EXPECTATION_MODE_DURATION = self._xmlRpc.ObjectApi.GetAttr(self._objId, "EXPECTATION_MODE_DURATION")
        self.__EXPECTATION_MODE_ONCE = self._xmlRpc.ObjectApi.GetAttr(self._objId, "EXPECTATION_MODE_ONCE")


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTraceStep(self, traceStep):
        """
        Adds a trace step at the end of its children.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("AppendTraceStep", traceStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.

        :return: A copy of this object
        :rtype: :class:`.Calculation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = Calculation
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the expression of the calculation will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateFailedComment(self):
        """
        Deactivates the expectation for the failed comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateFailedComment", )


    def DeactivateSaveIn(self):
        """
        Deactivates the save in property, so the expression value will not be stored in a
        generic signal.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def DeactivateSuccessComment(self):
        """
        Deactivates the expectation for the success comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateSuccessComment", )


    def GetDescription(self):
        """
        Returns the description of the trace analysis element.

        :return: The description
        :rtype: unicode
        
        """
        callResult = self._Call("GetDescription", )

        if callResult is None:
            return None

        return callResult

    def GetExpectation(self):
        """
        Returns the expectation expression for the evaluation of the calculation, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetExpectationMode(self):
        """
        Returns the expectation mode. Possible values are 'always', 'once', 'duration' or None, if no
        expectation was defined.

        :return: The expectation mode
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationMode", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationModeParam(self):
        """
        Returns the expectation mode parameter or None, if no expectation was defined.
        For mode 'duration' this is the minimal duration.

        :return: The expectation mode parameter
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationModeParam", )

        if callResult is None:
            return None

        return callResult

    def GetExpression(self):
        """
        Returns the expression of the calculation.

        :return: The expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpression", )

        if callResult is None:
            return None

        return callResult

    def GetFailedComment(self):
        """
        Returns the failed comment of the step.

        :return: The failed comment
        :rtype: string
        
        """
        callResult = self._Call("GetFailedComment", )

        if callResult is None:
            return None

        return callResult

    def GetName(self):
        """
        Returns the name of the trace analysis element.

        :return: The name
        :rtype: unicode
        
        """
        callResult = self._Call("GetName", )

        if callResult is None:
            return None

        return callResult

    def GetReportConfig(self):
        """
        Returns the report config for this trace step.
        
        :return: The report config object
        :rtype: :class:`.ReportConfig`
        
        """
        callResult = self._Call("GetReportConfig", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = ReportConfig
        return classInstance(self._xmlRpc, objId)


    def GetResultNoEval(self):
        """
        Returns the verdict of a calculation that is never evaluated.

        :return: The verdict of the calculation if never evaluated
        :rtype: unicode
        
        """
        callResult = self._Call("GetResultNoEval", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInSignalName(self):
        """
        Returns the currently selected signal to save the expression value.

        :return: The signal's name or None if expression value is not saved to a signal by the
            calculation.
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInSignalName", )

        if callResult is None:
            return None

        return callResult

    def GetSuccessComment(self):
        """
        Returns the success comment of the step.

        :return: The success comment
        :rtype: string
        
        """
        callResult = self._Call("GetSuccessComment", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTraceSteps(self, skipDisabledSteps=False, recursive=False):
        """
        Returns either direct or all children of the trace step.

        :param skipDisabledSteps: Defines whether disabled trace steps should be excluded,
            defaults to False.
        :type skipDisabledSteps: boolean
        :param recursive: Defines whether children of children are included,
            defaults to False.
        :type recursive: boolean
        :return: The trace steps as flat list.
        :rtype: list<:class:`.TraceStep`>
        
        """
        callResult = self._Call("GetTraceSteps", skipDisabledSteps, recursive)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetType(self):
        """
        Returns the type (class name) of the trace step, e.g.
         * "Episode"
         * "Block"
         * "TriggerBlock"
         * "Calculation"
         * "TemplateBasedTraceStep"
         * "TraceAnalysisReference"

        :return: Type (class name) of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUuid(self):
        """
        Returns the UUID of the trace step.

        :return: UUID of the trace step
        :rtype: unicode
        
        """
        callResult = self._Call("GetUuid", )

        if callResult is None:
            return None

        return callResult

    def GetVectorExpectationMode(self):
        """
        Returns the vector expectation mode. Possible values are:
           - 'no vector'
           - 'all components'
           - 'any component'

        :return: The vector expectation mode
        :rtype: unicode
        
        """
        callResult = self._Call("GetVectorExpectationMode", )

        if callResult is None:
            return None

        return callResult

    def InsertTraceStep(self, traceStep, position):
        """
        Adds a trace step at a certain line of the trace analysis.

        :param traceStep: Trace step to be added
        :type traceStep: :class:`.TraceStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTraceStep", traceStep, position)


    def IsContainer(self):
        """
        Checks whether this trace step can contain trace steps.

        :return: True if it can contain trace steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Checks whether the trace step is enabled.

        :return: True if trace step is enabled, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the trace step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the trace step is visible. This depends on the trace step itself or
        a parent trace step being disabled.

        :return: True if trace step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def RemoveTraceStep(self, traceStep):
        """
        Removes the given trace step from the trace analysis.

        :param traceStep: Trace step to be removed
        :type traceStep: :class:`.TraceStep`
        
        """
        callResult = self._Call("RemoveTraceStep", traceStep)


    def SetDescription(self, value):
        """
        Sets the description of the trace analysis element.

        :param value: The new description
        :type value: unicode
        
        """
        callResult = self._Call("SetDescription", value)


    def SetEnabled(self, enable):
        """
        Enables or disables the trace step (this also affects child trace steps).

        :param enable: If True, enables the trace step, if False, disables the trace step
        :type enable: boolean
        
        """
        callResult = self._Call("SetEnabled", enable)


    def SetExpectation(self, expectation, mode, modeParam=None):
        """
        Sets the expectation for the evaluation of the calculation. The expectation will be
        activated if it was not enabled previously. Possible values for mode can be obtained
        by either of the constants:

         * :py:attr:`Calculation.EXPECTATION_MODE_ALWAYS` 
         * :py:attr:`Calculation.EXPECTATION_MODE_ONCE`
         * :py:attr:`Calculation.EXPECTATION_MODE_DURATION`

        Use modeParam to specify the minimal duration (duration mode only).

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        :param mode: The expression for expectation mode
        :type mode: unicode
        :param modeParam: The expression for modeParam
        :type modeParam: unicode
        :raise ValueError: If the expectation is not of type NumericExpectation or StringExpectation
        
        """
        callResult = self._Call("SetExpectation", expectation, mode, modeParam)


    def SetExpression(self, expression):
        """
        Sets the expression of the calculation.

        :param expression: The expression
        :type expression: unicode
        
        """
        callResult = self._Call("SetExpression", expression)


    def SetFailedComment(self, failedComment):
        """
        Sets the expression for the failed comment of the step. The expression will be
        activated if it was not enabled previously.

        :param failedComment: The expression for the failed comment
        :type failedComment: string
        
        """
        callResult = self._Call("SetFailedComment", failedComment)


    def SetName(self, value):
        """
        Sets the name of the trace analysis element.

        :param value: The new name
        :type value: unicode
        
        """
        callResult = self._Call("SetName", value)


    def SetResultNoEval(self, resultNoEval):
        """
        Sets the verdict of a calculation that is never evaluated.
        Possible values: 'NONE', 'SUCCESS', 'INCONCLUSIVE', 'FAILED' or 'ERROR'.

        :param resultNoEval: The verdict of the calculation if never evaluated
        :type resultNoEval: unicode
        
        """
        callResult = self._Call("SetResultNoEval", resultNoEval)


    def SetSaveInSignalName(self, signalName):
        """
        Sets the name of the generic signal used for storing the expression value.

        :param signalName: The signal's name. Must not be None or an empty string.
        :type signalName: unicode
        :raise ApiError: If signalName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInSignalName", signalName)


    def SetSuccessComment(self, successComment):
        """
        Sets the expression for the success comment of the step. The expression will be
        activated if it was not enabled previously.

        :param successComment: The expression for the success comment
        :type successComment: string
        
        """
        callResult = self._Call("SetSuccessComment", successComment)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetVectorExpectationMode(self, vectorMode):
        """
        Sets the vector expectation mode. Possible values are:
           - 'no vector'
           - 'all components'
           - 'any component'
        
        :param vectorMode: The vector expectation mode
        :type vectorMode: unicode
        
        """
        callResult = self._Call("SetVectorExpectationMode", vectorMode)



class TsBlock(TsBlockBase):
    """

    Api- of the block structure test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBlock, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBlock
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the block.

        :return: Abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the block.

        :return: Abort comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetAbortCondition(self):
        """
        Returns the abort condition of the block.

        :return: one of ['ERROR', 'ERROR_OR_FAILED', 'ERROR_OR_FAILED_OR_INCONCLUSIVE']
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCondition", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column in your current test case language.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM Representation of the test step block
        :return: The ALM Representation of the test step block
        :rtype: :class:`.TsBlockAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBlockAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedActionColumnText(self, language):
        """
        Returns the text value of the "action" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedActionColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedParameterColumnText(self, language):
        """
        Returns the text value of the "parameter" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedParameterColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedValueColumnText(self, language):
        """
        Returns the text value of the "value" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedValueColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsConditionalAbortEnabled(self):
        """
        Returns if the conditional abort of the block test step is enabled.

        :return: Conditional abort enabled
        :rtype: boolean
        
        """
        callResult = self._Call("IsConditionalAbortEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsOverrideAbortInfoEnabled(self):
        """
        Returns if the block override abort information of underlying test steps.

        :return: Conditional abort enabled
        :rtype: boolean
        
        """
        callResult = self._Call("IsOverrideAbortInfoEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsUserInteractionEnabled(self):
        """
        Returns if the block is set to be a user interaction.

        :return: User interaction status
        :rtype: boolean
        
        """
        callResult = self._Call("IsUserInteractionEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAbortCode(self, code):
        """
        Sets the abort code of the block.

        :param code: Abort code
        :type code: unicode
        
        """
        callResult = self._Call("SetAbortCode", code)


    def SetAbortComment(self, comment):
        """
        Sets the abort comment of the block.

        :param comment: Abort comment
        :type comment: unicode
        
        """
        callResult = self._Call("SetAbortComment", comment)


    def SetAbortCondition(self, condition):
        """
        Sets the abort condition of the block.
        Must be one of ['ERROR', 'ERROR_OR_FAILED', 'ERROR_OR_FAILED_OR_INCONCLUSIVE'],
        otherwise the command raises an error.

        :param condition: Abort condition
        :type condition: unicode
        
        """
        callResult = self._Call("SetAbortCondition", condition)


    def SetActionColumnText(self, text):
        """
        Sets the text value to be displayed in the action column of the test case editor in
        your current test case language.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetActionColumnText", text)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetConditionalAbort(self, abort=True):
        """
        Sets the conditional abort status of the block.

        :param abort: Conditional abort status
        :type abort: boolean
        
        """
        callResult = self._Call("SetConditionalAbort", abort)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetOverrideAbortInfo(self, override):
        """
        Sets the override abort information status.

        :param override: Override abort information status
        :type override: boolean
        
        """
        callResult = self._Call("SetOverrideAbortInfo", override)


    def SetParameterColumnText(self, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetParameterColumnText", text)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedActionColumnText(self, text, language):
        """
        Sets the text value for the action column of the test case editor in the given language.

        :param text: Text to be displayed
        :type text: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedActionColumnText", text, language)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetTranslatedParameterColumnText(self, language, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedParameterColumnText", language, text)


    def SetTranslatedValueColumnText(self, language, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedValueColumnText", language, text)


    def SetUserInteraction(self, interactive=True):
        """
        Sets if the block is user interactive.

        :param interactive: User interaction status
        :type interactive: boolean
        
        """
        callResult = self._Call("SetUserInteraction", interactive)


    def SetValueColumnText(self, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in
        your current test case language.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetValueColumnText", text)



class TsBusMonitoringChecksum(TsBusMonitoring):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBusMonitoringChecksum, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBusMonitoringChecksum`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringChecksum
        return classInstance(self._xmlRpc, objId)


    def GetAction(self):
        """
        Returns the action of the test step.

        :return: The action of the test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAction", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationDescriptor(self):
        """
        Returns list of all expectation types.

        :return: List of expectation types
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetExpectationDescriptor", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self, idx):
        """
        Returns the expectation expression specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :return: Expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", idx)

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self, idx):
        """
        Returns the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", idx)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAction(self, action):
        """
        Sets which action the test step will perform.

        :param action: The action of the test step. Must be one of [u'START', u'CHECK']
        :type action: unicode
        
        """
        callResult = self._Call("SetAction", action)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectationExpression(self, idx, exp):
        """
        Sets an expectation for the type specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :param exp: Expectation expression
        :type exp: unicode
        
        """
        callResult = self._Call("SetExpectationExpression", idx, exp)


    def SetSaveInVariableName(self, idx, varName):
        """
        Sets the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :param varName: Name of the variable
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", idx, varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsBusMonitoringDlc(TsBusMonitoring):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBusMonitoringDlc, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBusMonitoringDlc`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringDlc
        return classInstance(self._xmlRpc, objId)


    def GetAction(self):
        """
        Returns the action of the test step.

        :return: The action of the test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAction", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationDescriptor(self):
        """
        Returns list of all expectation types.

        :return: List of expectation types
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetExpectationDescriptor", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self, idx):
        """
        Returns the expectation expression specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :return: Expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", idx)

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self, idx):
        """
        Returns the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", idx)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAction(self, action):
        """
        Sets which action the test step will perform.

        :param action: The action of the test step. Must be one of [u'START', u'CHECK']
        :type action: unicode
        
        """
        callResult = self._Call("SetAction", action)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectationExpression(self, idx, exp):
        """
        Sets an expectation for the type specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :param exp: Expectation expression
        :type exp: unicode
        
        """
        callResult = self._Call("SetExpectationExpression", idx, exp)


    def SetSaveInVariableName(self, idx, varName):
        """
        Sets the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :param varName: Name of the variable
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", idx, varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsBusMonitoringAliveCounter(TsBusMonitoring):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBusMonitoringAliveCounter, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBusMonitoringAliveCounter`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringAliveCounter
        return classInstance(self._xmlRpc, objId)


    def GetAction(self):
        """
        Returns the action of the test step.

        :return: The action of the test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAction", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationDescriptor(self):
        """
        Returns list of all expectation types.

        :return: List of expectation types
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetExpectationDescriptor", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self, idx):
        """
        Returns the expectation expression specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :return: Expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", idx)

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self, idx):
        """
        Returns the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", idx)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAction(self, action):
        """
        Sets which action the test step will perform.

        :param action: The action of the test step. Must be one of [u'START', u'CHECK']
        :type action: unicode
        
        """
        callResult = self._Call("SetAction", action)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectationExpression(self, idx, exp):
        """
        Sets an expectation for the type specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :param exp: Expectation expression
        :type exp: unicode
        
        """
        callResult = self._Call("SetExpectationExpression", idx, exp)


    def SetSaveInVariableName(self, idx, varName):
        """
        Sets the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :param varName: Name of the variable
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", idx, varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsBusMonitoringFrameTiming(TsBusMonitoring):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsBusMonitoringFrameTiming, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsBusMonitoringFrameTiming`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsBusMonitoringFrameTiming
        return classInstance(self._xmlRpc, objId)


    def GetAction(self):
        """
        Returns the action of the test step.

        :return: The action of the test step.
        :rtype: unicode
        
        """
        callResult = self._Call("GetAction", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationDescriptor(self):
        """
        Returns list of all expectation types.

        :return: List of expectation types
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetExpectationDescriptor", )

        if callResult is None:
            return None

        return callResult

    def GetExpectationExpression(self, idx):
        """
        Returns the expectation expression specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :return: Expectation expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetExpectationExpression", idx)

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self, idx):
        """
        Returns the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :return: Name of the variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", idx)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAction(self, action):
        """
        Sets which action the test step will perform.

        :param action: The action of the test step. Must be one of [u'START', u'CHECK']
        :type action: unicode
        
        """
        callResult = self._Call("SetAction", action)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectationExpression(self, idx, exp):
        """
        Sets an expectation for the type specified by idx.

        :param idx: Index of the type
        :type idx: integer
        :param exp: Expectation expression
        :type exp: unicode
        
        """
        callResult = self._Call("SetExpectationExpression", idx, exp)


    def SetSaveInVariableName(self, idx, varName):
        """
        Sets the name of the variable in which the value specified by idx will be saved.

        :param idx: Index of the type
        :type idx: integer
        :param varName: Name of the variable
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", idx, varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsAXSCall(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsAXSCall, self).__init__(xmlRpc, objId)



    def AddArgument(self, identifier):
        """
        **for internal use only**

        Adds the argument with the given identifier to the keyword test step. Creates a new
        argument if no such argument exists.

        :param identifier: Identifier of argument. Has to match the name of an existing argument
                           of the keyword.
        :type identifier: unicode
        :return: Argument of this test step whose identifier is 'identifier'.
        :rtype: :class:`.Argument`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("AddArgument", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def AddReturn(self, identifier):
        """
        **for internal use only**

        Adds the return with the given name to the keyword test step. Creates a new return if
        no such return already exists.

        Keyword test steps are limited to one return value!

        :param identifier: Identifier of the return. Has to match the identifier of an existing
                           return of the keyword.
        :type identifier: unicode
        :return: Return of this test step whose name is 'identifier'
        :rtype: :class:`.Return`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("AddReturn", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsAXSCall`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def DeactivateFailedComment(self):
        """
        Deactivates the expectation for the failed comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateFailedComment", )


    def DeactivateSuccessComment(self):
        """
        Deactivates the expectation for the success comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateSuccessComment", )


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetArgument(self, identifier):
        """
        Gets the argument with the given identifier of the keyword test step.

        :param identifier: Identifier of argument. Has to match the identifier of an existing
                           argument of the keyword.
        :type identifier: unicode
        :return: Argument of this test step whose identifier matches 'identifier' or None if there
                is no argument with this identifier.
        :rtype: :class:`.Argument`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("GetArgument", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetArguments(self):
        """
        **for internal use only**

        Returns all argument of the keyword test step.

        :return: List of arguments of this test step.
        :rtype: list <:class:`.Argument`>
        
        """
        callResult = self._Call("GetArguments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetFailedComment(self):
        """
        Returns the failed comment of the step.

        :return: The failed comment
        :rtype: string
        
        """
        callResult = self._Call("GetFailedComment", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetReturn(self, identifier):
        """
        Gets the return with the given identifier of the keyword test step.

        :param identifier: Identifier of the return. Has to match the identifier of an existing
                           return of the keyword.
        :type identifier: unicode
        :return: Return of this test step whose identifier matches 'identifier' or None if there
                 is no return with this identifier.
        :rtype: :class:`.Return`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("GetReturn", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReturns(self):
        """
        **for internal use only**

        Returns all return values of the keyword test step.

        :return: List of returns of this test step.
        :rtype: list <:class:`.Return`>
        
        """
        callResult = self._Call("GetReturns", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetSuccessComment(self):
        """
        Returns the success comment of the step.

        :return: The success comment
        :rtype: string
        
        """
        callResult = self._Call("GetSuccessComment", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetFailedComment(self, failedComment):
        """
        Sets the expression for the failed comment of the step. The expression will be
        activated if it was not enabled previously.

        :param failedComment: The expression for the failed comment
        :type failedComment: string
        
        """
        callResult = self._Call("SetFailedComment", failedComment)


    def SetSuccessComment(self, successComment):
        """
        Sets the expression for the success comment of the step. The expression will be
        activated if it was not enabled previously.

        :param successComment: The expression for the success comment
        :type successComment: string
        
        """
        callResult = self._Call("SetSuccessComment", successComment)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsJob(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsJob, self).__init__(xmlRpc, objId)



    def AddParameter(self, name, value=None):
        """
        Adds a parameter to a job test step.

        :type name: unicode
        :param name: Name of the parameter which should be added
        :type value: unicode
        :param value: Value of the parameter which should be added
        
        """
        callResult = self._Call("AddParameter", name, value)


    def AddReturn(self, name):
        """
        Adds a return value to a job test step.

        :type name: unicode
        :param name: Name of the added return value.
        
        """
        callResult = self._Call("AddReturn", name)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsJob`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsJob
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateSaveIn(self):
        """
        Deactivates the test step's save in property, so the value will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectation(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetExpectationExpression(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: string
        
        """
        callResult = self._Call("GetExpectationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParameters(self):
        """
        Returns parameters of a job as test step.

        :return: Parameters of a job
        :rtype: dict<unicode:unicode>
        
        """
        callResult = self._Call("GetParameters", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the currently selected variable to save the data.

        :return: The variable's name
        :rtype: string
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectation(self, expectation):
        """
        Sets the expectation in the evaluation of the test step. The expectation will be
        activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        
        """
        callResult = self._Call("SetExpectation", expectation)


    def SetExpectationExpression(self, expectation):
        """
        Shortcut to set an expectation for an unspecific type in the evaluation of the test step.
        The expectation will be activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: string
        
        """
        callResult = self._Call("SetExpectationExpression", expectation)


    def SetParameter(self, name, value=None):
        """
        Sets a value of an existing parameter.

        :type name: unicode
        :param name: Name of the parameter which should be set.
        :type value: unicode
        :param value: Value of the parameter which should be changed.
        
        """
        callResult = self._Call("SetParameter", name, value)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing data by the test step. The variable
        will be created automatically if it does not already exist in the package where the test
        step is placed in.
        This method must not be called, if the test step has not been added to a package previously.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: string
        :raise ApiError: - If SaveIn was called before the test step was added to a package.
                         - If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsCaseDefNode(TsCaseNodeBase):
    """

    Api- of a case-def-node.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsCaseDefNode, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsCaseDefNode`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCaseDefNode
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCaseValue(self):
        """
        Returns the value of the case node.

        :return: Case value
        :rtype: unicode
        
        """
        callResult = self._Call("GetCaseValue", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDefaultNode(self):
        """
        Returns True if this is the default node.

        :return: If default node
        :rtype: bool
        
        """
        callResult = self._Call("IsDefaultNode", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetCaseValue(self, caseValue='0'):
        """
        Sets the value of the case node.

        :param caseValue: Case value
        :type caseValue: unicode
        
        """
        callResult = self._Call("SetCaseValue", caseValue)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsLoadEnvironment(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsLoadEnvironment, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsLoadEnvironment`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsLoadEnvironment
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetContextType(self):
        """
        Returns the context type of the element to be loaded.

        Possible return values:
         * SCENARIO

        :return: The context type
        :rtype: unicode
        
        """
        callResult = self._Call("GetContextType", )

        if callResult is None:
            return None

        return callResult

    def GetElementPath(self):
        """
        Returns the expression of the model path for the element to be loaded.

        :return: The model path of the element as an expression.
                 (note the quotation marks for plain string values)
        :rtype: unicode
        
        """
        callResult = self._Call("GetElementPath", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetModelKey(self):
        """
        Returns the model system identifier from which the element is loaded.

        :return: The model system identifier
        :rtype: unicode
        
        """
        callResult = self._Call("GetModelKey", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetContextType(self, contextType):
        """
        Sets the context type of the element to be loaded.
        
        Valid values:
         * SCENARIO

        :param contextType: The context type
        :type contextType: unicode
        
        """
        callResult = self._Call("SetContextType", contextType)


    def SetElementPath(self, expression):
        """
        Sets the expression of the model path for the element to be loaded.

        :param expression: The model path of the element as an expression.
                           (remember the quotation marks for plain string values)
        :type expression: unicode
        
        
        """
        callResult = self._Call("SetElementPath", expression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetModelKey(self, modelKey):
        """
        Sets the model system identifier from which the element is loaded.

        :param modelKey: The model system identifier
        :type modelKey: unicode
        
        """
        callResult = self._Call("SetModelKey", modelKey)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsPreconditionBlock(TsBlockBase):
    """

    Api- of the precondition block structure test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsPreconditionBlock, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsPreconditionBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPreconditionBlock
        return classInstance(self._xmlRpc, objId)


    def GetAbortCode(self):
        """
        Returns the abort code of the block.

        :return: Abort code
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortCode", )

        if callResult is None:
            return None

        return callResult

    def GetAbortComment(self):
        """
        Returns the abort comment of the block.

        :return: Abort comment
        :rtype: unicode
        
        """
        callResult = self._Call("GetAbortComment", )

        if callResult is None:
            return None

        return callResult

    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column in your current test case language.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedActionColumnText(self, language):
        """
        Returns the text value of the "action" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedActionColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedParameterColumnText(self, language):
        """
        Returns the text value of the "parameter" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedParameterColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedValueColumnText(self, language):
        """
        Returns the text value of the "value" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedValueColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsOverrideAbortInfoEnabled(self):
        """
        Returns if the block override abort information of underlying test steps.

        :return: Conditional abort enabled
        :rtype: boolean
        
        """
        callResult = self._Call("IsOverrideAbortInfoEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOverrideResultEnabled(self):
        """
        Returns if the block overrides the result of underlying test steps.

        :return: Override result enabled
        :rtype: boolean
        
        """
        callResult = self._Call("IsOverrideResultEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetAbortCode(self, code):
        """
        Sets the abort code of the block.

        :param code: Abort code
        :type code: unicode
        
        """
        callResult = self._Call("SetAbortCode", code)


    def SetAbortComment(self, comment):
        """
        Sets the abort comment of the block.

        :param comment: Abort comment
        :type comment: unicode
        
        """
        callResult = self._Call("SetAbortComment", comment)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetOverrideAbortInfo(self, override):
        """
        Sets the override abort information status.

        :param override: Override abort information status
        :type override: boolean
        
        """
        callResult = self._Call("SetOverrideAbortInfo", override)


    def SetOverrideResult(self, override):
        """
        Sets whether the block overrides the result of underlying test steps:
        NONE and SUCCESS becomes NONE, everything else becomes ERROR.

        :param override: Override result enabled
        :type override: boolean
        
        """
        callResult = self._Call("SetOverrideResult", override)


    def SetParameterColumnText(self, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetParameterColumnText", text)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetTranslatedParameterColumnText(self, language, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedParameterColumnText", language, text)


    def SetTranslatedValueColumnText(self, language, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedValueColumnText", language, text)


    def SetValueColumnText(self, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in
        your current test case language.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetValueColumnText", text)



class TsWrite(TestStepRWBase):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsWrite, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsWrite`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsWrite
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetRepresentation(self, axis='z'):
        """
        Returns the representation of a certain axis of the accessed test quantity.

        :param axis: Axis to set representation for (x, y, z)
        :type axis: unicode
        :return: Representation for axis (PHYS, TEXT, RAW, BITS)
        :rtype: unicode
        
        """
        callResult = self._Call("GetRepresentation", axis)

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self, axis='z'):
        """
        Returns the unit of a certain axis of the accessed test quantity.

        :param axis: Axis to set unit for (x, y, z)
        :type axis: unicode
        :return: Unit for axis
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", axis)

        if callResult is None:
            return None

        return callResult

    def GetValue(self):
        """
        Returns the expression defining the value to be written.

        :return: Expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetValue", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetRepresentation(self, representation='PHYS', axis='z'):
        """
        Sets the representation of a certain axis of the accessed test quantity.

        :param representation: Representation for axis (PHYS, TEXT, RAW, BITS)
        :type representation: unicode
        :param axis: Axis to set representation for (x, y, z)
        :type axis: unicode
        
        """
        callResult = self._Call("SetRepresentation", representation, axis)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUnit(self, unit, axis='z'):
        """
        Sets the unit of a certain axis of the accessed test quantity.

        :param unit: Unit for axis
        :type unit: unicode
        :param axis: Axis to set unit for (x, y, z)
        :type axis: unicode
        
        """
        callResult = self._Call("SetUnit", unit, axis)


    def SetValue(self, value):
        """
        Sets the expression defining the value to be written.

        :param value: Expression
        :type value: unicode
        
        """
        callResult = self._Call("SetValue", value)



class TsCaseNode(TsCaseNodeBase):
    """

    Api- of a case-node.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsCaseNode, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsCaseNode`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCaseNode
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetCaseValue(self):
        """
        Returns the value of the case node.

        :return: Case value
        :rtype: unicode
        
        """
        callResult = self._Call("GetCaseValue", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsDefaultNode(self):
        """
        Returns True if this is the default node.

        :return: If default node
        :rtype: bool
        
        """
        callResult = self._Call("IsDefaultNode", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. For CaseNode test steps this depends solely on
        a parent test step being disabled, since they can not be disabled themselves.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetCaseValue(self, caseValue='0'):
        """
        Sets the value of the case node.

        :param caseValue: Case value
        :type caseValue: unicode
        
        """
        callResult = self._Call("SetCaseValue", caseValue)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsMultiCheck(TestStepContainer):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsMultiCheck, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the Multi-Check test step.

        :param testStep: Test step to be added, either calculation or read test step
        :type testStep: :class:`.TestStep`
        :raise ApiError: If the test step to be appended is not calculation or read
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsMultiCheck`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsMultiCheck
        return classInstance(self._xmlRpc, objId)


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the Multi-Check test step.

        :param testStep: Test step to be added, either calculation or read test step
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        :raise ApiError: If the test step to be inserted is not calculation or read
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsFulfilledForEach(self):
        """
        Returns True, if the option "fulfilled for each test step" is activated. Else False.

        :return: True, if the option "fulfilled for each test step" is activated. Else False.
        :rtype: boolean
        
        """
        callResult = self._Call("IsFulfilledForEach", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetFullFilledForEach(self, value):
        """
        Sets the expectation, the Multi-Check is fulfilled for. If value is True, the expectation
        will be set to "each test step", else it will be "least one test step"

        :param value: True, for "each test step", False for "least one test step"
        :type value: boolean
        
        """
        callResult = self._Call("SetFullFilledForEach", value)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsPostconditionBlock(TsBlockBase):
    """

    Api- of the postcondition block structure test step.
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsPostconditionBlock, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def AppendTestStep(self, testStep):
        """
        Adds a test step at the end of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        
        """
        callResult = self._Call("AppendTestStep", testStep)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsPostconditionBlock`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsPostconditionBlock
        return classInstance(self._xmlRpc, objId)


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column in your current test case language.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTestSteps(self, skipDisabledSteps=True, recursive=False, whiteList=None, blackList=None):
        """
        Returns the children of the test step.
         
        :param skipDisabledSteps: Defines whether disabled test steps should be excluded.
        :type skipDisabledSteps: boolean
        :param recursive: Specifies whether only the direct children of the test step or
                          recursively all test steps from the complete test step tree should be
                          returned.
        :type recursive: boolean
        :param whiteList: If specified, only those test steps whose class name is on this list
                          are returned.
        :type whiteList: list<unicode>
        :param blackList: If specified, only those test steps whose class name is not on this list
                          are returned.
        :type blackList: list<unicode>
                 
        :return: List with all children test steps
        :rtype: list <:class:`.TestStep`>
        
        """
        callResult = self._Call("GetTestSteps", skipDisabledSteps, recursive, whiteList, blackList)

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetTranslatedActionColumnText(self, language):
        """
        Returns the text value of the "action" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedActionColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedParameterColumnText(self, language):
        """
        Returns the text value of the "parameter" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedParameterColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetTranslatedValueColumnText(self, language):
        """
        Returns the text value of the "value" column in the given language.

        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode
        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedValueColumnText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def InsertTestStep(self, testStep, position):
        """
        Adds a test step at a certain position of the container.

        :param testStep: Test step to be added
        :type testStep: :class:`.TestStep`
        :param position: Target index of child beginning with 0
        :type position: integer
        
        """
        callResult = self._Call("InsertTestStep", testStep, position)


    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEffectTestResultEnabled(self):
        """
        Returns if the verdict of the post condition block effects the global result.

        :return: Effect test result
        :rtype: boolean
        
        """
        callResult = self._Call("IsEffectTestResultEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsExecuteIfAbortedEnabled(self):
        """
        Returns if the post condition block is executed even if the action block is aborted.

        :return: Execute if aborted
        :rtype: boolean
        
        """
        callResult = self._Call("IsExecuteIfAbortedEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsOverrideResultEnabled(self):
        """
        Returns if the block overrides the result of underlying test steps.

        :return: Override result enabled
        :rtype: boolean
        
        """
        callResult = self._Call("IsOverrideResultEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEffectTestResult(self, effect=True):
        """
        Sets if the verdict of the post condition block effects the global result.

        :param effect: Effect test result
        :type effect: boolean
        
        """
        callResult = self._Call("SetEffectTestResult", effect)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExecuteIfAborted(self, execute=True):
        """
        Sets the execution of the post condition block even if the action block is aborted.

        :param execute: Execute if aborted
        :type execute: boolean
        
        """
        callResult = self._Call("SetExecuteIfAborted", execute)


    def SetOverrideResult(self, override):
        """
        Sets whether the block overrides the result of underlying test steps:
        NONE and SUCCESS becomes NONE, everything else becomes ERROR.

        :param override: Override result enabled
        :type override: boolean
        
        """
        callResult = self._Call("SetOverrideResult", override)


    def SetParameterColumnText(self, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetParameterColumnText", text)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetTranslatedParameterColumnText(self, language, text):
        """
        Sets the text value to be displayed in the parameter column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedParameterColumnText", language, text)


    def SetTranslatedValueColumnText(self, language, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in the
        given language.

        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetTranslatedValueColumnText", language, text)


    def SetValueColumnText(self, text):
        """
        Sets the text value to be displayed in the value column of the test case editor in
        your current test case language.

        :param text: Text to be displayed
        :type text: unicode
        
        """
        callResult = self._Call("SetValueColumnText", text)



class TsImageDialog(TsUserInterface):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsImageDialog, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsImageDialog`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsImageDialog
        return classInstance(self._xmlRpc, objId)


    def CreateButton(self, labelExpr, returnExpr, insPos=None):
        """
        Creates a button and inserts it at the given position.

        :param labelExpr: Label expression
        :type labelExpr: unicode
        :param returnExpr: Return expression
        :type returnExpr: unicode
        :param insPos: Insert position
        :type insPos: integer
        
        """
        callResult = self._Call("CreateButton", labelExpr, returnExpr, insPos)


    def DeactivateSaveInVariable(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveInVariable", )


    def DeactivateTimeOut(self):
        """
        Deactivates the time out option.
        
        """
        callResult = self._Call("DeactivateTimeOut", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetButtonCount(self):
        """
        Returns the count of buttons that are defined.

        :return: Button count
        :rtype: integer
        
        """
        callResult = self._Call("GetButtonCount", )

        if callResult is None:
            return None

        return callResult

    def GetButtonLabelExpressionByIndex(self, idx):
        """
        Returns the button label expression of the button specified by idx.

        :param idx: Index of the button
        :type idx: integer
        :return: Label expression of the button
        :rtype: unicode
        
        """
        callResult = self._Call("GetButtonLabelExpressionByIndex", idx)

        if callResult is None:
            return None

        return callResult

    def GetButtonReturnExpressionByIndex(self, idx):
        """
        Returns the button return expression of the button specified by idx.

        :param idx: Index of the button
        :type idx: integer
        :return: Return expression of the button
        :rtype: unicode
        
        """
        callResult = self._Call("GetButtonReturnExpressionByIndex", idx)

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDialogDescriptionExpression(self):
        """
        Returns the dialog description expression.

        :return: Dialog description expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogDescriptionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDialogTitleExpression(self):
        """
        Returns the dialog title expression.

        :return: Dialog title expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogTitleExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetImagePathExpression(self):
        """
        Returns the image path expression that specifies the image to show.

        :return: Image path expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetImagePathExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Save in variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeOutExpression(self):
        """
        Returns the time out expression that defines that maximum user input time in milliseconds.
        If the user exceeds this time the dialog will be closed.

        :return: Time out expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeOutExpression", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaximizeEnabled(self):
        """
        Returns whether the window will be maximized or not.

        :return: Whether the window will be maximized
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaximizeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveButtonByIndex(self, idx):
        """
        Removes the button specified by idx.

        :param idx: Index of the button
        :type idx: integer
        
        """
        callResult = self._Call("RemoveButtonByIndex", idx)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetButtonLabelExpressionByIndex(self, labelExpr, idx):
        """
        Sets the button label expression of the button specified by idx.

        :param labelExpr: Label expression of the button
        :type labelExpr: unicode
        :param idx: Index of the button
        :type idx: integer
        
        """
        callResult = self._Call("SetButtonLabelExpressionByIndex", labelExpr, idx)


    def SetButtonReturnExpressionByIndex(self, returnExpr, idx):
        """
        Sets the button return expression of the button specified by idx.

        :param returnExpr: Return expression of the button
        :type returnExpr: unicode
        :param idx: Index of the button
        :type idx: integer
        
        """
        callResult = self._Call("SetButtonReturnExpressionByIndex", returnExpr, idx)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDialogDescriptionExpression(self, descrExpr):
        """
        Sets the dialog description expression.

        :param descrExpr: Dialog description expression
        :type descrExpr: unicode
        
        """
        callResult = self._Call("SetDialogDescriptionExpression", descrExpr)


    def SetDialogTitleExpression(self, titleExpression):
        """
        Sets the dialog title expression.

        :param titleExpression: Dialog title expression
        :type titleExpression: unicode
        
        """
        callResult = self._Call("SetDialogTitleExpression", titleExpression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetImagePathExpression(self, pathExpr):
        """
        Sets the image path expression that specifies the image to show.

        :param pathExpr: Image path expression
        :type pathExpr: unicode
        
        """
        callResult = self._Call("SetImagePathExpression", pathExpr)


    def SetMaximize(self, maximize=True):
        """
        Sets whether the window will be maximized or not.

        :param maximize: Whether the window will be maximized
        :type maximize: boolean
        
        """
        callResult = self._Call("SetMaximize", maximize)


    def SetSaveInVariableName(self, varName):
        """
        Sets the save in variable name.

        :param varName: Variable name
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOutExpression(self, timeoutExpr):
        """
        Sets the time out expression that defines that maximum user input time in milliseconds. If
        the user exceeds this time the dialog will be closed.

        :param timeoutExpr: Time out expression
        :type timeoutExpr: unicode
        
        """
        callResult = self._Call("SetTimeOutExpression", timeoutExpr)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsKeyword(TsAXSCall):
    """

    keyword test step
    
    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsKeyword, self).__init__(xmlRpc, objId)



    def AddActivityArgument(self):
        """
        Convenience-Method for activity argument creation.
        :return: Activity argument of this test step.
        :rtype: :class:`.TsKeywordArgument`
        
        """
        callResult = self._Call("AddActivityArgument", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordArgument
        return classInstance(self._xmlRpc, objId)


    def AddActivityReturn(self):
        """
        Convenience-Method for activity return creation.
        :return: Activity return of this test step
        :rtype: :class:`.TsKeywordReturn`
        
        """
        callResult = self._Call("AddActivityReturn", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordReturn
        return classInstance(self._xmlRpc, objId)


    def AddArgument(self, identifier):
        """
        Adds the argument with the given identifier to the keyword test step. Creates a new
        argument if no such argument exists.

        :param identifier: Identifier of argument. Has to match the identifier of an existing
                           argument of the keyword.
        :type identifier: unicode
        :return: Argument of this test step whose identifier is 'identifier'.
        :rtype: :class:`.TsKeywordArgument`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("AddArgument", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordArgument
        return classInstance(self._xmlRpc, objId)


    def AddComponentArgument(self):
        """
        Convenience-Method for component creation.
        :return: Component argument of this test step.
        :rtype: :class:`.TsKeywordArgument`
        
        """
        callResult = self._Call("AddComponentArgument", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordArgument
        return classInstance(self._xmlRpc, objId)


    def AddDesiredActivityReturn(self):
        """
        Convenience-Method for creation of desired activity in "establish" key word test steps.
        :return: Return of this test step whose name is 'identifier'
        :rtype: :class:`.TsKeywordReturn`
        
        """
        callResult = self._Call("AddDesiredActivityReturn", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordReturn
        return classInstance(self._xmlRpc, objId)


    def AddReturn(self, identifier):
        """
        Adds the return with the given identifier to the keyword test step. Creates a new return if
        no such return already exists.

        Keyword test steps are limited to one return value!

        :param identifier: Identifier of the return. Has to match the identifier of an existing
                           return of the keyword.
        :type identifier: unicode
        :return: Return of this test step whose identifier is 'identifier'
        :rtype: :class:`.TsKeywordReturn`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("AddReturn", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeywordReturn
        return classInstance(self._xmlRpc, objId)


    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsKeyword`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsKeyword
        return classInstance(self._xmlRpc, objId)


    def DeactivateFailedComment(self):
        """
        Deactivates the expectation for the failed comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateFailedComment", )


    def DeactivateSuccessComment(self):
        """
        Deactivates the expectation for the success comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateSuccessComment", )


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM Representation
        :return: An KeywordReprFacace-Object
        :rtype: :class:`.KeywordRepr`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = KeywordRepr
        return classInstance(self._xmlRpc, objId)


    def GetArgument(self, identifier):
        """
        Gets the argument with the given identifier of the keyword test step.

        :param identifier: Identifier of argument. Has to match the identifier of an existing
                           argument of the keyword.
        :type identifier: unicode
        :return: Argument of this test step whose identifier matches 'identifier' or None if there
                is no argument with this identifier.
        :rtype: :class:`.Argument`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("GetArgument", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetArguments(self):
        """
        Returns all argument of the keyword test step.

        :return: List of arguments of this test step.
        :rtype: list <:class:`.TsKeywordArgument`>
        
        """
        callResult = self._Call("GetArguments", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = TsKeywordArgument
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetFailedComment(self):
        """
        Returns the failed comment of the step.

        :return: The failed comment
        :rtype: string
        
        """
        callResult = self._Call("GetFailedComment", )

        if callResult is None:
            return None

        return callResult

    def GetKeywordId(self):
        """
        Returns the id of the referenced keyword.

        :return: id of the keyword referenced by the test step
        :rtype: int
        
        """
        callResult = self._Call("GetKeywordId", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetReturn(self, identifier):
        """
        Gets the return with the given identifier of the keyword test step.

        :param identifier: Identifier of the return. Has to match the identifier of an existing
                           return of the keyword.
        :type identifier: unicode
        :return: Return of this test step whose identifier matches 'identifier' or None if there
                 is no return with this identifier.
        :rtype: :class:`.Return`
        :raise ApiError: If identifier is None or an empty string
        
        """
        callResult = self._Call("GetReturn", identifier)

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetReturns(self):
        """
        Returns all return values of the keyword test step.

        :return: List of returns of this test step.
        :rtype: list <:class:`.TsKeywordReturn`>
        
        """
        callResult = self._Call("GetReturns", )

        if callResult is None:
            return None


        resultList = []
        for objId in callResult:
            classInstance = TsKeywordReturn
            resultList.append(classInstance(self._xmlRpc, objId))
        return resultList


    def GetSuccessComment(self):
        """
        Returns the success comment of the step.

        :return: The success comment
        :rtype: string
        
        """
        callResult = self._Call("GetSuccessComment", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def HasTraceAnalysisImplementation(self):
        """
        Returns whether the implementation is realized by a local trace analysis
        :return: True if this is implemented using trace analysis, else False
        :rtype: boolean
        
        """
        callResult = self._Call("HasTraceAnalysisImplementation", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsEstablishTs(self):
        """
        Returns whether this test step is an establish test step

        :return: True if this is an establish test step, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsEstablishTs", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetFailedComment(self, failedComment):
        """
        Sets the expression for the failed comment of the step. The expression will be
        activated if it was not enabled previously.

        :param failedComment: The expression for the failed comment
        :type failedComment: string
        
        """
        callResult = self._Call("SetFailedComment", failedComment)


    def SetSuccessComment(self, successComment):
        """
        Sets the expression for the success comment of the step. The expression will be
        activated if it was not enabled previously.

        :param successComment: The expression for the success comment
        :type successComment: string
        
        """
        callResult = self._Call("SetSuccessComment", successComment)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsInboxFetch(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsInboxFetch, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsInboxFetch`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsInboxFetch
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateFailedComment(self):
        """
        Deactivates the expectation for the failed comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateFailedComment", )


    def DeactivateSaveIn(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def DeactivateSuccessComment(self):
        """
        Deactivates the expectation for the success comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateSuccessComment", )


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectation(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetExpectationExpression(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: string
        
        """
        callResult = self._Call("GetExpectationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetFailedComment(self):
        """
        Returns the failed comment of the step.

        :return: The failed comment
        :rtype: string
        
        """
        callResult = self._Call("GetFailedComment", )

        if callResult is None:
            return None

        return callResult

    def GetFetchTimeoutMode(self):
        """
        - DEFAULT: Uses the timeout time of the inbox variable.
        - UNLIMITED: Timeout is disabled.
        - USER_DEFINED: The timeout time can be user defined with the method
                        'SetUserDefinedFetchTimeout'.

        :return: The timeout mode. One of [u'DEFAULT', u'UNLIMITED', u'USER_DEFINED']
        :rtype: unicode
        
        """
        callResult = self._Call("GetFetchTimeoutMode", )

        if callResult is None:
            return None

        return callResult

    def GetInboxName(self):
        """
        Returns the inbox variable name.

        :return: Name of the inbox variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetInboxName", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Name of the save in variable
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetSuccessComment(self):
        """
        Returns the success comment of the step.

        :return: The success comment
        :rtype: string
        
        """
        callResult = self._Call("GetSuccessComment", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUserDefinedFetchTimeout(self):
        """
        Returns the user defined fetch timeout expression.

        :return: Fetch timeout expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetUserDefinedFetchTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsKeepMessageEnabled(self):
        """
        Returns whether the keep message mode is enabled or disabled.

        :return: Truth value of whether the keep message mode is enabled or disabled
        :rtype: boolean
        
        """
        callResult = self._Call("IsKeepMessageEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectation(self, expectation):
        """
        Sets the expectation in the evaluation of the test step. The expectation will be
        activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        
        """
        callResult = self._Call("SetExpectation", expectation)


    def SetExpectationExpression(self, expectation):
        """
        Shortcut to set an expectation for an unspecific type in the evaluation of the test step.
        The expectation will be activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: string
        
        """
        callResult = self._Call("SetExpectationExpression", expectation)


    def SetFailedComment(self, failedComment):
        """
        Sets the expression for the failed comment of the step. The expression will be
        activated if it was not enabled previously.

        :param failedComment: The expression for the failed comment
        :type failedComment: string
        
        """
        callResult = self._Call("SetFailedComment", failedComment)


    def SetFetchTimeoutMode(self, timeoutMode):
        """
        Sets the timeout mode.

        - DEFAULT: Uses the timeout time of the inbox variable.
        - UNLIMITED: Timeout is disabled.
        - USER_DEFINED: The timeout time can be user defined with the method
                         'SetUserDefinedFetchTimeout'.

        :param timeoutMode: The timeout mode. Must be one of [u'DEFAULT', u'UNLIMITED',
                            u'USER_DEFINED']
        :type timeoutMode: unicode
        
        """
        callResult = self._Call("SetFetchTimeoutMode", timeoutMode)


    def SetInboxName(self, inboxName):
        """
        Sets the inbox variable name. The test step must be inserted into a package prior to
        calling this method.

        :param inboxName: Name of the inbox variable
        :type inboxName: unicode
        
        """
        callResult = self._Call("SetInboxName", inboxName)


    def SetKeepMessage(self, value=True):
        """
        Enables or disables the keep message mode.

        :param value: Truth value of whether the keep message mode is enabled or disabled
        :type value: boolean
        
        """
        callResult = self._Call("SetKeepMessage", value)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the save in variable name. The variable will be created if it doesn't exist already.

        :param variableName: Name of the variable
        :type variableName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetSuccessComment(self, successComment):
        """
        Sets the expression for the success comment of the step. The expression will be
        activated if it was not enabled previously.

        :param successComment: The expression for the success comment
        :type successComment: string
        
        """
        callResult = self._Call("SetSuccessComment", successComment)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUserDefinedFetchTimeout(self, timeout):
        """
        Sets the user defined fetch timeout expression.

        :param timeout: Fetch timeout expression
        :type timeout: unicode
        
        """
        callResult = self._Call("SetUserDefinedFetchTimeout", timeout)



class TsCalculation(TestStep):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsCalculation, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsCalculation`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsCalculation
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateFailedComment(self):
        """
        Deactivates the expectation for the failed comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateFailedComment", )


    def DeactivateSaveIn(self):
        """
        Deactivates the test step's save in property, so the value will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def DeactivateSuccessComment(self):
        """
        Deactivates the expectation for the success comment so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateSuccessComment", )


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectation(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetExpectationExpression(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: string
        
        """
        callResult = self._Call("GetExpectationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetFailedComment(self):
        """
        Returns the failed comment of the step.

        :return: The failed comment
        :rtype: string
        
        """
        callResult = self._Call("GetFailedComment", )

        if callResult is None:
            return None

        return callResult

    def GetFormula(self):
        """
        Returns the formula of the calculation test step.

        :return: Formula of the calculation test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetFormula", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the currently selected variable to save the data.

        :return: The variable's name
        :rtype: string
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetSuccessComment(self):
        """
        Returns the success comment of the step.

        :return: The success comment
        :rtype: string
        
        """
        callResult = self._Call("GetSuccessComment", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectation(self, expectation):
        """
        Sets the expectation in the evaluation of the test step. The expectation will be
        activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        
        """
        callResult = self._Call("SetExpectation", expectation)


    def SetExpectationExpression(self, expectation):
        """
        Shortcut to set an expectation for an unspecific type in the evaluation of the test step.
        The expectation will be activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: string
        
        """
        callResult = self._Call("SetExpectationExpression", expectation)


    def SetFailedComment(self, failedComment):
        """
        Sets the expression for the failed comment of the step. The expression will be
        activated if it was not enabled previously.

        :param failedComment: The expression for the failed comment
        :type failedComment: string
        
        """
        callResult = self._Call("SetFailedComment", failedComment)


    def SetFormula(self, formula='0'):
        """
        Sets the formula of the calculation test step.

        :param formula: formula of the calculation test step
        :type formula: unicode
        
        """
        callResult = self._Call("SetFormula", formula)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing data by the test step. The variable
        will be created automatically if it does not already exist in the package where the test
        step is placed in.
        This method must not be called, if the test step has not been added to a package previously.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: string
        :raise ApiError: - If SaveIn was called before the test step was added to a package.
                         - If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetSuccessComment(self, successComment):
        """
        Sets the expression for the success comment of the step. The expression will be
        activated if it was not enabled previously.

        :param successComment: The expression for the success comment
        :type successComment: string
        
        """
        callResult = self._Call("SetSuccessComment", successComment)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsMessageDialog(TsUserInterface):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsMessageDialog, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsMessageDialog`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsMessageDialog
        return classInstance(self._xmlRpc, objId)


    def CreateButton(self, labelExpr, returnExpr, insPos=None):
        """
        Creates a button and inserts it at the given position.

        :param labelExpr: Label expression
        :type labelExpr: unicode
        :param returnExpr: Return expression
        :type returnExpr: unicode
        :param insPos: Insert position
        :type insPos: integer
        
        """
        callResult = self._Call("CreateButton", labelExpr, returnExpr, insPos)


    def DeactivateSaveInVariable(self):
        """
        Deactivates the save in variable option.
        
        """
        callResult = self._Call("DeactivateSaveInVariable", )


    def DeactivateTimeOut(self):
        """
        Deactivates the time out option.
        
        """
        callResult = self._Call("DeactivateTimeOut", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetButtonCount(self):
        """
        Returns the count of buttons that are defined.

        :return: Button count
        :rtype: integer
        
        """
        callResult = self._Call("GetButtonCount", )

        if callResult is None:
            return None

        return callResult

    def GetButtonLabelExpressionByIndex(self, idx):
        """
        Returns the button label expression of the button specified by idx.

        :param idx: Index of the button
        :type idx: integer
        :return: Label expression of the button
        :rtype: unicode
        
        """
        callResult = self._Call("GetButtonLabelExpressionByIndex", idx)

        if callResult is None:
            return None

        return callResult

    def GetButtonReturnExpressionByIndex(self, idx):
        """
        Returns the button return expression of the button specified by idx.

        :param idx: Index of the button
        :type idx: integer
        :return: Return expression of the button
        :rtype: unicode
        
        """
        callResult = self._Call("GetButtonReturnExpressionByIndex", idx)

        if callResult is None:
            return None

        return callResult

    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetDialogDescriptionExpression(self):
        """
        Returns the dialog description expression.

        :return: Dialog description expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogDescriptionExpression", )

        if callResult is None:
            return None

        return callResult

    def GetDialogTitleExpression(self):
        """
        Returns the dialog title expression.

        :return: Dialog title expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetDialogTitleExpression", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMessageType(self):
        """
        Returns the type of the message dialog.

        :return: Message dialog type. Must be one of [u'INFO', u'QUESTION', u'WARNING', u'ERROR']
        :rtype: unicode
        
        """
        callResult = self._Call("GetMessageType", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetSaveInVariableName(self):
        """
        Returns the save in variable name.

        :return: Save in variable name
        :rtype: unicode
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeOutExpression(self):
        """
        Returns the time out expression that defines that maximum user input time in milliseconds.
        If the user exceeds this time the dialog will be closed.

        :return: Time out expression
        :rtype: unicode
        
        """
        callResult = self._Call("GetTimeOutExpression", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsMaximizeEnabled(self):
        """
        Returns whether the window will be maximized or not.

        :return: Whether the window will be maximized
        :rtype: boolean
        
        """
        callResult = self._Call("IsMaximizeEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveButtonByIndex(self, idx):
        """
        Removes the button specified by idx.

        :param idx: Index of the button
        :type idx: integer
        
        """
        callResult = self._Call("RemoveButtonByIndex", idx)


    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetButtonLabelExpressionByIndex(self, labelExpr, idx):
        """
        Sets the button label expression of the button specified by idx.

        :param labelExpr: Label expression of the button
        :type labelExpr: unicode
        :param idx: Index of the button
        :type idx: integer
        
        """
        callResult = self._Call("SetButtonLabelExpressionByIndex", labelExpr, idx)


    def SetButtonReturnExpressionByIndex(self, returnExpr, idx):
        """
        Sets the button return expression of the button specified by idx.

        :param returnExpr: Return expression of the button
        :type returnExpr: unicode
        :param idx: Index of the button
        :type idx: integer
        
        """
        callResult = self._Call("SetButtonReturnExpressionByIndex", returnExpr, idx)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetDialogDescriptionExpression(self, descrExpr):
        """
        Sets the dialog description expression.

        :param descrExpr: Dialog description expression
        :type descrExpr: unicode
        
        """
        callResult = self._Call("SetDialogDescriptionExpression", descrExpr)


    def SetDialogTitleExpression(self, titleExpression):
        """
        Sets the dialog title expression.

        :param titleExpression: Dialog title expression
        :type titleExpression: unicode
        
        """
        callResult = self._Call("SetDialogTitleExpression", titleExpression)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetMaximize(self, maximize=True):
        """
        Sets whether the window will be maximized or not.

        :param maximize: Whether the window will be maximized
        :type maximize: boolean
        
        """
        callResult = self._Call("SetMaximize", maximize)


    def SetMessageType(self, msgType):
        """
        Sets the type of the message dialog.

        :param msgType: Message dialog type. Must be one of [u'INFO', u'QUESTION', u'WARNING',
            u'ERROR']
        :type msgType: unicode
        
        """
        callResult = self._Call("SetMessageType", msgType)


    def SetSaveInVariableName(self, varName):
        """
        Sets the save in variable name.

        :param varName: Variable name
        :type varName: unicode
        
        """
        callResult = self._Call("SetSaveInVariableName", varName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOutExpression(self, timeoutExpr):
        """
        Sets the time out expression that defines that maximum user input time in milliseconds. If
        the user exceeds this time the dialog will be closed.

        :param timeoutExpr: Time out expression
        :type timeoutExpr: unicode
        
        """
        callResult = self._Call("SetTimeOutExpression", timeoutExpr)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)



class TsRead(TestStepRWBase):
    """

    """


    def __init__(self, xmlRpc=None, objId=0):
        super(TsRead, self).__init__(xmlRpc, objId)



    def AddTag(self, tag):
        """
        Add a specific tag to this step.
        
        :param tag: The tag to be set
        :type tag: unicode
        
        """
        callResult = self._Call("AddTag", tag)


    def Clone(self):
        """
        Call this method if you want to use API-objects in multiple contexts, e.g.
        if you want to insert a specific test step in multiple blocks.
        
        :return: A copy of this object
        :rtype: :class:`.TsRead`
        
        """
        callResult = self._Call("Clone", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = TsRead
        return classInstance(self._xmlRpc, objId)


    def DeactivateExpectation(self):
        """
        Deactivates the expectation so that the result will not be evaluated.
        
        """
        callResult = self._Call("DeactivateExpectation", )


    def DeactivateSaveIn(self):
        """
        Deactivates the test step's save in property, so the value will not be stored in a
        package variable.
        
        """
        callResult = self._Call("DeactivateSaveIn", )


    def DeactivateTimeOption(self):
        """
        Deactivates any time option set on the test step. This is equivalent to selecting the
        option "none" in the test step's time options menu.
        
        """
        callResult = self._Call("DeactivateTimeOption", )


    def GetActionColumnText(self):
        """
        Returns the text value of the "action" column.

        :return: Action column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetActionColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetActiveTimeOptionType(self):
        """
        Returns the type of the currently active time option.

        :return: Type of active time option ("Timeless", "Finally", "TrueForWithin", "Generally",
                 "SyncOnly", "PollingCycleMultiplier")
        :rtype: string
        
        """
        callResult = self._Call("GetActiveTimeOptionType", )

        if callResult is None:
            return None

        return callResult

    def GetAlmRepresentation(self):
        """
        **for internal use only**

        Returns the ALM-Representation fÃ¼r the test step
        
        :return: ALM-Representation of the test step
        :rtype: :class:`.MappingTestStepAlmRepresentation`
        
        """
        callResult = self._Call("GetAlmRepresentation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = MappingTestStepAlmRepresentation
        return classInstance(self._xmlRpc, objId)


    def GetComment(self):
        """
        Returns the comment of the test step in the current test case language.

        :return: Comment text as shown in the comment tab
        :rtype: unicode
        
        """
        callResult = self._Call("GetComment", )

        if callResult is None:
            return None

        return callResult

    def GetCommentColumnText(self):
        """
        Returns the text value of the "comment" column.

        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetCommentColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetError(self):
        """
        Returns a list of errors.
        Note that the error messages depend on the programm language ECU-TEST is set to. Because of
        that we do not recommend to check against exact error messages, unless you are certain about 
        the respective program language.

        :return: List of errors
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetError", )

        if callResult is None:
            return None

        return callResult

    def GetExpectation(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: :class:`.Expectation`
        
        """
        callResult = self._Call("GetExpectation", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetExpectationExpression(self):
        """
        Returns the expectation expression from the evaluation of the test step, or None, if no
        expectation was defined.

        :return: The expectation
        :rtype: string
        
        """
        callResult = self._Call("GetExpectationExpression", )

        if callResult is None:
            return None

        return callResult

    def GetLineNo(self):
        """
        Returns the test steps line number within its test case.

        :return: Line number
        :rtype: int
        
        """
        callResult = self._Call("GetLineNo", )

        if callResult is None:
            return None

        return callResult

    def GetMappingItemReferenceName(self):
        """
        Returns the unique reference name of the mapping item used by this test step.

        :return: Reference name of used mapping item
        :rtype: unicode
        
        """
        callResult = self._Call("GetMappingItemReferenceName", )

        if callResult is None:
            return None

        return callResult

    def GetMinimumDuration(self):
        """
        Returns the minimum duration of the test step's time option, if a corresponding option
        has been set.

        :return: The minimum duration, else None
        :rtype: string
        
        """
        callResult = self._Call("GetMinimumDuration", )

        if callResult is None:
            return None

        return callResult

    def GetParameterColumnText(self):
        """
        Returns the text value of the "parameter" column.

        :return: Parameter column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetParameterColumnText", )

        if callResult is None:
            return None

        return callResult

    def GetParent(self):
        """
        Returns the parent test step.

        :return: The parent test step or None if it is a top level test step.
        :rtype: :class:`.TestStep`
        
        """
        callResult = self._Call("GetParent", )

        if callResult is None:
            return None


        objId = callResult
        classInstance = globals()[self._xmlRpc.ObjectApi.GetClassNameForId(objId)]
        return classInstance(self._xmlRpc, objId)


    def GetPollingCycle(self):
        """
        Returns the polling cycle of the test step's time option, if a corresponding option
        has been set.

        :return: The polling cycle, else None
        :rtype: string
        
        """
        callResult = self._Call("GetPollingCycle", )

        if callResult is None:
            return None

        return callResult

    def GetRepresentation(self, axis='z'):
        """
        Returns the representation of a certain axis of the accessed test quantity.

        :param axis: Axis to set representation for (x, y, z)
        :type axis: unicode
        :return: Representation for axis (PHYS, TEXT, RAW, BITS)
        :rtype: unicode
        
        """
        callResult = self._Call("GetRepresentation", axis)

        if callResult is None:
            return None

        return callResult

    def GetSaveInVariableName(self):
        """
        Returns the currently selected variable to save the data.

        :return: The variable's name
        :rtype: string
        
        """
        callResult = self._Call("GetSaveInVariableName", )

        if callResult is None:
            return None

        return callResult

    def GetTags(self):
        """
        Returns the tags set for this step.
        
        :return: A (sorted) list of tags
        :rtype: list<unicode>
        
        """
        callResult = self._Call("GetTags", )

        if callResult is None:
            return None

        return callResult

    def GetTestManagementId(self):
        """
        Returns the test management id of the test step.

        :return: Test step id.
        :rtype: unicode
        
        """
        callResult = self._Call("GetTestManagementId", )

        if callResult is None:
            return None

        return callResult

    def GetTestStepId(self):
        """
        Returns the test step id.

        :return: test step id
        :rtype: long
        
        """
        callResult = self._Call("GetTestStepId", )

        if callResult is None:
            return None

        return callResult

    def GetTimeout(self):
        """
        Returns the timeout of the test step's time option, if a corresponding option has been set.

        :return: The timeout else None
        :rtype: string
        
        """
        callResult = self._Call("GetTimeout", )

        if callResult is None:
            return None

        return callResult

    def GetTranslatedCommentText(self, language):
        """
        Returns the text value of the "comment" column in the given language.
        
        :param language: Language of the requested text ('en_US', 'de_DE')
        :type language: unicode  
        :return: Comment column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetTranslatedCommentText", language)

        if callResult is None:
            return None

        return callResult

    def GetType(self):
        """
        Returns the type (class name) of the test step, e.g.
         * "TsPreconditionBlock"
         * "TsWait"
         * "TsIfThenElse"
         * "TsSwitchCase"
         * "TsCaseNode"

        :return: Type (class name) of the test step
        :rtype: unicode
        
        """
        callResult = self._Call("GetType", )

        if callResult is None:
            return None

        return callResult

    def GetUnit(self, axis='z'):
        """
        Returns the unit of a certain axis of the accessed test quantity.

        :param axis: Axis to set unit for (x, y, z)
        :type axis: unicode
        :return: Unit for axis
        :rtype: unicode
        
        """
        callResult = self._Call("GetUnit", axis)

        if callResult is None:
            return None

        return callResult

    def GetValueColumnText(self):
        """
        Returns the text value of the "value" column in your current test case language.

        :return: Value column text
        :rtype: unicode
        
        """
        callResult = self._Call("GetValueColumnText", )

        if callResult is None:
            return None

        return callResult

    def IsBreakpoint(self):
        """
        Checks whether the test step is a break point.

        :return: True if test step is a break point, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsBreakpoint", )

        if callResult is None:
            return None

        return callResult

    def IsContainer(self):
        """
        Checks whether this test step can contain test steps.

        :return: True if it can contain test steps, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsContainer", )

        if callResult is None:
            return None

        return callResult

    def IsEnabled(self):
        """
        Returns the state of the test step.

        :return: True if test step is enabled, otherwise False
        :rtype: bool
        
        """
        callResult = self._Call("IsEnabled", )

        if callResult is None:
            return None

        return callResult

    def IsInPostcondition(self):
        """
        Returns True if the test step is located in a postcondition

        :return: True if the test step is located in a postcondition, else Flase
        :rtype: bool
        
        """
        callResult = self._Call("IsInPostcondition", )

        if callResult is None:
            return None

        return callResult

    def IsInPrecondition(self):
        """
        Returns True if the test step is located in a precondition

        :return: True if the test step is located in a precondition, else False
        :rtype: bool
        
        """
        callResult = self._Call("IsInPrecondition", )

        if callResult is None:
            return None

        return callResult

    def IsOk(self):
        """
        Returns the internal state of correctness of the test step.

        :return: True if no problems were found, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsOk", )

        if callResult is None:
            return None

        return callResult

    def IsVisible(self):
        """
        Checks whether the test step is visible. This depends on the test step itself or
        a parent test step being disabled.

        :return: True if test step is visible, else False
        :rtype: boolean
        
        """
        callResult = self._Call("IsVisible", )

        if callResult is None:
            return None

        return callResult

    def RemoveTag(self, tag):
        """
        Remove a specific tag from this step.
        
        :param tag: The tag to be removed
        :type tag: unicode
        
        """
        callResult = self._Call("RemoveTag", tag)


    def SetBreakpoint(self, enable):
        """
        Sets or unsets the test step to act as a break point.

        :param enable: True if test step is a break point, else False
        :type enable: boolean
        
        """
        callResult = self._Call("SetBreakpoint", enable)


    def SetComment(self, comment):
        """
        Sets a comment for the test step in the current test case language.

        :param comment: Text to be displayed in the comment tab
        :type comment: unicode
        
        """
        callResult = self._Call("SetComment", comment)


    def SetEnabled(self, state=True):
        """
        Enable or disable the test step.

        :param state: True (Default) to enable, False to disable the test step.
        :type state: bool
        
        """
        callResult = self._Call("SetEnabled", state)


    def SetExpectation(self, expectation):
        """
        Sets the expectation in the evaluation of the test step. The expectation will be
        activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: :class:`.Expectation`
        
        """
        callResult = self._Call("SetExpectation", expectation)


    def SetExpectationExpression(self, expectation):
        """
        Shortcut to set an expectation for an unspecific type in the evaluation of the test step.
        The expectation will be activated if it was not enabled previously.

        :param expectation: The expectation
        :type expectation: string
        
        """
        callResult = self._Call("SetExpectationExpression", expectation)


    def SetRepresentation(self, representation='PHYS', axis='z'):
        """
        Sets the representation of a certain axis of the accessed test quantity.

        :param representation: Representation for axis (PHYS, TEXT, RAW, BITS)
        :type representation: unicode
        :param axis: Axis to set representation for (x, y, z)
        :type axis: unicode
        
        """
        callResult = self._Call("SetRepresentation", representation, axis)


    def SetSaveInVariableName(self, variableName):
        """
        Sets the name of the variable used for storing data by the test step. The variable
        will be created automatically if it does not already exist in the package where the test
        step is placed in.
        This method must not be called, if the test step has not been added to a package previously.

        :param variableName: The variable's name. Must not be None or an empty string.
        :type variableName: string
        :raise ApiError: - If SaveIn was called before the test step was added to a package.
                         - If variableName is None or an empty string
        
        """
        callResult = self._Call("SetSaveInVariableName", variableName)


    def SetTags(self, tags):
        """
        Set the list of tags for this step. The list of tags will be sorted and stored.
        
        :param tags: The list of tags
        :type tags: list<unicode>
        
        """
        callResult = self._Call("SetTags", tags)


    def SetTestManagementId(self, testManagementId):
        """
        Sets the test management id of the test step.

        :param testManagementId: Test management id of the test step
        :type testManagementId: unicode
        
        """
        callResult = self._Call("SetTestManagementId", testManagementId)


    def SetTimeOptionOnlySynchronization(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "only synchronization".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionOnlySynchronization", timeout, pollingCycle)


    def SetTimeOptionPollingCycleMultiplier(self, pollingCycleMultiplier):
        """
        Sets the test step's time option to "polling cycle multiplier".
        This option must only be used when inserting the test step into a Multi-Check!

        :param pollingCycleMultiplier: The polling cycle multiplier to be used.
        :type pollingCycleMultiplier: string
        
        """
        callResult = self._Call("SetTimeOptionPollingCycleMultiplier", pollingCycleMultiplier)


    def SetTimeOptionTrueForAtLeast(self, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least".

        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeast", minimumDuration, pollingCycle)


    def SetTimeOptionTrueForAtLeastWithin(self, timeout, minimumDuration, pollingCycle=None):
        """
        Sets the test step's time option to "true for at least ... within ...".

        :param timeout: The timeout to be used
        :type timeout: string
        :param minimumDuration: The minimum duration to be used
        :type minimumDuration: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionTrueForAtLeastWithin", timeout, minimumDuration, pollingCycle)


    def SetTimeOptionWaitUntilTrue(self, timeout, pollingCycle=None):
        """
        Sets the test step's time option to "wait until true".

        :param timeout: The timeout to be used
        :type timeout: string
        :param pollingCycle: The polling cycle to be used. Might be left out.
        :type pollingCycle: string
        
        """
        callResult = self._Call("SetTimeOptionWaitUntilTrue", timeout, pollingCycle)


    def SetTranslatedCommentText(self, comment, language):
        """
        Sets a comment for the test step in the given language.

        :param comment: Text to be displayed
        :type comment: unicode
        :param language: Language of the text ('en_US', 'de_DE')
        :type language: unicode
        
        """
        callResult = self._Call("SetTranslatedCommentText", comment, language)


    def SetUnit(self, unit, axis='z'):
        """
        Sets the unit of a certain axis of the accessed test quantity.

        :param unit: Unit for axis
        :type unit: unicode
        :param axis: Axis to set unit for (x, y, z)
        :type axis: unicode
        
        """
        callResult = self._Call("SetUnit", unit, axis)


